# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  #  mindbody_public_api client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Access to appointment controller.
    # @return [AppointmentController] Returns the controller instance.
    def appointment
      @appointment ||= AppointmentController.new @global_configuration
    end

    # Access to mclass controller.
    # @return [ClassController] Returns the controller instance.
    def mclass
      @mclass ||= ClassController.new @global_configuration
    end

    # Access to client controller.
    # @return [ClientController] Returns the controller instance.
    def client
      @client ||= ClientController.new @global_configuration
    end

    # Access to cross_site controller.
    # @return [CrossSiteController] Returns the controller instance.
    def cross_site
      @cross_site ||= CrossSiteController.new @global_configuration
    end

    # Access to enrollment controller.
    # @return [EnrollmentController] Returns the controller instance.
    def enrollment
      @enrollment ||= EnrollmentController.new @global_configuration
    end

    # Access to payroll controller.
    # @return [PayrollController] Returns the controller instance.
    def payroll
      @payroll ||= PayrollController.new @global_configuration
    end

    # Access to pick_a_spot controller.
    # @return [PickASpotController] Returns the controller instance.
    def pick_a_spot
      @pick_a_spot ||= PickASpotController.new @global_configuration
    end

    # Access to sale controller.
    # @return [SaleController] Returns the controller instance.
    def sale
      @sale ||= SaleController.new @global_configuration
    end

    # Access to site controller.
    # @return [SiteController] Returns the controller instance.
    def site
      @site ||= SiteController.new @global_configuration
    end

    # Access to staff controller.
    # @return [StaffController] Returns the controller instance.
    def staff
      @staff ||= StaffController.new @global_configuration
    end

    # Access to user_token controller.
    # @return [UserTokenController] Returns the controller instance.
    def user_token
      @user_token ||= UserTokenController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524, 408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put get put], http_callback: nil,
      environment: Environment::PRODUCTION, api_key: nil,
      custom_header_authentication_credentials: nil, config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    environment: environment, api_key: api_key,
                    custom_header_authentication_credentials: custom_header_authentication_credentials
                  )
                else
                  config
                end

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[API-Key].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['API-Key'] = CustomHeaderAuthentication.new(
        http_client_config.custom_header_authentication_credentials
      )
    end
  end
end
