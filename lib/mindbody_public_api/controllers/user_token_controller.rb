# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # UserTokenController
  class UserTokenController < BaseController
    # When users interact with your Public API integration as staff members,
    # they need to get a staff user token for authentication.
    # You can use the issue endpoint to get a staff user token, then pass the
    # token in the headers for all of your requests.
    # @param [String] version Required parameter: version of the api.
    # @param [IssueRequest] request Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @return [IssueResponse] response from the API call
    def issue_token(version,
                    request,
                    site_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/usertoken/issue',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .body_param(new_parameter(request))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(IssueResponse.method(:from_hash)))
        .execute
    end

    # Renews a token. Can be used to extend the lifetime of a token.
    # Current lifetime expansion: 24hrs from current expiration, up to 7
    # renewals.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [Object] response from the API call
    def renew_token(version,
                    site_id,
                    authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/usertoken/renew',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end

    # Revokes the user token in the Authorization header.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [Object] response from the API call
    def revoke_token(version,
                     site_id,
                     authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/public/v{version}/usertoken/revoke',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end
  end
end
