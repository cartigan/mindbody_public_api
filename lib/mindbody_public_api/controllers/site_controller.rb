# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # SiteController
  class SiteController < BaseController
    # Before you can use this endpoint, MINDBODY must approve your developer
    # account for live access. If you have finished testing in the sandbox and
    # are ready to begin working with MINDBODY customers, log into your account
    # and request to go live.
    # See [Accessing Business Data From
    # MINDBODY](https://developers.mindbodyonline.com/PublicDocumentation/V6#acc
    # essing-business-data) for more information about the activation code and
    # how to use it.
    # Once you are approved, this endpoint returns an activation code.This
    # endpoint supports only one site per call.
    # @param [String] version Required parameter: version of the api.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetActivationCodeResponse] response from the API call
    def get_activation_code(version,
                            authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/activationcode',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetActivationCodeResponse.method(:from_hash)))
        .execute
    end

    # Gets the categories.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active Optional parameter: When
    # `true`, the response only contains categories which are activated.   When
    # `false`, only deactivated categories are returned.  Default: **All
    # Categories**
    # @param [Array[Integer]] request_category_ids Optional parameter: When
    # included, the response only contains details about the specified category
    # Ids.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [TrueClass | FalseClass] request_service Optional parameter: When
    # `true`, the response only contains details about Revenue Categories.  When
    # `false`, only Product Revenue Categories are returned.  Default: **All
    # Categories**
    # @param [Array[Integer]] request_sub_category_ids Optional parameter: When
    # included, the response only contains details about the specified
    # subcategory Ids.
    # @return [GetCategoriesResponse] response from the API call
    def get_categories(version,
                       site_id,
                       authorization: nil,
                       request_active: nil,
                       request_category_ids: nil,
                       request_limit: nil,
                       request_offset: nil,
                       request_service: nil,
                       request_sub_category_ids: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/categories',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active, key: 'request.active'))
                   .query_param(new_parameter(request_category_ids, key: 'request.categoryIds'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_service, key: 'request.service'))
                   .query_param(new_parameter(request_sub_category_ids, key: 'request.subCategoryIds'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetCategoriesResponse.method(:from_hash)))
        .execute
    end

    # The endpoint returns a list of configured client gender options for a
    # site. Custom gender options are assignable to client genders only.
    # Currently, custom values returned from this endpoint cannot be used as
    # input for other endpoints to specify the genders of staff or client
    # preferences.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetGendersResponse] response from the API call
    def get_genders(version,
                    site_id,
                    authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/genders',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetGendersResponse.method(:from_hash)))
        .execute
    end

    # Gets Liability Waiver content at the specified business.
    # This endpoint requires staff user credentials.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetLiabilityWaiverResponse] response from the API call
    def get_liability_waiver(version,
                             site_id,
                             authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/liabilitywaiver',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetLiabilityWaiverResponse.method(:from_hash)))
        .execute
    end

    # Get locations for a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @return [GetLocationsResponse] response from the API call
    def get_locations(version,
                      site_id,
                      authorization: nil,
                      request_limit: nil,
                      request_offset: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/locations',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetLocationsResponse.method(:from_hash)))
        .execute
    end

    # Get the memberships at a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [Array[Integer]] request_membership_ids Optional parameter: The
    # requested membership IDs.<br />  Default: **all** IDs that the
    # authenticated user’s access level allows.
    # @return [GetMembershipsResponse] response from the API call
    def get_memberships(version,
                        site_id,
                        authorization: nil,
                        request_membership_ids: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/memberships',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_membership_ids, key: 'request.membershipIds'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetMembershipsResponse.method(:from_hash)))
        .execute
    end

    # Get the list of mobile providers that are supported by the business.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active Optional parameter: When
    # `true`, the response only contains mobile providers which are activated.
    # When `false`, only deactivated mobile providers are returned.  Default:
    # **All Mobile Providers**
    # @return [GetMobileProvidersResponse] response from the API call
    def get_mobile_providers(version,
                             site_id,
                             authorization: nil,
                             request_active: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/mobileproviders',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active, key: 'request.active'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetMobileProvidersResponse.method(:from_hash)))
        .execute
    end

    # Get payment types for a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active Optional parameter: When
    # `true`, the response only contains payment types which are activated.
    # When `false`, only deactivated payment types are returned.  Default: **All
    # Payment Types**
    # @return [GetPaymentTypesResponse] response from the API call
    def get_payment_types(version,
                          site_id,
                          authorization: nil,
                          request_active: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/paymenttypes',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active, key: 'request.active'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetPaymentTypesResponse.method(:from_hash)))
        .execute
    end

    # Get service categories offered at a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [TrueClass | FalseClass] request_online_only Optional parameter: If
    # `true`, filters results to show only those programs that are shown
    # online.<br />  If `false`, all programs are returned.<br />  Default:
    # **false**
    # @param [Array[Integer]] request_program_ids Optional parameter: Program
    # Ids to filter for
    # @param [RequestScheduleTypeEnum] request_schedule_type Optional parameter:
    # A schedule type used to filter the returned results. Possible values are:
    # * All  * Class  * Enrollment  * Appointment  * Resource  * Media  *
    # Arrival
    # @return [GetProgramsResponse] response from the API call
    def get_programs(version,
                     site_id,
                     authorization: nil,
                     request_limit: nil,
                     request_offset: nil,
                     request_online_only: nil,
                     request_program_ids: nil,
                     request_schedule_type: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/programs',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_online_only, key: 'request.onlineOnly'))
                   .query_param(new_parameter(request_program_ids, key: 'request.programIds'))
                   .query_param(new_parameter(request_schedule_type, key: 'request.scheduleType'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetProgramsResponse.method(:from_hash)))
        .execute
    end

    # Gets a list of promocodes at the specified business. This endpoint
    # requires staff user credentials.
    # This staff member should have enabled the Set up promotions / **Semester
    # discounts** staff permission.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active_only Optional parameter: If
    # true, filters results to show only promocodes that are active. If
    # **false**, all promocodes are returned.  Default: **true**
    # @param [DateTime] request_end_date Optional parameter: Filters results to
    # promocodes that were activated before this date.
    # @param [DateTime] request_last_modified_date Optional parameter: Filters
    # results to promocodes that were modified on or after this date.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [TrueClass | FalseClass] request_online_only Optional parameter: If
    # `true`, filters results to show only promocodes that can be used for
    # online sale.  If `false`, all promocodes are returned.  Default:
    # **false**
    # @param [DateTime] request_start_date Optional parameter: Filters results
    # to promocodes that were activated after this date.
    # @return [GetPromoCodesResponse] response from the API call
    def get_promo_codes(version,
                        site_id,
                        authorization: nil,
                        request_active_only: nil,
                        request_end_date: nil,
                        request_last_modified_date: nil,
                        request_limit: nil,
                        request_offset: nil,
                        request_online_only: nil,
                        request_start_date: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/promocodes',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active_only, key: 'request.activeOnly'))
                   .query_param(new_parameter(request_end_date, key: 'request.endDate'))
                   .query_param(new_parameter(request_last_modified_date, key: 'request.lastModifiedDate'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_online_only, key: 'request.onlineOnly'))
                   .query_param(new_parameter(request_start_date, key: 'request.startDate'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetPromoCodesResponse.method(:from_hash)))
        .execute
    end

    # Get the list of prospect stages that represent the prospect stage options
    # for prospective clients.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active Optional parameter: When
    # `true`, the response only contains prospect stages which are activated.
    # When `false`, only deactivated prospect stages are returned.  Default:
    # **All Prospect Stages**
    # @return [GetProspectStagesResponse] response from the API call
    def get_prospect_stages(version,
                            site_id,
                            authorization: nil,
                            request_active: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/prospectstages',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active, key: 'request.active'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetProspectStagesResponse.method(:from_hash)))
        .execute
    end

    # This endpoint retrieves the business site relationships.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_active Optional parameter: When
    # `true`, the response only contains relationships which are activated.
    # When `false`, only deactivated relationships are returned.  Default: **All
    # Relationships**
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @return [GetRelationshipsResponse] response from the API call
    def get_relationships(version,
                          site_id,
                          authorization: nil,
                          request_active: nil,
                          request_limit: nil,
                          request_offset: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/relationships',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_active, key: 'request.active'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetRelationshipsResponse.method(:from_hash)))
        .execute
    end

    # Get resource availabilities used at a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [DateTime] request_end_date Optional parameter: End date. If
    # default, StartDate is used.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Array[Integer]] request_location_ids Optional parameter: Filter by
    # location ids (optional)
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [Array[Integer]] request_program_ids Optional parameter: Filter by
    # program ids (optional)
    # @param [Array[Integer]] request_resource_ids Optional parameter: Filter on
    # resourceIds
    # @param [Array[RequestScheduleTypeEnum]] request_schedule_types Optional
    # parameter: Filter by schedule types (optional)
    # @param [DateTime] request_start_date Optional parameter: Start time
    # @return [GetResourcesResponse] response from the API call
    def get_resource_availabilities(version,
                                    site_id,
                                    authorization: nil,
                                    request_end_date: nil,
                                    request_limit: nil,
                                    request_location_ids: nil,
                                    request_offset: nil,
                                    request_program_ids: nil,
                                    request_resource_ids: nil,
                                    request_schedule_types: nil,
                                    request_start_date: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/resourceavailabilities',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_end_date, key: 'request.endDate'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_location_ids, key: 'request.locationIds'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_program_ids, key: 'request.programIds'))
                   .query_param(new_parameter(request_resource_ids, key: 'request.resourceIds'))
                   .query_param(new_parameter(request_schedule_types, key: 'request.scheduleTypes'))
                   .query_param(new_parameter(request_start_date, key: 'request.startDate'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetResourcesResponse.method(:from_hash)))
        .execute
    end

    # Get resources used at a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [DateTime] request_end_date_time Optional parameter: The time the
    # resource ends. This parameter is ignored if `EndDateTime` or `LocationID`
    # is not set.
    # @param [TrueClass | FalseClass] request_include_inactive Optional
    # parameter: Enable to include inactive
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_location_id Optional parameter: The location of
    # the resource. This parameter is ignored if `EndDateTime` or `LocationID`
    # is not set.<br />  Default: **all**
    # @param [Array[Integer]] request_location_ids Optional parameter: Filter by
    # location ids (optional)
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [Array[Integer]] request_program_ids Optional parameter: Filter by
    # program ids (optional)
    # @param [Array[Integer]] request_resource_ids Optional parameter: Filter on
    # resourceIds
    # @param [Array[RequestScheduleTypeEnum]] request_schedule_types Optional
    # parameter: Filter by schedule types (optional)
    # @param [Array[Integer]] request_session_type_ids Optional parameter: List
    # of session type IDs.<br />  Default: **all**
    # @param [DateTime] request_start_date_time Optional parameter: The time the
    # resource starts. This parameter is ignored if `EndDateTime` or
    # `LocationID` is not set.
    # @return [Object] response from the API call
    def get_resources(version,
                      site_id,
                      authorization: nil,
                      request_end_date_time: nil,
                      request_include_inactive: nil,
                      request_limit: nil,
                      request_location_id: nil,
                      request_location_ids: nil,
                      request_offset: nil,
                      request_program_ids: nil,
                      request_resource_ids: nil,
                      request_schedule_types: nil,
                      request_session_type_ids: nil,
                      request_start_date_time: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/resources',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_end_date_time, key: 'request.endDateTime'))
                   .query_param(new_parameter(request_include_inactive, key: 'request.includeInactive'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_location_id, key: 'request.locationId'))
                   .query_param(new_parameter(request_location_ids, key: 'request.locationIds'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_program_ids, key: 'request.programIds'))
                   .query_param(new_parameter(request_resource_ids, key: 'request.resourceIds'))
                   .query_param(new_parameter(request_schedule_types, key: 'request.scheduleTypes'))
                   .query_param(new_parameter(request_session_type_ids, key: 'request.sessionTypeIds'))
                   .query_param(new_parameter(request_start_date_time, key: 'request.startDateTime'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end

    # Get the session types used at a site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [TrueClass | FalseClass] request_online_only Optional parameter:
    # When `true`, indicates that only the session types that can be booked
    # online should be returned.<br />  Default: **false**
    # @param [Array[Integer]] request_program_i_ds Optional parameter: Filters
    # results to session types that belong to one of the given program IDs. If
    # omitted, all program IDs return.
    # @return [GetSessionTypesResponse] response from the API call
    def get_session_types(version,
                          site_id,
                          authorization: nil,
                          request_limit: nil,
                          request_offset: nil,
                          request_online_only: nil,
                          request_program_i_ds: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/sessiontypes',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_online_only, key: 'request.onlineOnly'))
                   .query_param(new_parameter(request_program_i_ds, key: 'request.programIDs'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetSessionTypesResponse.method(:from_hash)))
        .execute
    end

    # Gets a list of sites that the developer has permission to view.
    # * Passing in no `SiteIds` returns all sites that the developer has access
    # to.
    # * Passing in one `SiteIds` returns more detailed information about the
    # specified site.
    # @param [String] version Required parameter: version of the api.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @param [TrueClass | FalseClass] request_include_lead_channels Optional
    # parameter: This is an optional parameter to get lead channels for a
    # Site.
    # @param [Integer] request_limit Optional parameter: Number of results to
    # include, defaults to 100
    # @param [Integer] request_offset Optional parameter: Page offset, defaults
    # to 0.
    # @param [Array[Integer]] request_site_ids Optional parameter: List of the
    # requested site IDs. When omitted, returns all sites that the source has
    # access to.
    # @return [GetSitesResponse] response from the API call
    def get_sites(version,
                  authorization: nil,
                  request_include_lead_channels: nil,
                  request_limit: nil,
                  request_offset: nil,
                  request_site_ids: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/site/sites',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .query_param(new_parameter(request_include_lead_channels, key: 'request.includeLeadChannels'))
                   .query_param(new_parameter(request_limit, key: 'request.limit'))
                   .query_param(new_parameter(request_offset, key: 'request.offset'))
                   .query_param(new_parameter(request_site_ids, key: 'request.siteIds'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetSitesResponse.method(:from_hash)))
        .execute
    end

    # Creates a new client index record at the specified business.
    # This endpoint requires staff user credentials.
    # @param [String] version Required parameter: version of the api.
    # @param [AddSiteClientIndexRequest] request Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [AddSiteClientIndexResponse] response from the API call
    def add_client_index(version,
                         request,
                         site_id,
                         authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/site/addclientindex',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .body_param(new_parameter(request))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AddSiteClientIndexResponse.method(:from_hash)))
        .execute
    end

    # Creates a new promocode record at the specified business.
    # This endpoint requires staff user credentials. This staff memeber should
    # have enabled the **Set up promotions / Semester discounts** staff
    # permission.
    # @param [String] version Required parameter: version of the api.
    # @param [AddPromoCodeRequest] request Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [AddPromoCodeResponse] response from the API call
    def add_promo_code(version,
                       request,
                       site_id,
                       authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/site/addpromocode',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .body_param(new_parameter(request))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AddPromoCodeResponse.method(:from_hash)))
        .execute
    end

    # Deactivates an existing promocode record at the specified business.
    # This endpoint requires staff user credentials. This staff memeber should
    # have enabled the **Set up promotions / Semester discounts** staff
    # permission.
    # @param [String] version Required parameter: version of the api.
    # @param [DeactivatePromoCodeRequest] request Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [Object] response from the API call
    def deactivate_promo_code(version,
                              request,
                              site_id,
                              authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/site/deactivatepromocode',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .body_param(new_parameter(request))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end

    # Updates an exisitng client index record at the specified business.
    # This endpoint requires staff user credentials.
    # @param [String] version Required parameter: version of the api.
    # @param [UpdateSiteClientIndexRequest] request Required parameter:
    # Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [UpdateSiteClientIndexResponse] response from the API call
    def update_client_index(version,
                            request,
                            site_id,
                            authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/site/updateclientindex',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .body_param(new_parameter(request))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UpdateSiteClientIndexResponse.method(:from_hash)))
        .execute
    end
  end
end
