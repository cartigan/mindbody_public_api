# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # PickASpotController
  class PickASpotController < BaseController
    # This endpoint supports pagination. See Pagination object for a
    # description.
    # @param [String] version Required parameter: version of the api.
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetPickASpotClassResponse] response from the API call
    def get_class_list(version,
                       site_id,
                       authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/pickaspot/v1/class',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetPickASpotClassResponse.method(:from_hash)))
        .execute
    end

    # Get a class filtered by classId.
    # @param [String] version Required parameter: version of the api.
    # @param [String] class_id Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetPickASpotClassResponse] response from the API call
    def get_class(version,
                  class_id,
                  site_id,
                  authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/pickaspot/v1/class/{classId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .template_param(new_parameter(class_id, key: 'classId')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetPickASpotClassResponse.method(:from_hash)))
        .execute
    end

    # Retrieves reservation for Pick a Spot.
    # @param [String] version Required parameter: version of the api.
    # @param [String] path_info Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [GetReservationResponse] response from the API call
    def get_reservation(version,
                        path_info,
                        site_id,
                        authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/public/v{version}/pickaspot/v1/reservation/{pathInfo}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .template_param(new_parameter(path_info, key: 'pathInfo')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetReservationResponse.method(:from_hash)))
        .execute
    end

    # A user token is required for this endpoint.
    # This endpoint updates a single reservation.
    # @param [String] version Required parameter: version of the api.
    # @param [String] path_info Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [UpdateReservationResponse] response from the API call
    def update_reservation(version,
                           path_info,
                           site_id,
                           authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/public/v{version}/pickaspot/v1/reservation/{pathInfo}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .template_param(new_parameter(path_info, key: 'pathInfo')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UpdateReservationResponse.method(:from_hash)))
        .execute
    end

    # Creates a spot reservation for a given pick-a-spot class. The actual class
    # visit must be created prior to calling this endpoint.
    # A user token is required for this endpoint.
    # 
    # Sample request:
    # 
    #     POST /pickaspot/v1/reservation
    #     {
    #         "SiteId": -1147483363,
    #         "LocationId": 1,
    #         "ClassId": "64b14ac8c20ae8f0afd2d409",
    #         "ReservationExternalId": "44724", // this is a Visit.Id and should
    # be linked to a specific class visit
    #         "MemberExternalId": "100000136", // this is Client's UniqueId
    #         "SpotNumber": "5",
    #         "ReservationDisplayName": "ReservationDisplayName", // optional
    #         "ReservationType": "Member" // optional. Can be Member, Guest,
    # Instructor, FamilyMember
    #     }
    # @param [String] version Required parameter: version of the api.
    # @param [String] path_info Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [CreateReservationResponse] response from the API call
    def create_reservation(version,
                           path_info,
                           site_id,
                           authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/public/v{version}/pickaspot/v1/reservation/{pathInfo}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .template_param(new_parameter(path_info, key: 'pathInfo')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CreateReservationResponse.method(:from_hash)))
        .execute
    end

    # A user token is required for this endpoint.
    # This endpoint deletes a single reservation.
    # @param [String] version Required parameter: version of the api.
    # @param [String] path_info Required parameter: Example:
    # @param [String] site_id Required parameter: ID of the site from which to
    # pull data.
    # @param [String] authorization Optional parameter: A staff user
    # authorization token.
    # @return [HttpContent] response from the API call
    def delete_reservation(version,
                           path_info,
                           site_id,
                           authorization: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/public/v{version}/pickaspot/v1/reservation/{pathInfo}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(version, key: 'version')
                                    .should_encode(true))
                   .template_param(new_parameter(path_info, key: 'pathInfo')
                                    .should_encode(true))
                   .header_param(new_parameter(site_id, key: 'siteId'))
                   .header_param(new_parameter(authorization, key: 'authorization'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('API-Key')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(HttpContent.method(:from_hash)))
        .execute
    end
  end
end
