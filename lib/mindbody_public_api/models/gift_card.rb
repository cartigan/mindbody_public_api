# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # GiftCard Model.
  class GiftCard < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The gift card's `ProductID`.
    # @return [Integer]
    attr_accessor :id

    # The IDs of the locations where the gift card is sold.
    # @return [Array[Integer]]
    attr_accessor :location_ids

    # A description of the gift card.
    # @return [String]
    attr_accessor :description

    # When `true`, indicates that the gift card can be edited by the client.
    # @return [TrueClass | FalseClass]
    attr_accessor :editable_by_consumer

    # The value of the gift card.
    # @return [Float]
    attr_accessor :card_value

    # The sale price of the gift card, if applicable.
    # @return [Float]
    attr_accessor :sale_price

    # When `true`, indicates that the gift card is sold online.
    # @return [TrueClass | FalseClass]
    attr_accessor :sold_online

    # A list of IDs for membership restrictions, if this card is restricted to
    # members with certain types of memberships.
    # @return [Array[Integer]]
    attr_accessor :membership_restriction_ids

    # The terms of the gift card.
    # @return [String]
    attr_accessor :gift_card_terms

    # Contact information for the gift card.
    # @return [String]
    attr_accessor :contact_info

    # When `true`, indicates that the logo should be displayed on the gift card.
    # @return [TrueClass | FalseClass]
    attr_accessor :display_logo

    # A list of layouts available for the gift card.
    # @return [Array[GiftCardLayout]]
    attr_accessor :layouts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['location_ids'] = 'LocationIds'
      @_hash['description'] = 'Description'
      @_hash['editable_by_consumer'] = 'EditableByConsumer'
      @_hash['card_value'] = 'CardValue'
      @_hash['sale_price'] = 'SalePrice'
      @_hash['sold_online'] = 'SoldOnline'
      @_hash['membership_restriction_ids'] = 'MembershipRestrictionIds'
      @_hash['gift_card_terms'] = 'GiftCardTerms'
      @_hash['contact_info'] = 'ContactInfo'
      @_hash['display_logo'] = 'DisplayLogo'
      @_hash['layouts'] = 'Layouts'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        location_ids
        description
        editable_by_consumer
        card_value
        sale_price
        sold_online
        membership_restriction_ids
        gift_card_terms
        contact_info
        display_logo
        layouts
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, location_ids = SKIP, description = SKIP,
                   editable_by_consumer = SKIP, card_value = SKIP,
                   sale_price = SKIP, sold_online = SKIP,
                   membership_restriction_ids = SKIP, gift_card_terms = SKIP,
                   contact_info = SKIP, display_logo = SKIP, layouts = SKIP)
      @id = id unless id == SKIP
      @location_ids = location_ids unless location_ids == SKIP
      @description = description unless description == SKIP
      @editable_by_consumer = editable_by_consumer unless editable_by_consumer == SKIP
      @card_value = card_value unless card_value == SKIP
      @sale_price = sale_price unless sale_price == SKIP
      @sold_online = sold_online unless sold_online == SKIP
      unless membership_restriction_ids == SKIP
        @membership_restriction_ids =
          membership_restriction_ids
      end
      @gift_card_terms = gift_card_terms unless gift_card_terms == SKIP
      @contact_info = contact_info unless contact_info == SKIP
      @display_logo = display_logo unless display_logo == SKIP
      @layouts = layouts unless layouts == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      location_ids = hash.key?('LocationIds') ? hash['LocationIds'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      editable_by_consumer =
        hash.key?('EditableByConsumer') ? hash['EditableByConsumer'] : SKIP
      card_value = hash.key?('CardValue') ? hash['CardValue'] : SKIP
      sale_price = hash.key?('SalePrice') ? hash['SalePrice'] : SKIP
      sold_online = hash.key?('SoldOnline') ? hash['SoldOnline'] : SKIP
      membership_restriction_ids =
        hash.key?('MembershipRestrictionIds') ? hash['MembershipRestrictionIds'] : SKIP
      gift_card_terms =
        hash.key?('GiftCardTerms') ? hash['GiftCardTerms'] : SKIP
      contact_info = hash.key?('ContactInfo') ? hash['ContactInfo'] : SKIP
      display_logo = hash.key?('DisplayLogo') ? hash['DisplayLogo'] : SKIP
      # Parameter is an array, so we need to iterate through it
      layouts = nil
      unless hash['Layouts'].nil?
        layouts = []
        hash['Layouts'].each do |structure|
          layouts << (GiftCardLayout.from_hash(structure) if structure)
        end
      end

      layouts = SKIP unless hash.key?('Layouts')

      # Create object from extracted values.
      GiftCard.new(id,
                   location_ids,
                   description,
                   editable_by_consumer,
                   card_value,
                   sale_price,
                   sold_online,
                   membership_restriction_ids,
                   gift_card_terms,
                   contact_info,
                   display_logo,
                   layouts)
    end
  end
end
