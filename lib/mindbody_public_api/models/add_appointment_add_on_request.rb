# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Creates an add-on for an appointment
  class AddAppointmentAddOnRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, indicates that a payment should be applied to the
    # appointment. Currently only ApplyPayment=false is implemented.
    # Default: **true**
    # @return [TrueClass | FalseClass]
    attr_accessor :apply_payment

    # The appointment ID the add-on is getting added to.
    # @return [Integer]
    attr_accessor :appointment_id

    # The session type associated with the new appointment add-on.
    # @return [Integer]
    attr_accessor :session_type_id

    # The ID of the staff member who is adding the new appointment add-on.
    # Default: staff member performing the appointment.
    # @return [Integer]
    attr_accessor :staff_id

    # When `true`, indicates that the method is to be validated, but no new
    # appointment add-on data is added.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['apply_payment'] = 'ApplyPayment'
      @_hash['appointment_id'] = 'AppointmentId'
      @_hash['session_type_id'] = 'SessionTypeId'
      @_hash['staff_id'] = 'StaffId'
      @_hash['test'] = 'Test'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        apply_payment
        appointment_id
        session_type_id
        staff_id
        test
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(apply_payment = SKIP, appointment_id = SKIP,
                   session_type_id = SKIP, staff_id = SKIP, test = SKIP)
      @apply_payment = apply_payment unless apply_payment == SKIP
      @appointment_id = appointment_id unless appointment_id == SKIP
      @session_type_id = session_type_id unless session_type_id == SKIP
      @staff_id = staff_id unless staff_id == SKIP
      @test = test unless test == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      apply_payment = hash.key?('ApplyPayment') ? hash['ApplyPayment'] : SKIP
      appointment_id = hash.key?('AppointmentId') ? hash['AppointmentId'] : SKIP
      session_type_id =
        hash.key?('SessionTypeId') ? hash['SessionTypeId'] : SKIP
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      test = hash.key?('Test') ? hash['Test'] : SKIP

      # Create object from extracted values.
      AddAppointmentAddOnRequest.new(apply_payment,
                                     appointment_id,
                                     session_type_id,
                                     staff_id,
                                     test)
    end
  end
end
