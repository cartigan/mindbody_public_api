# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # ShoppingCart Model.
  class ShoppingCart < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The shopping cart ID.
    # @return [String]
    attr_accessor :id

    # Contains information about the items in the shopping cart.
    # @return [Array[CartItem]]
    attr_accessor :cart_items

    # The cart’s total cost before taxes and discounts were applied.
    # @return [Float]
    attr_accessor :sub_total

    # The monetary amount removed from the cart’s total cost by applied
    # discounts.
    # @return [Float]
    attr_accessor :discount_total

    # The monetary amount paid in taxes, included in the cart’s `GrandTotal`.
    # @return [Float]
    attr_accessor :tax_total

    # The cart’s total cost, including taxes and discounts.
    # @return [Float]
    attr_accessor :grand_total

    # Contains information returned from the first call to CheckoutShoppingCart.
    # @return [Array[TransactionResponse]]
    attr_accessor :transactions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['cart_items'] = 'CartItems'
      @_hash['sub_total'] = 'SubTotal'
      @_hash['discount_total'] = 'DiscountTotal'
      @_hash['tax_total'] = 'TaxTotal'
      @_hash['grand_total'] = 'GrandTotal'
      @_hash['transactions'] = 'Transactions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        cart_items
        sub_total
        discount_total
        tax_total
        grand_total
        transactions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, cart_items = SKIP, sub_total = SKIP,
                   discount_total = SKIP, tax_total = SKIP, grand_total = SKIP,
                   transactions = SKIP)
      @id = id unless id == SKIP
      @cart_items = cart_items unless cart_items == SKIP
      @sub_total = sub_total unless sub_total == SKIP
      @discount_total = discount_total unless discount_total == SKIP
      @tax_total = tax_total unless tax_total == SKIP
      @grand_total = grand_total unless grand_total == SKIP
      @transactions = transactions unless transactions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      cart_items = nil
      unless hash['CartItems'].nil?
        cart_items = []
        hash['CartItems'].each do |structure|
          cart_items << (CartItem.from_hash(structure) if structure)
        end
      end

      cart_items = SKIP unless hash.key?('CartItems')
      sub_total = hash.key?('SubTotal') ? hash['SubTotal'] : SKIP
      discount_total = hash.key?('DiscountTotal') ? hash['DiscountTotal'] : SKIP
      tax_total = hash.key?('TaxTotal') ? hash['TaxTotal'] : SKIP
      grand_total = hash.key?('GrandTotal') ? hash['GrandTotal'] : SKIP
      # Parameter is an array, so we need to iterate through it
      transactions = nil
      unless hash['Transactions'].nil?
        transactions = []
        hash['Transactions'].each do |structure|
          transactions << (TransactionResponse.from_hash(structure) if structure)
        end
      end

      transactions = SKIP unless hash.key?('Transactions')

      # Create object from extracted values.
      ShoppingCart.new(id,
                       cart_items,
                       sub_total,
                       discount_total,
                       tax_total,
                       grand_total,
                       transactions)
    end
  end
end
