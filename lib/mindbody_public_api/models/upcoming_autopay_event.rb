# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # UpcomingAutopayEvent Model.
  class UpcomingAutopayEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the contract.
    # @return [Integer]
    attr_accessor :client_contract_id

    # The amount charged.
    # @return [Float]
    attr_accessor :charge_amount

    # Subtotal before tax.
    # @return [Float]
    attr_accessor :subtotal

    # Tax amount.
    # @return [Float]
    attr_accessor :tax

    # The payment method.
    # @return [PaymentMethodEnum]
    attr_accessor :payment_method

    # The date and time of the next payment.
    # @return [DateTime]
    attr_accessor :schedule_date

    # The product id.
    # @return [Integer]
    attr_accessor :product_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_contract_id'] = 'ClientContractId'
      @_hash['charge_amount'] = 'ChargeAmount'
      @_hash['subtotal'] = 'Subtotal'
      @_hash['tax'] = 'Tax'
      @_hash['payment_method'] = 'PaymentMethod'
      @_hash['schedule_date'] = 'ScheduleDate'
      @_hash['product_id'] = 'ProductId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        client_contract_id
        charge_amount
        subtotal
        tax
        payment_method
        schedule_date
        product_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_contract_id = SKIP, charge_amount = SKIP,
                   subtotal = SKIP, tax = SKIP, payment_method = SKIP,
                   schedule_date = SKIP, product_id = SKIP)
      @client_contract_id = client_contract_id unless client_contract_id == SKIP
      @charge_amount = charge_amount unless charge_amount == SKIP
      @subtotal = subtotal unless subtotal == SKIP
      @tax = tax unless tax == SKIP
      @payment_method = payment_method unless payment_method == SKIP
      @schedule_date = schedule_date unless schedule_date == SKIP
      @product_id = product_id unless product_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_contract_id =
        hash.key?('ClientContractId') ? hash['ClientContractId'] : SKIP
      charge_amount = hash.key?('ChargeAmount') ? hash['ChargeAmount'] : SKIP
      subtotal = hash.key?('Subtotal') ? hash['Subtotal'] : SKIP
      tax = hash.key?('Tax') ? hash['Tax'] : SKIP
      payment_method = hash.key?('PaymentMethod') ? hash['PaymentMethod'] : SKIP
      schedule_date = if hash.key?('ScheduleDate')
                        (DateTimeHelper.from_rfc3339(hash['ScheduleDate']) if hash['ScheduleDate'])
                      else
                        SKIP
                      end
      product_id = hash.key?('ProductId') ? hash['ProductId'] : SKIP

      # Create object from extracted values.
      UpcomingAutopayEvent.new(client_contract_id,
                               charge_amount,
                               subtotal,
                               tax,
                               payment_method,
                               schedule_date,
                               product_id)
    end

    def to_custom_schedule_date
      DateTimeHelper.to_rfc3339(schedule_date)
    end
  end
end
