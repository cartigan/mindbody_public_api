# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Contains information about the reservation.
  class Reservation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique reservation ID.
    # @return [String]
    attr_accessor :reservation_id

    # The unique reservation external ID.
    # @return [String]
    attr_accessor :reservation_external_id

    # The unique class ID.
    # @return [String]
    attr_accessor :class_id

    # The unique class external ID.
    # @return [String]
    attr_accessor :class_external_id

    # The unique member external ID.
    # @return [String]
    attr_accessor :member_external_id

    # Contains information about the reservation type.
    # @return [String]
    attr_accessor :reservation_type

    # Contains information about the spot details.
    # @return [Spot]
    attr_accessor :spots

    # Boolean value whether it is confirmed.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_confirmed

    # Contains information about the confirmation date.
    # @return [DateTime]
    attr_accessor :confirmation_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reservation_id'] = 'ReservationId'
      @_hash['reservation_external_id'] = 'ReservationExternalId'
      @_hash['class_id'] = 'ClassId'
      @_hash['class_external_id'] = 'ClassExternalId'
      @_hash['member_external_id'] = 'MemberExternalId'
      @_hash['reservation_type'] = 'ReservationType'
      @_hash['spots'] = 'Spots'
      @_hash['is_confirmed'] = 'IsConfirmed'
      @_hash['confirmation_date'] = 'ConfirmationDate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reservation_id
        reservation_external_id
        class_id
        class_external_id
        member_external_id
        reservation_type
        spots
        is_confirmed
        confirmation_date
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(reservation_id = SKIP, reservation_external_id = SKIP,
                   class_id = SKIP, class_external_id = SKIP,
                   member_external_id = SKIP, reservation_type = SKIP,
                   spots = SKIP, is_confirmed = SKIP, confirmation_date = SKIP)
      @reservation_id = reservation_id unless reservation_id == SKIP
      @reservation_external_id = reservation_external_id unless reservation_external_id == SKIP
      @class_id = class_id unless class_id == SKIP
      @class_external_id = class_external_id unless class_external_id == SKIP
      @member_external_id = member_external_id unless member_external_id == SKIP
      @reservation_type = reservation_type unless reservation_type == SKIP
      @spots = spots unless spots == SKIP
      @is_confirmed = is_confirmed unless is_confirmed == SKIP
      @confirmation_date = confirmation_date unless confirmation_date == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reservation_id = hash.key?('ReservationId') ? hash['ReservationId'] : SKIP
      reservation_external_id =
        hash.key?('ReservationExternalId') ? hash['ReservationExternalId'] : SKIP
      class_id = hash.key?('ClassId') ? hash['ClassId'] : SKIP
      class_external_id =
        hash.key?('ClassExternalId') ? hash['ClassExternalId'] : SKIP
      member_external_id =
        hash.key?('MemberExternalId') ? hash['MemberExternalId'] : SKIP
      reservation_type =
        hash.key?('ReservationType') ? hash['ReservationType'] : SKIP
      spots = Spot.from_hash(hash['Spots']) if hash['Spots']
      is_confirmed = hash.key?('IsConfirmed') ? hash['IsConfirmed'] : SKIP
      confirmation_date = if hash.key?('ConfirmationDate')
                            (DateTimeHelper.from_rfc3339(hash['ConfirmationDate']) if hash['ConfirmationDate'])
                          else
                            SKIP
                          end

      # Create object from extracted values.
      Reservation.new(reservation_id,
                      reservation_external_id,
                      class_id,
                      class_external_id,
                      member_external_id,
                      reservation_type,
                      spots,
                      is_confirmed,
                      confirmation_date)
    end

    def to_custom_confirmation_date
      DateTimeHelper.to_rfc3339(confirmation_date)
    end
  end
end
