# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # An individual Client Formula Note.
  class FormulaNoteResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The formula note ID.
    # @return [Integer]
    attr_accessor :id

    # The unique Id of the client for the formula note. This is the unique ID
    # for the client in the site where the formula note originated. This is
    # different than the ClientId specified in the request, which is the id for
    # the client assigned by the business.
    # @return [String]
    attr_accessor :client_id

    # The appointment ID that the formula note is related to.
    # @return [Integer]
    attr_accessor :appointment_id

    # The date formula note was created.
    # @return [DateTime]
    attr_accessor :entry_date

    # The new formula note text.
    # @return [String]
    attr_accessor :note

    # The site Id.
    # @return [Integer]
    attr_accessor :site_id

    # The site name.
    # @return [String]
    attr_accessor :site_name

    # The first name of the staff for the optional associated appointment. If no
    # appointment ID is provided, this will be null.
    # @return [String]
    attr_accessor :staff_first_name

    # The last name of the staff for the optional associated appointment. If no
    # appointment ID is provided, this will be null.
    # @return [String]
    attr_accessor :staff_last_name

    # The display name of the staff for the optional associated appointment. If
    # no appointment ID is provided, or no display name is specified for the
    # staff member, this will be null.
    # @return [String]
    attr_accessor :staff_display_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['client_id'] = 'ClientId'
      @_hash['appointment_id'] = 'AppointmentId'
      @_hash['entry_date'] = 'EntryDate'
      @_hash['note'] = 'Note'
      @_hash['site_id'] = 'SiteId'
      @_hash['site_name'] = 'SiteName'
      @_hash['staff_first_name'] = 'StaffFirstName'
      @_hash['staff_last_name'] = 'StaffLastName'
      @_hash['staff_display_name'] = 'StaffDisplayName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        client_id
        appointment_id
        entry_date
        note
        site_id
        site_name
        staff_first_name
        staff_last_name
        staff_display_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, client_id = SKIP, appointment_id = SKIP,
                   entry_date = SKIP, note = SKIP, site_id = SKIP,
                   site_name = SKIP, staff_first_name = SKIP,
                   staff_last_name = SKIP, staff_display_name = SKIP)
      @id = id unless id == SKIP
      @client_id = client_id unless client_id == SKIP
      @appointment_id = appointment_id unless appointment_id == SKIP
      @entry_date = entry_date unless entry_date == SKIP
      @note = note unless note == SKIP
      @site_id = site_id unless site_id == SKIP
      @site_name = site_name unless site_name == SKIP
      @staff_first_name = staff_first_name unless staff_first_name == SKIP
      @staff_last_name = staff_last_name unless staff_last_name == SKIP
      @staff_display_name = staff_display_name unless staff_display_name == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      appointment_id = hash.key?('AppointmentId') ? hash['AppointmentId'] : SKIP
      entry_date = if hash.key?('EntryDate')
                     (DateTimeHelper.from_rfc3339(hash['EntryDate']) if hash['EntryDate'])
                   else
                     SKIP
                   end
      note = hash.key?('Note') ? hash['Note'] : SKIP
      site_id = hash.key?('SiteId') ? hash['SiteId'] : SKIP
      site_name = hash.key?('SiteName') ? hash['SiteName'] : SKIP
      staff_first_name =
        hash.key?('StaffFirstName') ? hash['StaffFirstName'] : SKIP
      staff_last_name =
        hash.key?('StaffLastName') ? hash['StaffLastName'] : SKIP
      staff_display_name =
        hash.key?('StaffDisplayName') ? hash['StaffDisplayName'] : SKIP

      # Create object from extracted values.
      FormulaNoteResponse.new(id,
                              client_id,
                              appointment_id,
                              entry_date,
                              note,
                              site_id,
                              site_name,
                              staff_first_name,
                              staff_last_name,
                              staff_display_name)
    end

    def to_custom_entry_date
      DateTimeHelper.to_rfc3339(entry_date)
    end
  end
end
