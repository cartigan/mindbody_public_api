# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # SalePayment Model.
  class SalePayment < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A unique identifier for this payment.
    # @return [Integer]
    attr_accessor :id

    # The total amount of sales that were made on the sale date, including all
    # payment methods that were used and taxes that were collected.
    # @return [Float]
    attr_accessor :amount

    # The method used to make this payment.
    # @return [Integer]
    attr_accessor :method

    # The payment method type used for the clientâ€™s purchase.
    # @return [String]
    attr_accessor :type

    # Payment notes that are entered under the selected payment method in the
    # Retail screen before completing the sale.
    # @return [String]
    attr_accessor :notes

    # The ID of transaction. Use this ID when calling the GET Transactions
    # endpoint.
    # @return [Integer]
    attr_accessor :transaction_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['amount'] = 'Amount'
      @_hash['method'] = 'Method'
      @_hash['type'] = 'Type'
      @_hash['notes'] = 'Notes'
      @_hash['transaction_id'] = 'TransactionId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        amount
        method
        type
        notes
        transaction_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, amount = SKIP, method = SKIP, type = SKIP,
                   notes = SKIP, transaction_id = SKIP)
      @id = id unless id == SKIP
      @amount = amount unless amount == SKIP
      @method = method unless method == SKIP
      @type = type unless type == SKIP
      @notes = notes unless notes == SKIP
      @transaction_id = transaction_id unless transaction_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      amount = hash.key?('Amount') ? hash['Amount'] : SKIP
      method = hash.key?('Method') ? hash['Method'] : SKIP
      type = hash.key?('Type') ? hash['Type'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      transaction_id = hash.key?('TransactionId') ? hash['TransactionId'] : SKIP

      # Create object from extracted values.
      SalePayment.new(id,
                      amount,
                      method,
                      type,
                      notes,
                      transaction_id)
    end
  end
end
