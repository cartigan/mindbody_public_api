# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Represents a single class instance. Used in SubstituteClassTeacher endpoint.
  class SubstituteTeacherClass < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The class schedule ID of the requested class.
    # @return [Integer]
    attr_accessor :class_schedule_id

    # The class schedule ID of the requested class.
    # @return [Location]
    attr_accessor :location

    # The total number of bookings allowed in the class.
    # @return [Integer]
    attr_accessor :max_capacity

    # The total number of online bookings allowed in the class.
    # @return [Integer]
    attr_accessor :web_capacity

    # The total number of clients who are booked into the class prior to this
    # call being made.
    # @return [Integer]
    attr_accessor :total_booked

    # The total number of booked clients who are on the waiting list for the
    # class prior to this call being made.
    # @return [Integer]
    attr_accessor :total_booked_waitlist

    # The total number of bookings in the class made by online users, prior to
    # this call being made. This property is the current number of bookings
    # counted toward the `WebCapacity` limit.
    # @return [Integer]
    attr_accessor :web_booked

    # Identifies the semester assigned to this class.
    # @return [Integer]
    attr_accessor :semester_id

    # When `true`, indicates that the class has been canceled.<br />
    # When `false`, indicates that the class has not been canceled and may still
    # be bookable.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_canceled

    # When `true`, indicates that the class is being taught by a substitute
    # teacher.
    # @return [TrueClass | FalseClass]
    attr_accessor :substitute

    # When `true`, indicates that the class is being shown to clients in
    # consumer mode.
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # When `true`, indicates that the class has a waiting list and there is
    # space available on the waiting list for another client.<br />
    # When `false`, indicates either that the class does not have a waiting list
    # or there is no space available on the class waiting list.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_waitlist_available

    # When `true`, indicates that this class is should not be shown to clients
    # when `IsCancelled` is `true`.<br />
    # When `false`, indicates that this class is should be shown to clients when
    # `IsCancelled` is `true`.<br />
    # This property can be ignored when the `IsCancelled` property is `false`.
    # @return [TrueClass | FalseClass]
    attr_accessor :hide_cancel

    # The unique identifier of the class.
    # @return [Integer]
    attr_accessor :id

    # When `true`, indicates that the class can be booked.<br />
    # When `false`, that the class cannot be booked at this time.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_available

    # The date and time that this class is scheduled to start.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The date and time when this class is scheduled to end.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The last time the class was modified.
    # @return [DateTime]
    attr_accessor :last_modified_date_time

    # Represents a class definition. The class meets at the start time, goes
    # until the end time.
    # @return [ClassDescription]
    attr_accessor :class_description

    # The Staff
    # @return [Staff]
    attr_accessor :staff

    # The URL for the pre-recorded live stream for the class if hosted on the
    # mindbody virtual wellness platform
    # @return [String]
    attr_accessor :virtual_stream_link

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['class_schedule_id'] = 'ClassScheduleId'
      @_hash['location'] = 'Location'
      @_hash['max_capacity'] = 'MaxCapacity'
      @_hash['web_capacity'] = 'WebCapacity'
      @_hash['total_booked'] = 'TotalBooked'
      @_hash['total_booked_waitlist'] = 'TotalBookedWaitlist'
      @_hash['web_booked'] = 'WebBooked'
      @_hash['semester_id'] = 'SemesterId'
      @_hash['is_canceled'] = 'IsCanceled'
      @_hash['substitute'] = 'Substitute'
      @_hash['active'] = 'Active'
      @_hash['is_waitlist_available'] = 'IsWaitlistAvailable'
      @_hash['hide_cancel'] = 'HideCancel'
      @_hash['id'] = 'Id'
      @_hash['is_available'] = 'IsAvailable'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['last_modified_date_time'] = 'LastModifiedDateTime'
      @_hash['class_description'] = 'ClassDescription'
      @_hash['staff'] = 'Staff'
      @_hash['virtual_stream_link'] = 'VirtualStreamLink'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        class_schedule_id
        location
        max_capacity
        web_capacity
        total_booked
        total_booked_waitlist
        web_booked
        semester_id
        is_canceled
        substitute
        active
        is_waitlist_available
        hide_cancel
        id
        is_available
        start_date_time
        end_date_time
        last_modified_date_time
        class_description
        staff
        virtual_stream_link
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(class_schedule_id = SKIP, location = SKIP,
                   max_capacity = SKIP, web_capacity = SKIP,
                   total_booked = SKIP, total_booked_waitlist = SKIP,
                   web_booked = SKIP, semester_id = SKIP, is_canceled = SKIP,
                   substitute = SKIP, active = SKIP,
                   is_waitlist_available = SKIP, hide_cancel = SKIP, id = SKIP,
                   is_available = SKIP, start_date_time = SKIP,
                   end_date_time = SKIP, last_modified_date_time = SKIP,
                   class_description = SKIP, staff = SKIP,
                   virtual_stream_link = SKIP)
      @class_schedule_id = class_schedule_id unless class_schedule_id == SKIP
      @location = location unless location == SKIP
      @max_capacity = max_capacity unless max_capacity == SKIP
      @web_capacity = web_capacity unless web_capacity == SKIP
      @total_booked = total_booked unless total_booked == SKIP
      @total_booked_waitlist = total_booked_waitlist unless total_booked_waitlist == SKIP
      @web_booked = web_booked unless web_booked == SKIP
      @semester_id = semester_id unless semester_id == SKIP
      @is_canceled = is_canceled unless is_canceled == SKIP
      @substitute = substitute unless substitute == SKIP
      @active = active unless active == SKIP
      @is_waitlist_available = is_waitlist_available unless is_waitlist_available == SKIP
      @hide_cancel = hide_cancel unless hide_cancel == SKIP
      @id = id unless id == SKIP
      @is_available = is_available unless is_available == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @last_modified_date_time = last_modified_date_time unless last_modified_date_time == SKIP
      @class_description = class_description unless class_description == SKIP
      @staff = staff unless staff == SKIP
      @virtual_stream_link = virtual_stream_link unless virtual_stream_link == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      class_schedule_id =
        hash.key?('ClassScheduleId') ? hash['ClassScheduleId'] : SKIP
      location = Location.from_hash(hash['Location']) if hash['Location']
      max_capacity = hash.key?('MaxCapacity') ? hash['MaxCapacity'] : SKIP
      web_capacity = hash.key?('WebCapacity') ? hash['WebCapacity'] : SKIP
      total_booked = hash.key?('TotalBooked') ? hash['TotalBooked'] : SKIP
      total_booked_waitlist =
        hash.key?('TotalBookedWaitlist') ? hash['TotalBookedWaitlist'] : SKIP
      web_booked = hash.key?('WebBooked') ? hash['WebBooked'] : SKIP
      semester_id = hash.key?('SemesterId') ? hash['SemesterId'] : SKIP
      is_canceled = hash.key?('IsCanceled') ? hash['IsCanceled'] : SKIP
      substitute = hash.key?('Substitute') ? hash['Substitute'] : SKIP
      active = hash.key?('Active') ? hash['Active'] : SKIP
      is_waitlist_available =
        hash.key?('IsWaitlistAvailable') ? hash['IsWaitlistAvailable'] : SKIP
      hide_cancel = hash.key?('HideCancel') ? hash['HideCancel'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      is_available = hash.key?('IsAvailable') ? hash['IsAvailable'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      last_modified_date_time = if hash.key?('LastModifiedDateTime')
                                  (DateTimeHelper.from_rfc3339(hash['LastModifiedDateTime']) if hash['LastModifiedDateTime'])
                                else
                                  SKIP
                                end
      class_description = ClassDescription.from_hash(hash['ClassDescription']) if
        hash['ClassDescription']
      staff = Staff.from_hash(hash['Staff']) if hash['Staff']
      virtual_stream_link =
        hash.key?('VirtualStreamLink') ? hash['VirtualStreamLink'] : SKIP

      # Create object from extracted values.
      SubstituteTeacherClass.new(class_schedule_id,
                                 location,
                                 max_capacity,
                                 web_capacity,
                                 total_booked,
                                 total_booked_waitlist,
                                 web_booked,
                                 semester_id,
                                 is_canceled,
                                 substitute,
                                 active,
                                 is_waitlist_available,
                                 hide_cancel,
                                 id,
                                 is_available,
                                 start_date_time,
                                 end_date_time,
                                 last_modified_date_time,
                                 class_description,
                                 staff,
                                 virtual_stream_link)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end

    def to_custom_last_modified_date_time
      DateTimeHelper.to_rfc3339(last_modified_date_time)
    end
  end
end
