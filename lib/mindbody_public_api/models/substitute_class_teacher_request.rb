# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # SubstituteClassTeacherRequest Model.
  class SubstituteClassTeacherRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the class to which a substitute teacher needs to be assigned.
    # @return [Integer]
    attr_accessor :class_id

    # The staff ID of the teacher to substitute.
    # @return [Integer]
    attr_accessor :staff_id

    # When `true`, overrides any conflicts in the schedule.
    # @return [TrueClass | FalseClass]
    attr_accessor :override_conflicts

    # When `true`, sends the client an automatic email about the substitution,
    # if the client has opted to receive email.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_client_email

    # When `true`, sends the originally scheduled teacher an automatic email
    # about the substitution.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_original_teacher_email

    # When `true`, sends the substituted teacher an automatic email about the
    # substitution.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_substitute_teacher_email

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['class_id'] = 'ClassId'
      @_hash['staff_id'] = 'StaffId'
      @_hash['override_conflicts'] = 'OverrideConflicts'
      @_hash['send_client_email'] = 'SendClientEmail'
      @_hash['send_original_teacher_email'] = 'SendOriginalTeacherEmail'
      @_hash['send_substitute_teacher_email'] = 'SendSubstituteTeacherEmail'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        override_conflicts
        send_client_email
        send_original_teacher_email
        send_substitute_teacher_email
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(class_id = nil, staff_id = nil, override_conflicts = SKIP,
                   send_client_email = SKIP, send_original_teacher_email = SKIP,
                   send_substitute_teacher_email = SKIP)
      @class_id = class_id
      @staff_id = staff_id
      @override_conflicts = override_conflicts unless override_conflicts == SKIP
      @send_client_email = send_client_email unless send_client_email == SKIP
      unless send_original_teacher_email == SKIP
        @send_original_teacher_email =
          send_original_teacher_email
      end
      unless send_substitute_teacher_email == SKIP
        @send_substitute_teacher_email =
          send_substitute_teacher_email
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      class_id = hash.key?('ClassId') ? hash['ClassId'] : nil
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : nil
      override_conflicts =
        hash.key?('OverrideConflicts') ? hash['OverrideConflicts'] : SKIP
      send_client_email =
        hash.key?('SendClientEmail') ? hash['SendClientEmail'] : SKIP
      send_original_teacher_email =
        hash.key?('SendOriginalTeacherEmail') ? hash['SendOriginalTeacherEmail'] : SKIP
      send_substitute_teacher_email =
        hash.key?('SendSubstituteTeacherEmail') ? hash['SendSubstituteTeacherEmail'] : SKIP

      # Create object from extracted values.
      SubstituteClassTeacherRequest.new(class_id,
                                        staff_id,
                                        override_conflicts,
                                        send_client_email,
                                        send_original_teacher_email,
                                        send_substitute_teacher_email)
    end
  end
end
