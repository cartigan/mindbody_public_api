# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # A client record that is considered a duplicate based on matching of the
  # client's first name, last name, AND email fields
  class ClientDuplicate < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The client’s ID, as configured by the business owner. This is the client’s
    # barcode ID if the business owner assigns barcodes to clients. This ID is
    # used throughout the Public API for client-related Public API calls. When
    # used in a POST `UpdateClient` request, the `Id` is used to identify the
    # client for the update.
    # @return [String]
    attr_accessor :id

    # The client’s system-generated ID at the business. This value cannot be
    # changed by business owners and is always unique across all clients at the
    # business. This ID is not widely used in the Public API, but can be used by
    # your application to uniquely identify clients.
    # @return [Integer]
    attr_accessor :unique_id

    # The client’s first name.
    # @return [String]
    attr_accessor :first_name

    # The client’s last name.
    # @return [String]
    attr_accessor :last_name

    # The client’s email address.
    # @return [String]
    attr_accessor :email

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['unique_id'] = 'UniqueId'
      @_hash['first_name'] = 'FirstName'
      @_hash['last_name'] = 'LastName'
      @_hash['email'] = 'Email'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        unique_id
        first_name
        last_name
        email
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, unique_id = SKIP, first_name = SKIP,
                   last_name = SKIP, email = SKIP)
      @id = id unless id == SKIP
      @unique_id = unique_id unless unique_id == SKIP
      @first_name = first_name unless first_name == SKIP
      @last_name = last_name unless last_name == SKIP
      @email = email unless email == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      unique_id = hash.key?('UniqueId') ? hash['UniqueId'] : SKIP
      first_name = hash.key?('FirstName') ? hash['FirstName'] : SKIP
      last_name = hash.key?('LastName') ? hash['LastName'] : SKIP
      email = hash.key?('Email') ? hash['Email'] : SKIP

      # Create object from extracted values.
      ClientDuplicate.new(id,
                          unique_id,
                          first_name,
                          last_name,
                          email)
    end
  end
end
