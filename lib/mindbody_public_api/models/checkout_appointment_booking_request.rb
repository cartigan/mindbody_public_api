# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # CheckoutAppointmentBookingRequest Model.
  class CheckoutAppointmentBookingRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the staff member who is to provide the service being booked.
    # @return [Integer]
    attr_accessor :staff_id

    # The ID of the location where the appointment is to take place.
    # @return [Integer]
    attr_accessor :location_id

    # The ID of the session type of this appointment.
    # @return [Integer]
    attr_accessor :session_type_id

    # Contains information about the resources to be used for the appointment.
    # @return [Array[ResourceSlim]]
    attr_accessor :resources

    # The date and time that the appointment is to start in the business’
    # timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The date and time that the appointment is to end in the business’
    # timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The National Provider Identifier (NPI) of the staff member who is to
    # provide the service. For an explanation of Provider IDs, see [Provider
    # IDs](https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?l
    # anguage=en_US).
    # @return [String]
    attr_accessor :provider_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['staff_id'] = 'StaffId'
      @_hash['location_id'] = 'LocationId'
      @_hash['session_type_id'] = 'SessionTypeId'
      @_hash['resources'] = 'Resources'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['provider_id'] = 'ProviderId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        staff_id
        location_id
        session_type_id
        resources
        start_date_time
        end_date_time
        provider_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(staff_id = SKIP, location_id = SKIP, session_type_id = SKIP,
                   resources = SKIP, start_date_time = SKIP,
                   end_date_time = SKIP, provider_id = SKIP)
      @staff_id = staff_id unless staff_id == SKIP
      @location_id = location_id unless location_id == SKIP
      @session_type_id = session_type_id unless session_type_id == SKIP
      @resources = resources unless resources == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @provider_id = provider_id unless provider_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      session_type_id =
        hash.key?('SessionTypeId') ? hash['SessionTypeId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      resources = nil
      unless hash['Resources'].nil?
        resources = []
        hash['Resources'].each do |structure|
          resources << (ResourceSlim.from_hash(structure) if structure)
        end
      end

      resources = SKIP unless hash.key?('Resources')
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      provider_id = hash.key?('ProviderId') ? hash['ProviderId'] : SKIP

      # Create object from extracted values.
      CheckoutAppointmentBookingRequest.new(staff_id,
                                            location_id,
                                            session_type_id,
                                            resources,
                                            start_date_time,
                                            end_date_time,
                                            provider_id)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end
  end
end
