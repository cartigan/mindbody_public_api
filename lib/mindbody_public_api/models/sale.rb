# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Contains the Sale details.
  class Sale < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The sale ID.
    # @return [Integer]
    attr_accessor :id

    # The date the item was sold.
    # @return [DateTime]
    attr_accessor :sale_date

    # The time the item was sold.
    # @return [String]
    attr_accessor :sale_time

    # The date and time the item was sold.
    # @return [DateTime]
    attr_accessor :sale_date_time

    # The date and time the item was sold originally.
    # @return [DateTime]
    attr_accessor :original_sale_date_time

    # The sales representative ID
    # @return [Integer]
    attr_accessor :sales_rep_id

    # The ID of the client who made the purchase.
    # @return [String]
    attr_accessor :client_id

    # Recipient Client Id
    # @return [Integer]
    attr_accessor :recipient_client_id

    # Contains the `PurchasedItem` objects that describe the purchased items.
    # @return [Array[PurchasedItem]]
    attr_accessor :purchased_items

    # The ID of the location where the sale takes place.
    # @return [Integer]
    attr_accessor :location_id

    # Contains the `SalePayment` objects that describe the payments that
    # contributed to this sale.
    # @return [Array[SalePayment]]
    attr_accessor :payments

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['sale_date'] = 'SaleDate'
      @_hash['sale_time'] = 'SaleTime'
      @_hash['sale_date_time'] = 'SaleDateTime'
      @_hash['original_sale_date_time'] = 'OriginalSaleDateTime'
      @_hash['sales_rep_id'] = 'SalesRepId'
      @_hash['client_id'] = 'ClientId'
      @_hash['recipient_client_id'] = 'RecipientClientId'
      @_hash['purchased_items'] = 'PurchasedItems'
      @_hash['location_id'] = 'LocationId'
      @_hash['payments'] = 'Payments'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        sale_date
        sale_time
        sale_date_time
        original_sale_date_time
        sales_rep_id
        client_id
        recipient_client_id
        purchased_items
        location_id
        payments
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, sale_date = SKIP, sale_time = SKIP,
                   sale_date_time = SKIP, original_sale_date_time = SKIP,
                   sales_rep_id = SKIP, client_id = SKIP,
                   recipient_client_id = SKIP, purchased_items = SKIP,
                   location_id = SKIP, payments = SKIP)
      @id = id unless id == SKIP
      @sale_date = sale_date unless sale_date == SKIP
      @sale_time = sale_time unless sale_time == SKIP
      @sale_date_time = sale_date_time unless sale_date_time == SKIP
      @original_sale_date_time = original_sale_date_time unless original_sale_date_time == SKIP
      @sales_rep_id = sales_rep_id unless sales_rep_id == SKIP
      @client_id = client_id unless client_id == SKIP
      @recipient_client_id = recipient_client_id unless recipient_client_id == SKIP
      @purchased_items = purchased_items unless purchased_items == SKIP
      @location_id = location_id unless location_id == SKIP
      @payments = payments unless payments == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      sale_date = if hash.key?('SaleDate')
                    (DateTimeHelper.from_rfc3339(hash['SaleDate']) if hash['SaleDate'])
                  else
                    SKIP
                  end
      sale_time = hash.key?('SaleTime') ? hash['SaleTime'] : SKIP
      sale_date_time = if hash.key?('SaleDateTime')
                         (DateTimeHelper.from_rfc3339(hash['SaleDateTime']) if hash['SaleDateTime'])
                       else
                         SKIP
                       end
      original_sale_date_time = if hash.key?('OriginalSaleDateTime')
                                  (DateTimeHelper.from_rfc3339(hash['OriginalSaleDateTime']) if hash['OriginalSaleDateTime'])
                                else
                                  SKIP
                                end
      sales_rep_id = hash.key?('SalesRepId') ? hash['SalesRepId'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      recipient_client_id =
        hash.key?('RecipientClientId') ? hash['RecipientClientId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      purchased_items = nil
      unless hash['PurchasedItems'].nil?
        purchased_items = []
        hash['PurchasedItems'].each do |structure|
          purchased_items << (PurchasedItem.from_hash(structure) if structure)
        end
      end

      purchased_items = SKIP unless hash.key?('PurchasedItems')
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      payments = nil
      unless hash['Payments'].nil?
        payments = []
        hash['Payments'].each do |structure|
          payments << (SalePayment.from_hash(structure) if structure)
        end
      end

      payments = SKIP unless hash.key?('Payments')

      # Create object from extracted values.
      Sale.new(id,
               sale_date,
               sale_time,
               sale_date_time,
               original_sale_date_time,
               sales_rep_id,
               client_id,
               recipient_client_id,
               purchased_items,
               location_id,
               payments)
    end

    def to_custom_sale_date
      DateTimeHelper.to_rfc3339(sale_date)
    end

    def to_custom_sale_date_time
      DateTimeHelper.to_rfc3339(sale_date_time)
    end

    def to_custom_original_sale_date_time
      DateTimeHelper.to_rfc3339(original_sale_date_time)
    end
  end
end
