# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # WaitlistEntry Model.
  class WaitlistEntry < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date of the class or enrollment.
    # @return [DateTime]
    attr_accessor :class_date

    # The ID of the class or enrollment.
    # @return [Integer]
    attr_accessor :class_id

    # Represents a single class instance. The class meets at the start time,
    # goes until the end time.
    # @return [ClassSchedule]
    attr_accessor :class_schedule

    # The Client.
    # @return [Client]
    attr_accessor :client

    # If the waiting list entry was created for an enrollment, this is the date
    # on or after which the client can be added to the enrollment from the
    # waitlist.
    # @return [DateTime]
    attr_accessor :enrollment_date_forward

    # The ID of the waiting list entry.
    # @return [Integer]
    attr_accessor :id

    # The date and time that the request to be on the waiting list was made.
    # @return [DateTime]
    attr_accessor :request_date_time

    # The ID of the visit that is associated with the waiting list entry.
    # @return [Integer]
    attr_accessor :visit_ref_no

    # If `true`, the entry on the waiting list was requested online.<br />
    # If `false`, the entry on the waiting list was requested off-line, for
    # example in person or by phone.
    # @return [TrueClass | FalseClass]
    attr_accessor :web

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['class_date'] = 'ClassDate'
      @_hash['class_id'] = 'ClassId'
      @_hash['class_schedule'] = 'ClassSchedule'
      @_hash['client'] = 'Client'
      @_hash['enrollment_date_forward'] = 'EnrollmentDateForward'
      @_hash['id'] = 'Id'
      @_hash['request_date_time'] = 'RequestDateTime'
      @_hash['visit_ref_no'] = 'VisitRefNo'
      @_hash['web'] = 'Web'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        class_date
        class_id
        class_schedule
        client
        enrollment_date_forward
        id
        request_date_time
        visit_ref_no
        web
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(class_date = SKIP, class_id = SKIP, class_schedule = SKIP,
                   client = SKIP, enrollment_date_forward = SKIP, id = SKIP,
                   request_date_time = SKIP, visit_ref_no = SKIP, web = SKIP)
      @class_date = class_date unless class_date == SKIP
      @class_id = class_id unless class_id == SKIP
      @class_schedule = class_schedule unless class_schedule == SKIP
      @client = client unless client == SKIP
      @enrollment_date_forward = enrollment_date_forward unless enrollment_date_forward == SKIP
      @id = id unless id == SKIP
      @request_date_time = request_date_time unless request_date_time == SKIP
      @visit_ref_no = visit_ref_no unless visit_ref_no == SKIP
      @web = web unless web == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      class_date = if hash.key?('ClassDate')
                     (DateTimeHelper.from_rfc3339(hash['ClassDate']) if hash['ClassDate'])
                   else
                     SKIP
                   end
      class_id = hash.key?('ClassId') ? hash['ClassId'] : SKIP
      class_schedule = ClassSchedule.from_hash(hash['ClassSchedule']) if hash['ClassSchedule']
      client = Client.from_hash(hash['Client']) if hash['Client']
      enrollment_date_forward = if hash.key?('EnrollmentDateForward')
                                  (DateTimeHelper.from_rfc3339(hash['EnrollmentDateForward']) if hash['EnrollmentDateForward'])
                                else
                                  SKIP
                                end
      id = hash.key?('Id') ? hash['Id'] : SKIP
      request_date_time = if hash.key?('RequestDateTime')
                            (DateTimeHelper.from_rfc3339(hash['RequestDateTime']) if hash['RequestDateTime'])
                          else
                            SKIP
                          end
      visit_ref_no = hash.key?('VisitRefNo') ? hash['VisitRefNo'] : SKIP
      web = hash.key?('Web') ? hash['Web'] : SKIP

      # Create object from extracted values.
      WaitlistEntry.new(class_date,
                        class_id,
                        class_schedule,
                        client,
                        enrollment_date_forward,
                        id,
                        request_date_time,
                        visit_ref_no,
                        web)
    end

    def to_custom_class_date
      DateTimeHelper.to_rfc3339(class_date)
    end

    def to_custom_enrollment_date_forward
      DateTimeHelper.to_rfc3339(enrollment_date_forward)
    end

    def to_custom_request_date_time
      DateTimeHelper.to_rfc3339(request_date_time)
    end
  end
end
