# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Contains information about the PickASpot classes.
  class PickASpotClass < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID of the Site.
    # @return [Integer]
    attr_accessor :site_id

    # The unique ID of the Location.
    # @return [Integer]
    attr_accessor :location_id

    # The unique ID of the Class.
    # @return [String]
    attr_accessor :class_id

    # The unique Class external ID.
    # @return [String]
    attr_accessor :class_external_id

    # Contains the class name.
    # @return [String]
    attr_accessor :class_name

    # Class start time.
    # @return [DateTime]
    attr_accessor :class_start_time

    # Class end time.
    # @return [DateTime]
    attr_accessor :class_end_time

    # Contains information about the Class maximum capacity.
    # @return [Integer]
    attr_accessor :class_maximum_capacity

    # The unique Room ID.
    # @return [String]
    attr_accessor :room_id

    # Contains information about the spot details.
    # @return [Spot]
    attr_accessor :spots

    # Contains information about the reservation collection.
    # @return [Array[Reservation]]
    attr_accessor :reservations

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['site_id'] = 'SiteId'
      @_hash['location_id'] = 'LocationId'
      @_hash['class_id'] = 'ClassId'
      @_hash['class_external_id'] = 'ClassExternalId'
      @_hash['class_name'] = 'ClassName'
      @_hash['class_start_time'] = 'ClassStartTime'
      @_hash['class_end_time'] = 'ClassEndTime'
      @_hash['class_maximum_capacity'] = 'ClassMaximumCapacity'
      @_hash['room_id'] = 'RoomId'
      @_hash['spots'] = 'Spots'
      @_hash['reservations'] = 'Reservations'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        site_id
        location_id
        class_id
        class_external_id
        class_name
        class_start_time
        class_end_time
        class_maximum_capacity
        room_id
        spots
        reservations
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(site_id = SKIP, location_id = SKIP, class_id = SKIP,
                   class_external_id = SKIP, class_name = SKIP,
                   class_start_time = SKIP, class_end_time = SKIP,
                   class_maximum_capacity = SKIP, room_id = SKIP, spots = SKIP,
                   reservations = SKIP)
      @site_id = site_id unless site_id == SKIP
      @location_id = location_id unless location_id == SKIP
      @class_id = class_id unless class_id == SKIP
      @class_external_id = class_external_id unless class_external_id == SKIP
      @class_name = class_name unless class_name == SKIP
      @class_start_time = class_start_time unless class_start_time == SKIP
      @class_end_time = class_end_time unless class_end_time == SKIP
      @class_maximum_capacity = class_maximum_capacity unless class_maximum_capacity == SKIP
      @room_id = room_id unless room_id == SKIP
      @spots = spots unless spots == SKIP
      @reservations = reservations unless reservations == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      site_id = hash.key?('SiteId') ? hash['SiteId'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      class_id = hash.key?('ClassId') ? hash['ClassId'] : SKIP
      class_external_id =
        hash.key?('ClassExternalId') ? hash['ClassExternalId'] : SKIP
      class_name = hash.key?('ClassName') ? hash['ClassName'] : SKIP
      class_start_time = if hash.key?('ClassStartTime')
                           (DateTimeHelper.from_rfc3339(hash['ClassStartTime']) if hash['ClassStartTime'])
                         else
                           SKIP
                         end
      class_end_time = if hash.key?('ClassEndTime')
                         (DateTimeHelper.from_rfc3339(hash['ClassEndTime']) if hash['ClassEndTime'])
                       else
                         SKIP
                       end
      class_maximum_capacity =
        hash.key?('ClassMaximumCapacity') ? hash['ClassMaximumCapacity'] : SKIP
      room_id = hash.key?('RoomId') ? hash['RoomId'] : SKIP
      spots = Spot.from_hash(hash['Spots']) if hash['Spots']
      # Parameter is an array, so we need to iterate through it
      reservations = nil
      unless hash['Reservations'].nil?
        reservations = []
        hash['Reservations'].each do |structure|
          reservations << (Reservation.from_hash(structure) if structure)
        end
      end

      reservations = SKIP unless hash.key?('Reservations')

      # Create object from extracted values.
      PickASpotClass.new(site_id,
                         location_id,
                         class_id,
                         class_external_id,
                         class_name,
                         class_start_time,
                         class_end_time,
                         class_maximum_capacity,
                         room_id,
                         spots,
                         reservations)
    end

    def to_custom_class_start_time
      DateTimeHelper.to_rfc3339(class_start_time)
    end

    def to_custom_class_end_time
      DateTimeHelper.to_rfc3339(class_end_time)
    end
  end
end
