# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # UpdateClientVisitRequest Model.
  class UpdateClientVisitRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the visit to be updated.
    # @return [Integer]
    attr_accessor :visit_id

    # When `true`, indicates that the visit is eligible to be made up.
    # @return [TrueClass | FalseClass]
    attr_accessor :makeup

    # When `true`, indicates that the client has signed in for the visit.
    # @return [TrueClass | FalseClass]
    attr_accessor :signed_in

    # The ID of the service to assign to the visit.
    # @return [Integer]
    attr_accessor :client_service_id

    # The execute code used to update this visit. Possible values are:
    # * Cancel
    # * Latecancel
    # * Unlatecancel
    # @return [String]
    attr_accessor :execute

    # When `true`, indicates that test mode is enabled. When test mode is
    # enabled, input information is validated, but not committed.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, indicates that the client should be sent an email for
    # cancellations. Note that email is not sent unless the client has an email
    # address and automatic emails have been set up correctly.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['visit_id'] = 'VisitId'
      @_hash['makeup'] = 'Makeup'
      @_hash['signed_in'] = 'SignedIn'
      @_hash['client_service_id'] = 'ClientServiceId'
      @_hash['execute'] = 'Execute'
      @_hash['test'] = 'Test'
      @_hash['send_email'] = 'SendEmail'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        makeup
        signed_in
        client_service_id
        execute
        test
        send_email
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(visit_id = nil, makeup = SKIP, signed_in = SKIP,
                   client_service_id = SKIP, execute = SKIP, test = SKIP,
                   send_email = SKIP)
      @visit_id = visit_id
      @makeup = makeup unless makeup == SKIP
      @signed_in = signed_in unless signed_in == SKIP
      @client_service_id = client_service_id unless client_service_id == SKIP
      @execute = execute unless execute == SKIP
      @test = test unless test == SKIP
      @send_email = send_email unless send_email == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      visit_id = hash.key?('VisitId') ? hash['VisitId'] : nil
      makeup = hash.key?('Makeup') ? hash['Makeup'] : SKIP
      signed_in = hash.key?('SignedIn') ? hash['SignedIn'] : SKIP
      client_service_id =
        hash.key?('ClientServiceId') ? hash['ClientServiceId'] : SKIP
      execute = hash.key?('Execute') ? hash['Execute'] : SKIP
      test = hash.key?('Test') ? hash['Test'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP

      # Create object from extracted values.
      UpdateClientVisitRequest.new(visit_id,
                                   makeup,
                                   signed_in,
                                   client_service_id,
                                   execute,
                                   test,
                                   send_email)
    end
  end
end
