# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Site Model.
  class Site < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, indicates that this site accepts American Express cards.<br
    # />
    # When `false`, indicates that this site does not accept American Express
    # credit cards.
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_american_express

    # When `true`, indicates that this site accepts Discover cards.<br />
    # When `false`, indicates that this site does not accept Discover credit
    # cards.
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_discover

    # When `true`, indicates that this site accepts MasterCard cards.<br />
    # When `false`, indicates that this site does not accept MasterCard credit
    # cards.
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_master_card

    # When `true`, indicates that this site accepts Visa cards.<br />
    # When `false`, indicates that this site does not accept Visa credit cards.
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_visa

    # When `true`, indicates that this site allows access to its dashboard.<br
    # />
    # When `false`, indicates that this site does not allow access to its
    # dashboard.
    # @return [TrueClass | FalseClass]
    attr_accessor :allows_dashboard_access

    # The site’s email address.
    # @return [String]
    attr_accessor :contact_email

    # A description of the site.
    # @return [String]
    attr_accessor :description

    # The site ID.
    # @return [Integer]
    attr_accessor :id

    # The URL to the site’s logo.
    # @return [String]
    attr_accessor :logo_url

    # The name of the site.
    # @return [String]
    attr_accessor :name

    # A hex code for a color the business owner uses in marketing. This color
    # can be used to set a theme for an integration so that it matches the
    # configured color-scheme for the business.
    # @return [String]
    attr_accessor :page_color1

    # The hex code for a second color, to be used in the same manner as
    # `pageColor1`.
    # @return [String]
    attr_accessor :page_color2

    # The hex code for a third color, to be used in the same manner as
    # `pageColor1`.
    # @return [String]
    attr_accessor :page_color3

    # The hex code for a fourth color, to be used in the same manner as
    # `pageColor1`.
    # @return [String]
    attr_accessor :page_color4

    # The MINDBODY pricing level for the business. Possible values are:
    # Accelerate - The business is on MINDBODY’s Accelerate pricing tier.
    # Grow - The business is on MINDBODY’s Essential pricing tier.
    # Legacy - The business is on an older MINDBODY pricing tier that is no
    # longer offered.
    # Listing - The business is on an older MINDBODY pricing tier that is no
    # longer offered.
    # Pro - The business is on an older MINDBODY pricing tier that is no longer
    # offered.
    # Solo - The business is on an older MINDBODY pricing tier that is no longer
    # offered.
    # Ultimate - The business is on MINDBODY’s Ultimate pricing tier.
    # @return [String]
    attr_accessor :pricing_level

    # When `true`, indicates that the business uses SMS text messages to
    # communicate with its clients.<br />
    # When `false`, indicates that the business does not use SMS text messages
    # to communicate with its clients.
    # @return [TrueClass | FalseClass]
    attr_accessor :sms_package_enabled

    # When `true`, indicates that the total includes tax.<br />
    # When `false`, indicates that the total does not include tax.
    # @return [TrueClass | FalseClass]
    attr_accessor :tax_inclusive_prices

    # The currency ISO code for the site.
    # @return [String]
    attr_accessor :currency_iso_code

    # The country code for the site.
    # @return [String]
    attr_accessor :country_code

    # The time zone the site is located in.
    # @return [String]
    attr_accessor :time_zone

    # When `true`, indicates that direct debit can be used by clients at this
    # site.<br />
    # When `false`, indicates that direct debit can not by used by clients at
    # this site.
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_direct_debit

    # The list of lead channels available for a subscriber/studio.
    # @return [Array[LeadChannel]]
    attr_accessor :lead_channels

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accepts_american_express'] = 'AcceptsAmericanExpress'
      @_hash['accepts_discover'] = 'AcceptsDiscover'
      @_hash['accepts_master_card'] = 'AcceptsMasterCard'
      @_hash['accepts_visa'] = 'AcceptsVisa'
      @_hash['allows_dashboard_access'] = 'AllowsDashboardAccess'
      @_hash['contact_email'] = 'ContactEmail'
      @_hash['description'] = 'Description'
      @_hash['id'] = 'Id'
      @_hash['logo_url'] = 'LogoUrl'
      @_hash['name'] = 'Name'
      @_hash['page_color1'] = 'PageColor1'
      @_hash['page_color2'] = 'PageColor2'
      @_hash['page_color3'] = 'PageColor3'
      @_hash['page_color4'] = 'PageColor4'
      @_hash['pricing_level'] = 'PricingLevel'
      @_hash['sms_package_enabled'] = 'SmsPackageEnabled'
      @_hash['tax_inclusive_prices'] = 'TaxInclusivePrices'
      @_hash['currency_iso_code'] = 'CurrencyIsoCode'
      @_hash['country_code'] = 'CountryCode'
      @_hash['time_zone'] = 'TimeZone'
      @_hash['accepts_direct_debit'] = 'AcceptsDirectDebit'
      @_hash['lead_channels'] = 'LeadChannels'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accepts_american_express
        accepts_discover
        accepts_master_card
        accepts_visa
        allows_dashboard_access
        contact_email
        description
        id
        logo_url
        name
        page_color1
        page_color2
        page_color3
        page_color4
        pricing_level
        sms_package_enabled
        tax_inclusive_prices
        currency_iso_code
        country_code
        time_zone
        accepts_direct_debit
        lead_channels
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(accepts_american_express = SKIP, accepts_discover = SKIP,
                   accepts_master_card = SKIP, accepts_visa = SKIP,
                   allows_dashboard_access = SKIP, contact_email = SKIP,
                   description = SKIP, id = SKIP, logo_url = SKIP, name = SKIP,
                   page_color1 = SKIP, page_color2 = SKIP, page_color3 = SKIP,
                   page_color4 = SKIP, pricing_level = SKIP,
                   sms_package_enabled = SKIP, tax_inclusive_prices = SKIP,
                   currency_iso_code = SKIP, country_code = SKIP,
                   time_zone = SKIP, accepts_direct_debit = SKIP,
                   lead_channels = SKIP)
      @accepts_american_express = accepts_american_express unless accepts_american_express == SKIP
      @accepts_discover = accepts_discover unless accepts_discover == SKIP
      @accepts_master_card = accepts_master_card unless accepts_master_card == SKIP
      @accepts_visa = accepts_visa unless accepts_visa == SKIP
      @allows_dashboard_access = allows_dashboard_access unless allows_dashboard_access == SKIP
      @contact_email = contact_email unless contact_email == SKIP
      @description = description unless description == SKIP
      @id = id unless id == SKIP
      @logo_url = logo_url unless logo_url == SKIP
      @name = name unless name == SKIP
      @page_color1 = page_color1 unless page_color1 == SKIP
      @page_color2 = page_color2 unless page_color2 == SKIP
      @page_color3 = page_color3 unless page_color3 == SKIP
      @page_color4 = page_color4 unless page_color4 == SKIP
      @pricing_level = pricing_level unless pricing_level == SKIP
      @sms_package_enabled = sms_package_enabled unless sms_package_enabled == SKIP
      @tax_inclusive_prices = tax_inclusive_prices unless tax_inclusive_prices == SKIP
      @currency_iso_code = currency_iso_code unless currency_iso_code == SKIP
      @country_code = country_code unless country_code == SKIP
      @time_zone = time_zone unless time_zone == SKIP
      @accepts_direct_debit = accepts_direct_debit unless accepts_direct_debit == SKIP
      @lead_channels = lead_channels unless lead_channels == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      accepts_american_express =
        hash.key?('AcceptsAmericanExpress') ? hash['AcceptsAmericanExpress'] : SKIP
      accepts_discover =
        hash.key?('AcceptsDiscover') ? hash['AcceptsDiscover'] : SKIP
      accepts_master_card =
        hash.key?('AcceptsMasterCard') ? hash['AcceptsMasterCard'] : SKIP
      accepts_visa = hash.key?('AcceptsVisa') ? hash['AcceptsVisa'] : SKIP
      allows_dashboard_access =
        hash.key?('AllowsDashboardAccess') ? hash['AllowsDashboardAccess'] : SKIP
      contact_email = hash.key?('ContactEmail') ? hash['ContactEmail'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      logo_url = hash.key?('LogoUrl') ? hash['LogoUrl'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      page_color1 = hash.key?('PageColor1') ? hash['PageColor1'] : SKIP
      page_color2 = hash.key?('PageColor2') ? hash['PageColor2'] : SKIP
      page_color3 = hash.key?('PageColor3') ? hash['PageColor3'] : SKIP
      page_color4 = hash.key?('PageColor4') ? hash['PageColor4'] : SKIP
      pricing_level = hash.key?('PricingLevel') ? hash['PricingLevel'] : SKIP
      sms_package_enabled =
        hash.key?('SmsPackageEnabled') ? hash['SmsPackageEnabled'] : SKIP
      tax_inclusive_prices =
        hash.key?('TaxInclusivePrices') ? hash['TaxInclusivePrices'] : SKIP
      currency_iso_code =
        hash.key?('CurrencyIsoCode') ? hash['CurrencyIsoCode'] : SKIP
      country_code = hash.key?('CountryCode') ? hash['CountryCode'] : SKIP
      time_zone = hash.key?('TimeZone') ? hash['TimeZone'] : SKIP
      accepts_direct_debit =
        hash.key?('AcceptsDirectDebit') ? hash['AcceptsDirectDebit'] : SKIP
      # Parameter is an array, so we need to iterate through it
      lead_channels = nil
      unless hash['LeadChannels'].nil?
        lead_channels = []
        hash['LeadChannels'].each do |structure|
          lead_channels << (LeadChannel.from_hash(structure) if structure)
        end
      end

      lead_channels = SKIP unless hash.key?('LeadChannels')

      # Create object from extracted values.
      Site.new(accepts_american_express,
               accepts_discover,
               accepts_master_card,
               accepts_visa,
               allows_dashboard_access,
               contact_email,
               description,
               id,
               logo_url,
               name,
               page_color1,
               page_color2,
               page_color3,
               page_color4,
               pricing_level,
               sms_package_enabled,
               tax_inclusive_prices,
               currency_iso_code,
               country_code,
               time_zone,
               accepts_direct_debit,
               lead_channels)
    end
  end
end
