# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # PurchaseGiftCardResponse Model.
  class PurchaseGiftCardResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The barcode ID assigned to the purchased gift card.
    # @return [String]
    attr_accessor :barcode_id

    # The monetary value of the gift card.
    # @return [Float]
    attr_accessor :value

    # The amount paid for the gift card by the purchaser.
    # @return [Float]
    attr_accessor :amount_paid

    # The name of the purchaser.
    # @return [String]
    attr_accessor :from_name

    # The ID of the layout used for this gift card.
    # @return [Integer]
    attr_accessor :layout_id

    # Whether or not an email receipt was sent to the purchaser. If true, a
    # receipt was sent.
    # @return [TrueClass | FalseClass]
    attr_accessor :email_receipt

    # The client ID of the purchaser.
    # @return [String]
    attr_accessor :purchaser_client_id

    # The purchaser’s email address.
    # @return [String]
    attr_accessor :purchaser_email

    # The recipient’s email address.
    # @return [String]
    attr_accessor :recipient_email

    # The sale ID of the gift card.
    # @return [Integer]
    attr_accessor :sale_id

    # Any cart processing failures, for example when SCA challenged, the cart is
    # in PaymentAuthenticationRequired state and at least one of the failures
    # listed will provide an authentication Url.
    # @return [Array[PaymentProcessingFailure]]
    attr_accessor :payment_processing_failures

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['barcode_id'] = 'BarcodeId'
      @_hash['value'] = 'Value'
      @_hash['amount_paid'] = 'AmountPaid'
      @_hash['from_name'] = 'FromName'
      @_hash['layout_id'] = 'LayoutId'
      @_hash['email_receipt'] = 'EmailReceipt'
      @_hash['purchaser_client_id'] = 'PurchaserClientId'
      @_hash['purchaser_email'] = 'PurchaserEmail'
      @_hash['recipient_email'] = 'RecipientEmail'
      @_hash['sale_id'] = 'SaleId'
      @_hash['payment_processing_failures'] = 'PaymentProcessingFailures'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        barcode_id
        value
        amount_paid
        from_name
        layout_id
        email_receipt
        purchaser_client_id
        purchaser_email
        recipient_email
        sale_id
        payment_processing_failures
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(barcode_id = SKIP, value = SKIP, amount_paid = SKIP,
                   from_name = SKIP, layout_id = SKIP, email_receipt = SKIP,
                   purchaser_client_id = SKIP, purchaser_email = SKIP,
                   recipient_email = SKIP, sale_id = SKIP,
                   payment_processing_failures = SKIP)
      @barcode_id = barcode_id unless barcode_id == SKIP
      @value = value unless value == SKIP
      @amount_paid = amount_paid unless amount_paid == SKIP
      @from_name = from_name unless from_name == SKIP
      @layout_id = layout_id unless layout_id == SKIP
      @email_receipt = email_receipt unless email_receipt == SKIP
      @purchaser_client_id = purchaser_client_id unless purchaser_client_id == SKIP
      @purchaser_email = purchaser_email unless purchaser_email == SKIP
      @recipient_email = recipient_email unless recipient_email == SKIP
      @sale_id = sale_id unless sale_id == SKIP
      unless payment_processing_failures == SKIP
        @payment_processing_failures =
          payment_processing_failures
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      barcode_id = hash.key?('BarcodeId') ? hash['BarcodeId'] : SKIP
      value = hash.key?('Value') ? hash['Value'] : SKIP
      amount_paid = hash.key?('AmountPaid') ? hash['AmountPaid'] : SKIP
      from_name = hash.key?('FromName') ? hash['FromName'] : SKIP
      layout_id = hash.key?('LayoutId') ? hash['LayoutId'] : SKIP
      email_receipt = hash.key?('EmailReceipt') ? hash['EmailReceipt'] : SKIP
      purchaser_client_id =
        hash.key?('PurchaserClientId') ? hash['PurchaserClientId'] : SKIP
      purchaser_email =
        hash.key?('PurchaserEmail') ? hash['PurchaserEmail'] : SKIP
      recipient_email =
        hash.key?('RecipientEmail') ? hash['RecipientEmail'] : SKIP
      sale_id = hash.key?('SaleId') ? hash['SaleId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      payment_processing_failures = nil
      unless hash['PaymentProcessingFailures'].nil?
        payment_processing_failures = []
        hash['PaymentProcessingFailures'].each do |structure|
          payment_processing_failures << (PaymentProcessingFailure.from_hash(structure) if structure)
        end
      end

      payment_processing_failures = SKIP unless hash.key?('PaymentProcessingFailures')

      # Create object from extracted values.
      PurchaseGiftCardResponse.new(barcode_id,
                                   value,
                                   amount_paid,
                                   from_name,
                                   layout_id,
                                   email_receipt,
                                   purchaser_client_id,
                                   purchaser_email,
                                   recipient_email,
                                   sale_id,
                                   payment_processing_failures)
    end
  end
end
