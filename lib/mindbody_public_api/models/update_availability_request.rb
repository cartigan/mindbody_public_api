# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # This is the update avaialability request coming DTO
  class UpdateAvailabilityRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique IDs for the availabilities or unavailabilities.
    # @return [Array[Integer]]
    attr_accessor :availability_ids

    # Choice that decides whether the availablity should be publicly visible,
    # masked or hidden.
    # @return [PublicDisplayEnum]
    attr_accessor :public_display

    # The days of week to update the availabilities or unavailabilities.<br />
    # Default: **All**
    # @return [Array[DaysOfWeekEnum]]
    attr_accessor :days_of_week

    # The program Id to be set for the availabilities.
    # Default: **All**
    # @return [Array[Integer]]
    attr_accessor :program_ids

    # The start date and time for the availabilities or unavailabilities.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The end date and time for the availabilities or unavailabilities.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The location Id to be updated for the provided availability Ids.
    # @return [Integer]
    attr_accessor :location_id

    # The description for unavailability.
    # @return [String]
    attr_accessor :unavailable_description

    # When `true`, the request ensures that its parameters are valid without
    # affecting real data.
    # When ``false`, the request performs as intended and may affect live client
    # data.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['availability_ids'] = 'AvailabilityIds'
      @_hash['public_display'] = 'PublicDisplay'
      @_hash['days_of_week'] = 'DaysOfWeek'
      @_hash['program_ids'] = 'ProgramIds'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['location_id'] = 'LocationId'
      @_hash['unavailable_description'] = 'UnavailableDescription'
      @_hash['test'] = 'Test'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        availability_ids
        public_display
        days_of_week
        program_ids
        start_date_time
        end_date_time
        location_id
        unavailable_description
        test
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(availability_ids = SKIP, public_display = SKIP,
                   days_of_week = SKIP, program_ids = SKIP,
                   start_date_time = SKIP, end_date_time = SKIP,
                   location_id = SKIP, unavailable_description = SKIP,
                   test = SKIP)
      @availability_ids = availability_ids unless availability_ids == SKIP
      @public_display = public_display unless public_display == SKIP
      @days_of_week = days_of_week unless days_of_week == SKIP
      @program_ids = program_ids unless program_ids == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @location_id = location_id unless location_id == SKIP
      @unavailable_description = unavailable_description unless unavailable_description == SKIP
      @test = test unless test == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      availability_ids =
        hash.key?('AvailabilityIds') ? hash['AvailabilityIds'] : SKIP
      public_display = hash.key?('PublicDisplay') ? hash['PublicDisplay'] : SKIP
      days_of_week = hash.key?('DaysOfWeek') ? hash['DaysOfWeek'] : SKIP
      program_ids = hash.key?('ProgramIds') ? hash['ProgramIds'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      unavailable_description =
        hash.key?('UnavailableDescription') ? hash['UnavailableDescription'] : SKIP
      test = hash.key?('Test') ? hash['Test'] : SKIP

      # Create object from extracted values.
      UpdateAvailabilityRequest.new(availability_ids,
                                    public_display,
                                    days_of_week,
                                    program_ids,
                                    start_date_time,
                                    end_date_time,
                                    location_id,
                                    unavailable_description,
                                    test)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end
  end
end
