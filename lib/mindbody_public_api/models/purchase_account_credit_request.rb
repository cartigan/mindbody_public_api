# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # PurchaseAccountCreditRequest Model.
  class PurchaseAccountCreditRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, allows you to test the request without affecting the
    # database.
    # When `false`, the request is carried out and the database is affected.
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # The ID of the location where the account credit is being sold.
    # @return [Integer]
    attr_accessor :location_id

    # The ID of the location where the account credit is being sold.
    # @return [String]
    attr_accessor :client_id

    # When `true`, indicates that a purchase receipt email should be sent to the
    # purchasing client, if all settings are correctly configured.<br />
    # When `false`, no email is sent to the purchaser.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email_receipt

    # The ID of the staff member to be marked as the sales rep for this account
    # credit sale.
    # @return [Integer]
    attr_accessor :sales_rep_id

    # When `true`, indicates that the consumer is present or otherwise able to
    # successfully negotiate an SCA challenge.
    #  It is not a good idea to have this always be false as that could very
    # likely lead to a bank declining all transactions for the merchant.
    # Defaults to false.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :consumer_present

    # The URL consumer is redirected to if the bank requests SCA. This field is
    # only needed if ConsumerPresent is true.
    # @return [String]
    attr_accessor :payment_authentication_callback_url

    # The URL consumer is redirected to if the bank requests SCA. This field is
    # only needed if ConsumerPresent is true.
    # @return [CheckoutPaymentInfo]
    attr_accessor :payment_info

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['test'] = 'Test'
      @_hash['location_id'] = 'LocationId'
      @_hash['client_id'] = 'ClientId'
      @_hash['send_email_receipt'] = 'SendEmailReceipt'
      @_hash['sales_rep_id'] = 'SalesRepId'
      @_hash['consumer_present'] = 'ConsumerPresent'
      @_hash['payment_authentication_callback_url'] =
        'PaymentAuthenticationCallbackUrl'
      @_hash['payment_info'] = 'PaymentInfo'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        location_id
        send_email_receipt
        sales_rep_id
        consumer_present
        payment_authentication_callback_url
        payment_info
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, test = SKIP, location_id = SKIP,
                   send_email_receipt = SKIP, sales_rep_id = SKIP,
                   consumer_present = SKIP,
                   payment_authentication_callback_url = SKIP,
                   payment_info = SKIP)
      @test = test unless test == SKIP
      @location_id = location_id unless location_id == SKIP
      @client_id = client_id
      @send_email_receipt = send_email_receipt unless send_email_receipt == SKIP
      @sales_rep_id = sales_rep_id unless sales_rep_id == SKIP
      @consumer_present = consumer_present unless consumer_present == SKIP
      unless payment_authentication_callback_url == SKIP
        @payment_authentication_callback_url =
          payment_authentication_callback_url
      end
      @payment_info = payment_info unless payment_info == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      test = hash.key?('Test') ? hash['Test'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      send_email_receipt =
        hash.key?('SendEmailReceipt') ? hash['SendEmailReceipt'] : SKIP
      sales_rep_id = hash.key?('SalesRepId') ? hash['SalesRepId'] : SKIP
      consumer_present =
        hash.key?('ConsumerPresent') ? hash['ConsumerPresent'] : SKIP
      payment_authentication_callback_url =
        hash.key?('PaymentAuthenticationCallbackUrl') ? hash['PaymentAuthenticationCallbackUrl'] : SKIP
      payment_info = CheckoutPaymentInfo.from_hash(hash['PaymentInfo']) if hash['PaymentInfo']

      # Create object from extracted values.
      PurchaseAccountCreditRequest.new(client_id,
                                       test,
                                       location_id,
                                       send_email_receipt,
                                       sales_rep_id,
                                       consumer_present,
                                       payment_authentication_callback_url,
                                       payment_info)
    end
  end
end
