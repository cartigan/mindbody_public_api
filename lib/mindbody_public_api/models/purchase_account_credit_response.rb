# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # PurchaseAccountCreditResponse Model.
  class PurchaseAccountCreditResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The amount paid for the gift card by the purchaser.
    # @return [Float]
    attr_accessor :amount_paid

    # The client ID of the purchaser.
    # @return [String]
    attr_accessor :client_id

    # The sale ID of the gift card.
    # @return [Integer]
    attr_accessor :sale_id

    # Whether or not an email receipt was sent to the purchaser. If true, a
    # receipt was sent.
    # @return [TrueClass | FalseClass]
    attr_accessor :email_receipt

    # Any cart processing failures, for example when SCA challenged, the cart is
    # in PaymentAuthenticationRequired state and at least one of the failures
    # listed will provide an authentication Url.
    # @return [Array[PaymentProcessingFailure]]
    attr_accessor :payment_processing_failures

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount_paid'] = 'AmountPaid'
      @_hash['client_id'] = 'ClientId'
      @_hash['sale_id'] = 'SaleId'
      @_hash['email_receipt'] = 'EmailReceipt'
      @_hash['payment_processing_failures'] = 'PaymentProcessingFailures'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        amount_paid
        client_id
        sale_id
        email_receipt
        payment_processing_failures
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(amount_paid = SKIP, client_id = SKIP, sale_id = SKIP,
                   email_receipt = SKIP, payment_processing_failures = SKIP)
      @amount_paid = amount_paid unless amount_paid == SKIP
      @client_id = client_id unless client_id == SKIP
      @sale_id = sale_id unless sale_id == SKIP
      @email_receipt = email_receipt unless email_receipt == SKIP
      unless payment_processing_failures == SKIP
        @payment_processing_failures =
          payment_processing_failures
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount_paid = hash.key?('AmountPaid') ? hash['AmountPaid'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      sale_id = hash.key?('SaleId') ? hash['SaleId'] : SKIP
      email_receipt = hash.key?('EmailReceipt') ? hash['EmailReceipt'] : SKIP
      # Parameter is an array, so we need to iterate through it
      payment_processing_failures = nil
      unless hash['PaymentProcessingFailures'].nil?
        payment_processing_failures = []
        hash['PaymentProcessingFailures'].each do |structure|
          payment_processing_failures << (PaymentProcessingFailure.from_hash(structure) if structure)
        end
      end

      payment_processing_failures = SKIP unless hash.key?('PaymentProcessingFailures')

      # Create object from extracted values.
      PurchaseAccountCreditResponse.new(amount_paid,
                                        client_id,
                                        sale_id,
                                        email_receipt,
                                        payment_processing_failures)
    end
  end
end
