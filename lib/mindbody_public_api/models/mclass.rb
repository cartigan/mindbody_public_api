# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Represents a single class instance. The class meets at the start time, goes
  # until the end time.
  class Class < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID used to retrieve the class schedule for the desired class.
    # @return [Integer]
    attr_accessor :class_schedule_id

    # Contains information about visits.
    # @return [Array[Visit]]
    attr_accessor :visits

    # Contains information about clients.
    # @return [Array[Client]]
    attr_accessor :clients

    # Contains information about clients.
    # @return [Location]
    attr_accessor :location

    # Contains information about resources, such as rooms.
    # @return [ResourceSlim]
    attr_accessor :resource

    # The maximum number of clients allowed in the class.
    # @return [Integer]
    attr_accessor :max_capacity

    # The maximum number of clients allowed to sign up online for the class.
    # @return [Integer]
    attr_accessor :web_capacity

    # The total number of clients booked in the class.
    # @return [Integer]
    attr_accessor :total_booked

    # The total number of clients signed into the class.
    # @return [Integer]
    attr_accessor :total_signed_in

    # The total number of booked clients on the waiting list for the class.
    # @return [Integer]
    attr_accessor :total_booked_waitlist

    # The total number of clients who signed up online for the class.
    # @return [Integer]
    attr_accessor :web_booked

    # The ID of the semester that the class is a part of, if any.
    # @return [Integer]
    attr_accessor :semester_id

    # When `true`, indicates that the class has been cancelled.<br />
    # When `false`, indicates that the class has not been cancelled.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_canceled

    # When `true`, indicates that the class is being taught by a substitute
    # teacher.<br />
    # When `false`, indicates that the class is being taught by its regular
    # teacher.
    # @return [TrueClass | FalseClass]
    attr_accessor :substitute

    # When `true`, indicates that the class is shown to clients when in consumer
    # mode.<br />
    # When `false`, indicates that the class is not shown to clients when in
    # consumer mode.
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # When `true`, indicates that the clients can be placed on a waiting list
    # for the class.<br />
    # When `false`, indicates that the clients cannot be placed on a waiting
    # list for the class.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_waitlist_available

    # When `true`, indicates that the client with the given `ClientId` is
    # enrolled in this class.<br />
    # When `false`, indicates that the client with the given `ClientId` is not
    # enrolled in this class.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_enrolled

    # When `true`, indicates that this class is hidden when cancelled.<br />
    # When `false`, indicates that this class is not hidden when cancelled.
    # @return [TrueClass | FalseClass]
    attr_accessor :hide_cancel

    # The unique identifier for the class.
    # @return [Integer]
    attr_accessor :id

    # When `true`, indicates that the client with the given client ID can book
    # this class.<br />
    # When `false`, indicates that the client with the given client ID cannot
    # book this class.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_available

    # The time this class is scheduled to start.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The time this class is scheduled to end.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The last time this class was modified.
    # @return [DateTime]
    attr_accessor :last_modified_date_time

    # Represents a class definition. The class meets at the start time, goes
    # until the end time.
    # @return [ClassDescription]
    attr_accessor :class_description

    # The Staff
    # @return [Staff]
    attr_accessor :staff

    # The booking window for registration
    # @return [BookingWindow]
    attr_accessor :booking_window

    # Contains the bookingâ€™s payment status.
    # @return [BookingStatusEnum]
    attr_accessor :booking_status

    # The link to the Mindbody-hosted live stream for the class. This is `null`
    # when no live stream is configured for the class.
    # @return [String]
    attr_accessor :virtual_stream_link

    # The maximum number allowed on the waiting list for the class.
    # @return [Integer]
    attr_accessor :wait_list_size

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['class_schedule_id'] = 'ClassScheduleId'
      @_hash['visits'] = 'Visits'
      @_hash['clients'] = 'Clients'
      @_hash['location'] = 'Location'
      @_hash['resource'] = 'Resource'
      @_hash['max_capacity'] = 'MaxCapacity'
      @_hash['web_capacity'] = 'WebCapacity'
      @_hash['total_booked'] = 'TotalBooked'
      @_hash['total_signed_in'] = 'TotalSignedIn'
      @_hash['total_booked_waitlist'] = 'TotalBookedWaitlist'
      @_hash['web_booked'] = 'WebBooked'
      @_hash['semester_id'] = 'SemesterId'
      @_hash['is_canceled'] = 'IsCanceled'
      @_hash['substitute'] = 'Substitute'
      @_hash['active'] = 'Active'
      @_hash['is_waitlist_available'] = 'IsWaitlistAvailable'
      @_hash['is_enrolled'] = 'IsEnrolled'
      @_hash['hide_cancel'] = 'HideCancel'
      @_hash['id'] = 'Id'
      @_hash['is_available'] = 'IsAvailable'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['last_modified_date_time'] = 'LastModifiedDateTime'
      @_hash['class_description'] = 'ClassDescription'
      @_hash['staff'] = 'Staff'
      @_hash['booking_window'] = 'BookingWindow'
      @_hash['booking_status'] = 'BookingStatus'
      @_hash['virtual_stream_link'] = 'VirtualStreamLink'
      @_hash['wait_list_size'] = 'WaitListSize'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        class_schedule_id
        visits
        clients
        location
        resource
        max_capacity
        web_capacity
        total_booked
        total_signed_in
        total_booked_waitlist
        web_booked
        semester_id
        is_canceled
        substitute
        active
        is_waitlist_available
        is_enrolled
        hide_cancel
        id
        is_available
        start_date_time
        end_date_time
        last_modified_date_time
        class_description
        staff
        booking_window
        booking_status
        virtual_stream_link
        wait_list_size
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(class_schedule_id = SKIP, visits = SKIP, clients = SKIP,
                   location = SKIP, resource = SKIP, max_capacity = SKIP,
                   web_capacity = SKIP, total_booked = SKIP,
                   total_signed_in = SKIP, total_booked_waitlist = SKIP,
                   web_booked = SKIP, semester_id = SKIP, is_canceled = SKIP,
                   substitute = SKIP, active = SKIP,
                   is_waitlist_available = SKIP, is_enrolled = SKIP,
                   hide_cancel = SKIP, id = SKIP, is_available = SKIP,
                   start_date_time = SKIP, end_date_time = SKIP,
                   last_modified_date_time = SKIP, class_description = SKIP,
                   staff = SKIP, booking_window = SKIP, booking_status = SKIP,
                   virtual_stream_link = SKIP, wait_list_size = SKIP)
      @class_schedule_id = class_schedule_id unless class_schedule_id == SKIP
      @visits = visits unless visits == SKIP
      @clients = clients unless clients == SKIP
      @location = location unless location == SKIP
      @resource = resource unless resource == SKIP
      @max_capacity = max_capacity unless max_capacity == SKIP
      @web_capacity = web_capacity unless web_capacity == SKIP
      @total_booked = total_booked unless total_booked == SKIP
      @total_signed_in = total_signed_in unless total_signed_in == SKIP
      @total_booked_waitlist = total_booked_waitlist unless total_booked_waitlist == SKIP
      @web_booked = web_booked unless web_booked == SKIP
      @semester_id = semester_id unless semester_id == SKIP
      @is_canceled = is_canceled unless is_canceled == SKIP
      @substitute = substitute unless substitute == SKIP
      @active = active unless active == SKIP
      @is_waitlist_available = is_waitlist_available unless is_waitlist_available == SKIP
      @is_enrolled = is_enrolled unless is_enrolled == SKIP
      @hide_cancel = hide_cancel unless hide_cancel == SKIP
      @id = id unless id == SKIP
      @is_available = is_available unless is_available == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @last_modified_date_time = last_modified_date_time unless last_modified_date_time == SKIP
      @class_description = class_description unless class_description == SKIP
      @staff = staff unless staff == SKIP
      @booking_window = booking_window unless booking_window == SKIP
      @booking_status = booking_status unless booking_status == SKIP
      @virtual_stream_link = virtual_stream_link unless virtual_stream_link == SKIP
      @wait_list_size = wait_list_size unless wait_list_size == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      class_schedule_id =
        hash.key?('ClassScheduleId') ? hash['ClassScheduleId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      visits = nil
      unless hash['Visits'].nil?
        visits = []
        hash['Visits'].each do |structure|
          visits << (Visit.from_hash(structure) if structure)
        end
      end

      visits = SKIP unless hash.key?('Visits')
      # Parameter is an array, so we need to iterate through it
      clients = nil
      unless hash['Clients'].nil?
        clients = []
        hash['Clients'].each do |structure|
          clients << (Client.from_hash(structure) if structure)
        end
      end

      clients = SKIP unless hash.key?('Clients')
      location = Location.from_hash(hash['Location']) if hash['Location']
      resource = ResourceSlim.from_hash(hash['Resource']) if hash['Resource']
      max_capacity = hash.key?('MaxCapacity') ? hash['MaxCapacity'] : SKIP
      web_capacity = hash.key?('WebCapacity') ? hash['WebCapacity'] : SKIP
      total_booked = hash.key?('TotalBooked') ? hash['TotalBooked'] : SKIP
      total_signed_in =
        hash.key?('TotalSignedIn') ? hash['TotalSignedIn'] : SKIP
      total_booked_waitlist =
        hash.key?('TotalBookedWaitlist') ? hash['TotalBookedWaitlist'] : SKIP
      web_booked = hash.key?('WebBooked') ? hash['WebBooked'] : SKIP
      semester_id = hash.key?('SemesterId') ? hash['SemesterId'] : SKIP
      is_canceled = hash.key?('IsCanceled') ? hash['IsCanceled'] : SKIP
      substitute = hash.key?('Substitute') ? hash['Substitute'] : SKIP
      active = hash.key?('Active') ? hash['Active'] : SKIP
      is_waitlist_available =
        hash.key?('IsWaitlistAvailable') ? hash['IsWaitlistAvailable'] : SKIP
      is_enrolled = hash.key?('IsEnrolled') ? hash['IsEnrolled'] : SKIP
      hide_cancel = hash.key?('HideCancel') ? hash['HideCancel'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      is_available = hash.key?('IsAvailable') ? hash['IsAvailable'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      last_modified_date_time = if hash.key?('LastModifiedDateTime')
                                  (DateTimeHelper.from_rfc3339(hash['LastModifiedDateTime']) if hash['LastModifiedDateTime'])
                                else
                                  SKIP
                                end
      class_description = ClassDescription.from_hash(hash['ClassDescription']) if
        hash['ClassDescription']
      staff = Staff.from_hash(hash['Staff']) if hash['Staff']
      booking_window = BookingWindow.from_hash(hash['BookingWindow']) if hash['BookingWindow']
      booking_status = hash.key?('BookingStatus') ? hash['BookingStatus'] : SKIP
      virtual_stream_link =
        hash.key?('VirtualStreamLink') ? hash['VirtualStreamLink'] : SKIP
      wait_list_size = hash.key?('WaitListSize') ? hash['WaitListSize'] : SKIP

      # Create object from extracted values.
      Class.new(class_schedule_id,
                visits,
                clients,
                location,
                resource,
                max_capacity,
                web_capacity,
                total_booked,
                total_signed_in,
                total_booked_waitlist,
                web_booked,
                semester_id,
                is_canceled,
                substitute,
                active,
                is_waitlist_available,
                is_enrolled,
                hide_cancel,
                id,
                is_available,
                start_date_time,
                end_date_time,
                last_modified_date_time,
                class_description,
                staff,
                booking_window,
                booking_status,
                virtual_stream_link,
                wait_list_size)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end

    def to_custom_last_modified_date_time
      DateTimeHelper.to_rfc3339(last_modified_date_time)
    end
  end
end
