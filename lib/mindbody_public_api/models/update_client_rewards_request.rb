# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Request object for using the API to Earn or Redeem reward points
  class UpdateClientRewardsRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the client that is getting rewards earned or redeemed.
    # @return [String]
    attr_accessor :client_id

    # The amount of points the client is getting earned or redeemed, must be a
    # positive number.
    # @return [Integer]
    attr_accessor :points

    # If Action passed as **Earned**,
    # possible values are:
    # * Appointment Booking
    # * Class Booking
    # * Referral
    # * Sale
    # <br />Omit if Action passed as **Redeemed**.
    # @return [String]
    attr_accessor :source

    # The unique identifier in the MINDBODY system for the **Source**. If Action
    # is **Earned**, and an optional SourceID is provided, it is validated as
    # follows: 
    # * If Source is Appointment Booking, then a provided SourceID must be a
    # valid Visit.AppointmentId for the indicated Client.
    # * If Source is **Class Booking**, then a provided SourceID must be a valid
    # Visit.Id for the indicated client.
    # * If Source is **Sale**, then a provided SourceID must be a valid Sale.Id
    # for the indicated client. 
    # * If Source is **Referral**, then a provided SourceID must be a valid
    # Client.Id (RelatedClientId) and have been referred by the indicated client
    # (ClientRelationship.Id = -1).
    # If Action is **Redeemed**, and an optional SourceID is provided, then
    # SourceID must be a valid Sale.Id for the indicated client, and refers to
    # the sale where the indicated points were redeemed.
    # @return [Integer]
    attr_accessor :source_id

    # Indicates if rewards are getting earned or redeemed. 
    # Possible values are:
    # *Earned
    # *Redeemed
    # @return [String]
    attr_accessor :action

    # The date and time when the points were earned or redeemed in UTC format.
    # This date may be in the past, however it may not be in the future.
    # Default: **current date/time**
    # @return [DateTime]
    attr_accessor :action_date_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_id'] = 'ClientId'
      @_hash['points'] = 'Points'
      @_hash['source'] = 'Source'
      @_hash['source_id'] = 'SourceId'
      @_hash['action'] = 'Action'
      @_hash['action_date_time'] = 'ActionDateTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        source
        source_id
        action_date_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, points = nil, action = nil, source = SKIP,
                   source_id = SKIP, action_date_time = SKIP)
      @client_id = client_id
      @points = points
      @source = source unless source == SKIP
      @source_id = source_id unless source_id == SKIP
      @action = action
      @action_date_time = action_date_time unless action_date_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      points = hash.key?('Points') ? hash['Points'] : nil
      action = hash.key?('Action') ? hash['Action'] : nil
      source = hash.key?('Source') ? hash['Source'] : SKIP
      source_id = hash.key?('SourceId') ? hash['SourceId'] : SKIP
      action_date_time = if hash.key?('ActionDateTime')
                           (DateTimeHelper.from_rfc3339(hash['ActionDateTime']) if hash['ActionDateTime'])
                         else
                           SKIP
                         end

      # Create object from extracted values.
      UpdateClientRewardsRequest.new(client_id,
                                     points,
                                     action,
                                     source,
                                     source_id,
                                     action_date_time)
    end

    def to_custom_action_date_time
      DateTimeHelper.to_rfc3339(action_date_time)
    end
  end
end
