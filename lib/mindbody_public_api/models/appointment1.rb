# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # An appointment
  class Appointment1 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Prefered gender of appointment.
    # @return [String]
    attr_accessor :gender_preference

    # Duration of appointment.
    # @return [Integer]
    attr_accessor :duration

    # If a user has Complementary and Alternative Medicine features enabled,
    # this will allow a Provider ID to be assigned to an appointment.
    # @return [String]
    attr_accessor :provider_id

    # The unique ID of the appointment.
    # @return [Integer]
    attr_accessor :id

    # The status of this appointment.
    # @return [Status1Enum]
    attr_accessor :status

    # The date and time the appointment will start.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The date and time the appointment will end.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The appointment notes.
    # @return [String]
    attr_accessor :notes

    # Optional external key for api partners.
    # @return [String]
    attr_accessor :partner_external_id

    # Whether the staff member was requested specifically by the client.
    # @return [TrueClass | FalseClass]
    attr_accessor :staff_requested

    # The ID of the program this appointment belongs to.
    # @return [Integer]
    attr_accessor :program_id

    # The ID of the appointment waitlist.
    # @return [Integer]
    attr_accessor :waitlist_entry_id

    # The ID of the session type of this appointment.
    # @return [Integer]
    attr_accessor :session_type_id

    # The ID of the location where this appointment will take place.
    # @return [Integer]
    attr_accessor :location_id

    # The ID of the staff member instructing this appointment.
    # @return [Integer]
    attr_accessor :staff_id

    # The RSSID of the client booked for this appointment.
    # @return [String]
    attr_accessor :client_id

    # Whether this is the client's first appointment at the site.
    # @return [TrueClass | FalseClass]
    attr_accessor :first_appointment

    # The ID of the pass on the client's account that is paying for this
    # appointment.
    # @return [Integer]
    attr_accessor :client_service_id

    # The resources this appointment is using.
    # @return [Array[Resource]]
    attr_accessor :resources

    # The Add-Ons Associated with this appointment
    # @return [Array[AddOnSmall1]]
    attr_accessor :add_ons

    # Whether to add appointment to waitlist.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_waitlist

    # Online Description associated with the appointment
    # @return [String]
    attr_accessor :online_description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['gender_preference'] = 'GenderPreference'
      @_hash['duration'] = 'Duration'
      @_hash['provider_id'] = 'ProviderId'
      @_hash['id'] = 'Id'
      @_hash['status'] = 'Status'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['notes'] = 'Notes'
      @_hash['partner_external_id'] = 'PartnerExternalId'
      @_hash['staff_requested'] = 'StaffRequested'
      @_hash['program_id'] = 'ProgramId'
      @_hash['waitlist_entry_id'] = 'WaitlistEntryId'
      @_hash['session_type_id'] = 'SessionTypeId'
      @_hash['location_id'] = 'LocationId'
      @_hash['staff_id'] = 'StaffId'
      @_hash['client_id'] = 'ClientId'
      @_hash['first_appointment'] = 'FirstAppointment'
      @_hash['client_service_id'] = 'ClientServiceId'
      @_hash['resources'] = 'Resources'
      @_hash['add_ons'] = 'AddOns'
      @_hash['is_waitlist'] = 'IsWaitlist'
      @_hash['online_description'] = 'OnlineDescription'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        gender_preference
        duration
        provider_id
        id
        status
        start_date_time
        end_date_time
        notes
        partner_external_id
        staff_requested
        program_id
        waitlist_entry_id
        session_type_id
        location_id
        staff_id
        client_id
        first_appointment
        client_service_id
        resources
        add_ons
        is_waitlist
        online_description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(gender_preference = SKIP, duration = SKIP,
                   provider_id = SKIP, id = SKIP, status = SKIP,
                   start_date_time = SKIP, end_date_time = SKIP, notes = SKIP,
                   partner_external_id = SKIP, staff_requested = SKIP,
                   program_id = SKIP, waitlist_entry_id = SKIP,
                   session_type_id = SKIP, location_id = SKIP, staff_id = SKIP,
                   client_id = SKIP, first_appointment = SKIP,
                   client_service_id = SKIP, resources = SKIP, add_ons = SKIP,
                   is_waitlist = SKIP, online_description = SKIP)
      @gender_preference = gender_preference unless gender_preference == SKIP
      @duration = duration unless duration == SKIP
      @provider_id = provider_id unless provider_id == SKIP
      @id = id unless id == SKIP
      @status = status unless status == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @notes = notes unless notes == SKIP
      @partner_external_id = partner_external_id unless partner_external_id == SKIP
      @staff_requested = staff_requested unless staff_requested == SKIP
      @program_id = program_id unless program_id == SKIP
      @waitlist_entry_id = waitlist_entry_id unless waitlist_entry_id == SKIP
      @session_type_id = session_type_id unless session_type_id == SKIP
      @location_id = location_id unless location_id == SKIP
      @staff_id = staff_id unless staff_id == SKIP
      @client_id = client_id unless client_id == SKIP
      @first_appointment = first_appointment unless first_appointment == SKIP
      @client_service_id = client_service_id unless client_service_id == SKIP
      @resources = resources unless resources == SKIP
      @add_ons = add_ons unless add_ons == SKIP
      @is_waitlist = is_waitlist unless is_waitlist == SKIP
      @online_description = online_description unless online_description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      gender_preference =
        hash.key?('GenderPreference') ? hash['GenderPreference'] : SKIP
      duration = hash.key?('Duration') ? hash['Duration'] : SKIP
      provider_id = hash.key?('ProviderId') ? hash['ProviderId'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      partner_external_id =
        hash.key?('PartnerExternalId') ? hash['PartnerExternalId'] : SKIP
      staff_requested =
        hash.key?('StaffRequested') ? hash['StaffRequested'] : SKIP
      program_id = hash.key?('ProgramId') ? hash['ProgramId'] : SKIP
      waitlist_entry_id =
        hash.key?('WaitlistEntryId') ? hash['WaitlistEntryId'] : SKIP
      session_type_id =
        hash.key?('SessionTypeId') ? hash['SessionTypeId'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      first_appointment =
        hash.key?('FirstAppointment') ? hash['FirstAppointment'] : SKIP
      client_service_id =
        hash.key?('ClientServiceId') ? hash['ClientServiceId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      resources = nil
      unless hash['Resources'].nil?
        resources = []
        hash['Resources'].each do |structure|
          resources << (Resource.from_hash(structure) if structure)
        end
      end

      resources = SKIP unless hash.key?('Resources')
      # Parameter is an array, so we need to iterate through it
      add_ons = nil
      unless hash['AddOns'].nil?
        add_ons = []
        hash['AddOns'].each do |structure|
          add_ons << (AddOnSmall1.from_hash(structure) if structure)
        end
      end

      add_ons = SKIP unless hash.key?('AddOns')
      is_waitlist = hash.key?('IsWaitlist') ? hash['IsWaitlist'] : SKIP
      online_description =
        hash.key?('OnlineDescription') ? hash['OnlineDescription'] : SKIP

      # Create object from extracted values.
      Appointment1.new(gender_preference,
                       duration,
                       provider_id,
                       id,
                       status,
                       start_date_time,
                       end_date_time,
                       notes,
                       partner_external_id,
                       staff_requested,
                       program_id,
                       waitlist_entry_id,
                       session_type_id,
                       location_id,
                       staff_id,
                       client_id,
                       first_appointment,
                       client_service_id,
                       resources,
                       add_ons,
                       is_waitlist,
                       online_description)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end
  end
end
