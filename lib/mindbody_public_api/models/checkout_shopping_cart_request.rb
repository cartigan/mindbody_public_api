# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # CheckoutShoppingCartRequest Model.
  class CheckoutShoppingCartRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID of the shopping cart to be processed. You can use this value
    # to maintain a persistent cart. If you do not specify a cart ID, the
    # MINDBODY software generates one.
    # @return [String]
    attr_accessor :cart_id

    # The RSSID of the client making the purchase. A cart can be validated
    # without a client ID, but a client ID must be specified to complete a sale.
    # @return [String]
    attr_accessor :client_id

    # When `true`, indicates that the contents of the cart are validated, but
    # the transaction does not take place. You should use this parameter during
    # testing and when checking the calculated totals of the items in the
    # cart.<br />
    # When `false`, the transaction takes place and the database is affected.<br
    # />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # A list of the items in the cart.
    # @return [Array[CheckoutItemWrapper]]
    attr_accessor :items

    # When `true`, indicates that the cart is to be completed by a staff member
    # and is to take place at one of the business’ physical locations.<br />
    # When `false`, indicates that the cart is to be completed by a client from
    # the business’ online store.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :in_store

    # When `true`, indicates that the tax should be calculated.
    # When `false`, indicates that the tax should not be calculated.
    # Default: **true**
    # @return [TrueClass | FalseClass]
    attr_accessor :calculate_tax

    # Promotion code to be applied to the cart.
    # @return [String]
    attr_accessor :promotion_code

    # A list of payment information objects to be applied to payment against the
    # items in the cart.
    # @return [Array[CheckoutPaymentInfo]]
    attr_accessor :payments

    # When `true`, sends a purchase receipt email to the client. Note that all
    # appropriate permissions and settings must be enabled for the client to
    # receive an email.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # The location ID to be used for pulling business mode prices and taxes. If
    # no location ID is supplied, it defaults to the online store, represented
    # by a null value. 
    # Default: **null** (the online store)
    # @return [Integer]
    attr_accessor :location_id

    # The byte array data of the signature image.
    # @return [String]
    attr_accessor :image

    # The name of the signature image being uploaded.
    # @return [String]
    attr_accessor :image_file_name

    # When `true`, indicates that the consumer is present or otherwise able to
    # successfully negotiate an SCA challenge. It is not a good idea to have
    # this always be `false` as that could very likely lead to a bank declining
    # all transactions for the merchant. 
    # Defaults to `false`.
    # @return [TrueClass | FalseClass]
    attr_accessor :consumer_present

    # The URL consumer is redirected to if the bank requests SCA. This field is
    # only needed if ConsumerPresent is `true`
    # @return [String]
    attr_accessor :payment_authentication_callback_url

    # The list of TransactionIds provided with initial response containing SCA
    # Challenge URLs for ConsumerPresent transactions
    # @return [Array[Integer]]
    attr_accessor :transaction_ids

    # the flag to check billing post code is required or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_billing_postal_code_required

    # When `true`, enforces "sell at" location restrictions on the cart items.
    # When `false`, "sell at" location restrictions are not enforced.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :enforce_location_restrictions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cart_id'] = 'CartId'
      @_hash['client_id'] = 'ClientId'
      @_hash['test'] = 'Test'
      @_hash['items'] = 'Items'
      @_hash['in_store'] = 'InStore'
      @_hash['calculate_tax'] = 'CalculateTax'
      @_hash['promotion_code'] = 'PromotionCode'
      @_hash['payments'] = 'Payments'
      @_hash['send_email'] = 'SendEmail'
      @_hash['location_id'] = 'LocationId'
      @_hash['image'] = 'Image'
      @_hash['image_file_name'] = 'ImageFileName'
      @_hash['consumer_present'] = 'ConsumerPresent'
      @_hash['payment_authentication_callback_url'] =
        'PaymentAuthenticationCallbackUrl'
      @_hash['transaction_ids'] = 'TransactionIds'
      @_hash['is_billing_postal_code_required'] =
        'IsBillingPostalCodeRequired'
      @_hash['enforce_location_restrictions'] = 'EnforceLocationRestrictions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        cart_id
        test
        in_store
        calculate_tax
        promotion_code
        send_email
        location_id
        image
        image_file_name
        consumer_present
        payment_authentication_callback_url
        transaction_ids
        is_billing_postal_code_required
        enforce_location_restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, items = nil, payments = nil, cart_id = SKIP,
                   test = SKIP, in_store = SKIP, calculate_tax = SKIP,
                   promotion_code = SKIP, send_email = SKIP, location_id = SKIP,
                   image = SKIP, image_file_name = SKIP,
                   consumer_present = SKIP,
                   payment_authentication_callback_url = SKIP,
                   transaction_ids = SKIP,
                   is_billing_postal_code_required = SKIP,
                   enforce_location_restrictions = SKIP)
      @cart_id = cart_id unless cart_id == SKIP
      @client_id = client_id
      @test = test unless test == SKIP
      @items = items
      @in_store = in_store unless in_store == SKIP
      @calculate_tax = calculate_tax unless calculate_tax == SKIP
      @promotion_code = promotion_code unless promotion_code == SKIP
      @payments = payments
      @send_email = send_email unless send_email == SKIP
      @location_id = location_id unless location_id == SKIP
      @image = image unless image == SKIP
      @image_file_name = image_file_name unless image_file_name == SKIP
      @consumer_present = consumer_present unless consumer_present == SKIP
      unless payment_authentication_callback_url == SKIP
        @payment_authentication_callback_url =
          payment_authentication_callback_url
      end
      @transaction_ids = transaction_ids unless transaction_ids == SKIP
      unless is_billing_postal_code_required == SKIP
        @is_billing_postal_code_required =
          is_billing_postal_code_required
      end
      unless enforce_location_restrictions == SKIP
        @enforce_location_restrictions =
          enforce_location_restrictions
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      # Parameter is an array, so we need to iterate through it
      items = nil
      unless hash['Items'].nil?
        items = []
        hash['Items'].each do |structure|
          items << (CheckoutItemWrapper.from_hash(structure) if structure)
        end
      end

      items = nil unless hash.key?('Items')
      # Parameter is an array, so we need to iterate through it
      payments = nil
      unless hash['Payments'].nil?
        payments = []
        hash['Payments'].each do |structure|
          payments << (CheckoutPaymentInfo.from_hash(structure) if structure)
        end
      end

      payments = nil unless hash.key?('Payments')
      cart_id = hash.key?('CartId') ? hash['CartId'] : SKIP
      test = hash.key?('Test') ? hash['Test'] : SKIP
      in_store = hash.key?('InStore') ? hash['InStore'] : SKIP
      calculate_tax = hash.key?('CalculateTax') ? hash['CalculateTax'] : SKIP
      promotion_code = hash.key?('PromotionCode') ? hash['PromotionCode'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      image = hash.key?('Image') ? hash['Image'] : SKIP
      image_file_name =
        hash.key?('ImageFileName') ? hash['ImageFileName'] : SKIP
      consumer_present =
        hash.key?('ConsumerPresent') ? hash['ConsumerPresent'] : SKIP
      payment_authentication_callback_url =
        hash.key?('PaymentAuthenticationCallbackUrl') ? hash['PaymentAuthenticationCallbackUrl'] : SKIP
      transaction_ids =
        hash.key?('TransactionIds') ? hash['TransactionIds'] : SKIP
      is_billing_postal_code_required =
        hash.key?('IsBillingPostalCodeRequired') ? hash['IsBillingPostalCodeRequired'] : SKIP
      enforce_location_restrictions =
        hash.key?('EnforceLocationRestrictions') ? hash['EnforceLocationRestrictions'] : SKIP

      # Create object from extracted values.
      CheckoutShoppingCartRequest.new(client_id,
                                      items,
                                      payments,
                                      cart_id,
                                      test,
                                      in_store,
                                      calculate_tax,
                                      promotion_code,
                                      send_email,
                                      location_id,
                                      image,
                                      image_file_name,
                                      consumer_present,
                                      payment_authentication_callback_url,
                                      transaction_ids,
                                      is_billing_postal_code_required,
                                      enforce_location_restrictions)
    end
  end
end
