# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Transaction Model.
  class Transaction < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The transaction ID.
    # @return [Integer]
    attr_accessor :transaction_id

    # The sale ID.
    # @return [Integer]
    attr_accessor :sale_id

    # The ID of the client who made the purchase.
    # @return [Integer]
    attr_accessor :client_id

    # The amount charged on the card
    # @return [Float]
    attr_accessor :amount

    # Whether it is settled or not
    # @return [TrueClass | FalseClass]
    attr_accessor :settled

    # Status of the transaction
    # @return [String]
    attr_accessor :status

    # Time of card swiped
    # @return [DateTime]
    attr_accessor :transaction_time

    # Time of card authorized
    # @return [DateTime]
    attr_accessor :auth_time

    # The ID of the location where the sale takes place.
    # @return [Integer]
    attr_accessor :location_id

    # Merchant ID of the studio
    # @return [String]
    attr_accessor :merchant_id

    # Terminal ID used for payment. Not applicable for CNP/Bank
    # @return [String]
    attr_accessor :terminal_id

    # Expiry month of the card
    # @return [String]
    attr_accessor :card_expiration_month

    # Expiry year of the card
    # @return [String]
    attr_accessor :card_expiration_year

    # Last 4 digits of CC
    # @return [String]
    attr_accessor :cc_last_four

    # Type of the card
    # @return [String]
    attr_accessor :card_type

    # Whether card is swiped or not
    # @return [TrueClass | FalseClass]
    attr_accessor :cc_swiped

    # Customerâ€™s ACH last 4 digits
    # @return [String]
    attr_accessor :ach_last_four

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['transaction_id'] = 'TransactionId'
      @_hash['sale_id'] = 'SaleId'
      @_hash['client_id'] = 'ClientId'
      @_hash['amount'] = 'Amount'
      @_hash['settled'] = 'Settled'
      @_hash['status'] = 'Status'
      @_hash['transaction_time'] = 'TransactionTime'
      @_hash['auth_time'] = 'AuthTime'
      @_hash['location_id'] = 'LocationId'
      @_hash['merchant_id'] = 'MerchantId'
      @_hash['terminal_id'] = 'TerminalId'
      @_hash['card_expiration_month'] = 'CardExpirationMonth'
      @_hash['card_expiration_year'] = 'CardExpirationYear'
      @_hash['cc_last_four'] = 'CCLastFour'
      @_hash['card_type'] = 'CardType'
      @_hash['cc_swiped'] = 'CCSwiped'
      @_hash['ach_last_four'] = 'ACHLastFour'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        transaction_id
        sale_id
        client_id
        amount
        settled
        status
        transaction_time
        auth_time
        location_id
        merchant_id
        terminal_id
        card_expiration_month
        card_expiration_year
        cc_last_four
        card_type
        cc_swiped
        ach_last_four
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(transaction_id = SKIP, sale_id = SKIP, client_id = SKIP,
                   amount = SKIP, settled = SKIP, status = SKIP,
                   transaction_time = SKIP, auth_time = SKIP,
                   location_id = SKIP, merchant_id = SKIP, terminal_id = SKIP,
                   card_expiration_month = SKIP, card_expiration_year = SKIP,
                   cc_last_four = SKIP, card_type = SKIP, cc_swiped = SKIP,
                   ach_last_four = SKIP)
      @transaction_id = transaction_id unless transaction_id == SKIP
      @sale_id = sale_id unless sale_id == SKIP
      @client_id = client_id unless client_id == SKIP
      @amount = amount unless amount == SKIP
      @settled = settled unless settled == SKIP
      @status = status unless status == SKIP
      @transaction_time = transaction_time unless transaction_time == SKIP
      @auth_time = auth_time unless auth_time == SKIP
      @location_id = location_id unless location_id == SKIP
      @merchant_id = merchant_id unless merchant_id == SKIP
      @terminal_id = terminal_id unless terminal_id == SKIP
      @card_expiration_month = card_expiration_month unless card_expiration_month == SKIP
      @card_expiration_year = card_expiration_year unless card_expiration_year == SKIP
      @cc_last_four = cc_last_four unless cc_last_four == SKIP
      @card_type = card_type unless card_type == SKIP
      @cc_swiped = cc_swiped unless cc_swiped == SKIP
      @ach_last_four = ach_last_four unless ach_last_four == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      transaction_id = hash.key?('TransactionId') ? hash['TransactionId'] : SKIP
      sale_id = hash.key?('SaleId') ? hash['SaleId'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      amount = hash.key?('Amount') ? hash['Amount'] : SKIP
      settled = hash.key?('Settled') ? hash['Settled'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      transaction_time = if hash.key?('TransactionTime')
                           (DateTimeHelper.from_rfc3339(hash['TransactionTime']) if hash['TransactionTime'])
                         else
                           SKIP
                         end
      auth_time = if hash.key?('AuthTime')
                    (DateTimeHelper.from_rfc3339(hash['AuthTime']) if hash['AuthTime'])
                  else
                    SKIP
                  end
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      merchant_id = hash.key?('MerchantId') ? hash['MerchantId'] : SKIP
      terminal_id = hash.key?('TerminalId') ? hash['TerminalId'] : SKIP
      card_expiration_month =
        hash.key?('CardExpirationMonth') ? hash['CardExpirationMonth'] : SKIP
      card_expiration_year =
        hash.key?('CardExpirationYear') ? hash['CardExpirationYear'] : SKIP
      cc_last_four = hash.key?('CCLastFour') ? hash['CCLastFour'] : SKIP
      card_type = hash.key?('CardType') ? hash['CardType'] : SKIP
      cc_swiped = hash.key?('CCSwiped') ? hash['CCSwiped'] : SKIP
      ach_last_four = hash.key?('ACHLastFour') ? hash['ACHLastFour'] : SKIP

      # Create object from extracted values.
      Transaction.new(transaction_id,
                      sale_id,
                      client_id,
                      amount,
                      settled,
                      status,
                      transaction_time,
                      auth_time,
                      location_id,
                      merchant_id,
                      terminal_id,
                      card_expiration_month,
                      card_expiration_year,
                      cc_last_four,
                      card_type,
                      cc_swiped,
                      ach_last_four)
    end

    def to_custom_transaction_time
      DateTimeHelper.to_rfc3339(transaction_time)
    end

    def to_custom_auth_time
      DateTimeHelper.to_rfc3339(auth_time)
    end
  end
end
