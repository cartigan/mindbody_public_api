# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # The booking window for registration
  class BookingWindow < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Date and time that the booking window opens; that is, the first day of
    # sales.
    # @return [DateTime]
    attr_accessor :start_date_time

    # Date and time that the booking window closes; that is, the last day of
    # sales.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The time that the booking window opens; that is, the time that the store
    # opens.
    # @return [DateTime]
    attr_accessor :daily_start_time

    # The time that the booking window closes; that is, the time that the store
    # closes.
    # @return [DateTime]
    attr_accessor :daily_end_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['daily_start_time'] = 'DailyStartTime'
      @_hash['daily_end_time'] = 'DailyEndTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        start_date_time
        end_date_time
        daily_start_time
        daily_end_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(start_date_time = SKIP, end_date_time = SKIP,
                   daily_start_time = SKIP, daily_end_time = SKIP)
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @daily_start_time = daily_start_time unless daily_start_time == SKIP
      @daily_end_time = daily_end_time unless daily_end_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      daily_start_time = if hash.key?('DailyStartTime')
                           (DateTimeHelper.from_rfc3339(hash['DailyStartTime']) if hash['DailyStartTime'])
                         else
                           SKIP
                         end
      daily_end_time = if hash.key?('DailyEndTime')
                         (DateTimeHelper.from_rfc3339(hash['DailyEndTime']) if hash['DailyEndTime'])
                       else
                         SKIP
                       end

      # Create object from extracted values.
      BookingWindow.new(start_date_time,
                        end_date_time,
                        daily_start_time,
                        daily_end_time)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end

    def to_custom_daily_start_time
      DateTimeHelper.to_rfc3339(daily_start_time)
    end

    def to_custom_daily_end_time
      DateTimeHelper.to_rfc3339(daily_end_time)
    end
  end
end
