# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # TimeCardEvent Model.
  class TimeCardEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the requested staff member.
    # @return [Integer]
    attr_accessor :staff_id

    # The staff memberâ€™s job title.
    # @return [String]
    attr_accessor :task

    # The time that the staff member started the job task.
    # @return [DateTime]
    attr_accessor :time_in

    # The time that the staff member stopped doing the job task.
    # @return [DateTime]
    attr_accessor :time_out

    # The number of hours on this time card, rounded to the nearest fourth
    # decimal place.
    # @return [Float]
    attr_accessor :hours

    # The hourly rate the business pays this staff for this `Task`.
    # @return [Float]
    attr_accessor :hourly_rate

    # The total amount earned by the staff member for this time card entry.
    # @return [Float]
    attr_accessor :earnings

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['staff_id'] = 'StaffId'
      @_hash['task'] = 'Task'
      @_hash['time_in'] = 'TimeIn'
      @_hash['time_out'] = 'TimeOut'
      @_hash['hours'] = 'Hours'
      @_hash['hourly_rate'] = 'HourlyRate'
      @_hash['earnings'] = 'Earnings'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        staff_id
        task
        time_in
        time_out
        hours
        hourly_rate
        earnings
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(staff_id = SKIP, task = SKIP, time_in = SKIP,
                   time_out = SKIP, hours = SKIP, hourly_rate = SKIP,
                   earnings = SKIP)
      @staff_id = staff_id unless staff_id == SKIP
      @task = task unless task == SKIP
      @time_in = time_in unless time_in == SKIP
      @time_out = time_out unless time_out == SKIP
      @hours = hours unless hours == SKIP
      @hourly_rate = hourly_rate unless hourly_rate == SKIP
      @earnings = earnings unless earnings == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      task = hash.key?('Task') ? hash['Task'] : SKIP
      time_in = if hash.key?('TimeIn')
                  (DateTimeHelper.from_rfc3339(hash['TimeIn']) if hash['TimeIn'])
                else
                  SKIP
                end
      time_out = if hash.key?('TimeOut')
                   (DateTimeHelper.from_rfc3339(hash['TimeOut']) if hash['TimeOut'])
                 else
                   SKIP
                 end
      hours = hash.key?('Hours') ? hash['Hours'] : SKIP
      hourly_rate = hash.key?('HourlyRate') ? hash['HourlyRate'] : SKIP
      earnings = hash.key?('Earnings') ? hash['Earnings'] : SKIP

      # Create object from extracted values.
      TimeCardEvent.new(staff_id,
                        task,
                        time_in,
                        time_out,
                        hours,
                        hourly_rate,
                        earnings)
    end

    def to_custom_time_in
      DateTimeHelper.to_rfc3339(time_in)
    end

    def to_custom_time_out
      DateTimeHelper.to_rfc3339(time_out)
    end
  end
end
