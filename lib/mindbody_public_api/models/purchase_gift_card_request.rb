# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # PurchaseGiftCardRequest Model.
  class PurchaseGiftCardRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, allows you to test the request without affecting the
    # database.<br />
    # When `false`, the request is carried out and the database is affected.
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # The ID of the location where the gift card is being sold.
    # @return [Integer]
    attr_accessor :location_id

    # The ID of the layout used for the gift card’s image.
    # @return [Integer]
    attr_accessor :layout_id

    # The RSSID of the client who is purchasing the gift card.
    # @return [String]
    attr_accessor :purchaser_client_id

    # The product ID of the gift card being purchased.
    # @return [Integer]
    attr_accessor :gift_card_id

    # When `true`, indicates that a purchase receipt email should be sent to the
    # purchasing client, if all settings are correctly configured.<br />
    # When `false`, no email is sent to the purchaser.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email_receipt

    # The email address to send the gift card image to. This parameter is
    # required if the `LayoutId` is not 0.<br />
    # Maximum length: **100**
    # @return [String]
    attr_accessor :recipient_email

    # The name of the person who is to receive the gift card. This parameter is
    # required if the `LayoutId` is not 0.<br />
    # Maximum length: **20**
    # @return [String]
    attr_accessor :recipient_name

    # The text to use as the title of the gift card, for example: Happy
    # Birthday, Maria! This parameter is required if the `LayoutId` is not 0.<br
    # />
    # Maximum length: **20**
    # @return [String]
    attr_accessor :title

    # A personal message to include in the gift card.<br />
    # Maximum length: **300**
    # @return [String]
    attr_accessor :gift_message

    # The date that the gift card’s image is to be delivered to the recipient.
    # This parameter cannot be set to a date in the past. This parameter is
    # required if the `LayoutId` is not 0.
    # Default: **today**
    # Minimum: **today**
    # @return [DateTime]
    attr_accessor :delivery_date

    # The date that the gift card’s image is to be delivered to the recipient.
    # This parameter cannot be set to a date in the past. This parameter is
    # required if the `LayoutId` is not 0.
    # Default: **today**
    # Minimum: **today**
    # @return [CheckoutPaymentInfo]
    attr_accessor :payment_info

    # The ID of the staff member who is to be marked as the sales rep for this
    # gift card purchase.
    # @return [Integer]
    attr_accessor :sales_rep_id

    # When `true`, indicates that the consumer is available to address any SCA
    # challenge issued by the bank.  EU Only.<br /> 
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :consumer_present

    # This is the Url the consumer will be redirected back to after completion
    # of the Banks SCA challenge.
    # @return [String]
    attr_accessor :payment_authentication_callback_url

    # Sets the barcode ID of the giftcard. When not provided, a barcode ID is
    # automatically generated.<br />
    # If a giftcard with the given barcode ID already exists and the site
    # supports reloadable giftcards, the existing giftcard is reloaded<br />
    # Maximum length: **100**
    # @return [String]
    attr_accessor :barcode_id

    # Overrides the name that would otherwise be populated by specifying
    # PurchaserClientId.<br />
    # Maximum length: **20**
    # @return [String]
    attr_accessor :sender_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['test'] = 'Test'
      @_hash['location_id'] = 'LocationId'
      @_hash['layout_id'] = 'LayoutId'
      @_hash['purchaser_client_id'] = 'PurchaserClientId'
      @_hash['gift_card_id'] = 'GiftCardId'
      @_hash['send_email_receipt'] = 'SendEmailReceipt'
      @_hash['recipient_email'] = 'RecipientEmail'
      @_hash['recipient_name'] = 'RecipientName'
      @_hash['title'] = 'Title'
      @_hash['gift_message'] = 'GiftMessage'
      @_hash['delivery_date'] = 'DeliveryDate'
      @_hash['payment_info'] = 'PaymentInfo'
      @_hash['sales_rep_id'] = 'SalesRepId'
      @_hash['consumer_present'] = 'ConsumerPresent'
      @_hash['payment_authentication_callback_url'] =
        'PaymentAuthenticationCallbackUrl'
      @_hash['barcode_id'] = 'BarcodeId'
      @_hash['sender_name'] = 'SenderName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        layout_id
        send_email_receipt
        recipient_email
        recipient_name
        title
        gift_message
        delivery_date
        payment_info
        sales_rep_id
        consumer_present
        payment_authentication_callback_url
        barcode_id
        sender_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(location_id = nil, purchaser_client_id = nil,
                   gift_card_id = nil, test = SKIP, layout_id = SKIP,
                   send_email_receipt = SKIP, recipient_email = SKIP,
                   recipient_name = SKIP, title = SKIP, gift_message = SKIP,
                   delivery_date = SKIP, payment_info = SKIP,
                   sales_rep_id = SKIP, consumer_present = SKIP,
                   payment_authentication_callback_url = SKIP,
                   barcode_id = SKIP, sender_name = SKIP)
      @test = test unless test == SKIP
      @location_id = location_id
      @layout_id = layout_id unless layout_id == SKIP
      @purchaser_client_id = purchaser_client_id
      @gift_card_id = gift_card_id
      @send_email_receipt = send_email_receipt unless send_email_receipt == SKIP
      @recipient_email = recipient_email unless recipient_email == SKIP
      @recipient_name = recipient_name unless recipient_name == SKIP
      @title = title unless title == SKIP
      @gift_message = gift_message unless gift_message == SKIP
      @delivery_date = delivery_date unless delivery_date == SKIP
      @payment_info = payment_info unless payment_info == SKIP
      @sales_rep_id = sales_rep_id unless sales_rep_id == SKIP
      @consumer_present = consumer_present unless consumer_present == SKIP
      unless payment_authentication_callback_url == SKIP
        @payment_authentication_callback_url =
          payment_authentication_callback_url
      end
      @barcode_id = barcode_id unless barcode_id == SKIP
      @sender_name = sender_name unless sender_name == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      location_id = hash.key?('LocationId') ? hash['LocationId'] : nil
      purchaser_client_id =
        hash.key?('PurchaserClientId') ? hash['PurchaserClientId'] : nil
      gift_card_id = hash.key?('GiftCardId') ? hash['GiftCardId'] : nil
      test = hash.key?('Test') ? hash['Test'] : SKIP
      layout_id = hash.key?('LayoutId') ? hash['LayoutId'] : SKIP
      send_email_receipt =
        hash.key?('SendEmailReceipt') ? hash['SendEmailReceipt'] : SKIP
      recipient_email =
        hash.key?('RecipientEmail') ? hash['RecipientEmail'] : SKIP
      recipient_name = hash.key?('RecipientName') ? hash['RecipientName'] : SKIP
      title = hash.key?('Title') ? hash['Title'] : SKIP
      gift_message = hash.key?('GiftMessage') ? hash['GiftMessage'] : SKIP
      delivery_date = if hash.key?('DeliveryDate')
                        (DateTimeHelper.from_rfc3339(hash['DeliveryDate']) if hash['DeliveryDate'])
                      else
                        SKIP
                      end
      payment_info = CheckoutPaymentInfo.from_hash(hash['PaymentInfo']) if hash['PaymentInfo']
      sales_rep_id = hash.key?('SalesRepId') ? hash['SalesRepId'] : SKIP
      consumer_present =
        hash.key?('ConsumerPresent') ? hash['ConsumerPresent'] : SKIP
      payment_authentication_callback_url =
        hash.key?('PaymentAuthenticationCallbackUrl') ? hash['PaymentAuthenticationCallbackUrl'] : SKIP
      barcode_id = hash.key?('BarcodeId') ? hash['BarcodeId'] : SKIP
      sender_name = hash.key?('SenderName') ? hash['SenderName'] : SKIP

      # Create object from extracted values.
      PurchaseGiftCardRequest.new(location_id,
                                  purchaser_client_id,
                                  gift_card_id,
                                  test,
                                  layout_id,
                                  send_email_receipt,
                                  recipient_email,
                                  recipient_name,
                                  title,
                                  gift_message,
                                  delivery_date,
                                  payment_info,
                                  sales_rep_id,
                                  consumer_present,
                                  payment_authentication_callback_url,
                                  barcode_id,
                                  sender_name)
    end

    def to_custom_delivery_date
      DateTimeHelper.to_rfc3339(delivery_date)
    end
  end
end
