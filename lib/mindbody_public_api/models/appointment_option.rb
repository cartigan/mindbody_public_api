# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # An appointment option name/value pair
  class AppointmentOption < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name displayed for this appointment option.
    # @return [String]
    attr_accessor :display_name

    # The name given to this option.
    # @return [String]
    attr_accessor :name

    # The value of the option.
    # @return [String]
    attr_accessor :value

    # The data type of the option value.
    # @return [String]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['display_name'] = 'DisplayName'
      @_hash['name'] = 'Name'
      @_hash['value'] = 'Value'
      @_hash['type'] = 'Type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        display_name
        name
        value
        type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(display_name = SKIP, name = SKIP, value = SKIP, type = SKIP)
      @display_name = display_name unless display_name == SKIP
      @name = name unless name == SKIP
      @value = value unless value == SKIP
      @type = type unless type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      display_name = hash.key?('DisplayName') ? hash['DisplayName'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      value = hash.key?('Value') ? hash['Value'] : SKIP
      type = hash.key?('Type') ? hash['Type'] : SKIP

      # Create object from extracted values.
      AppointmentOption.new(display_name,
                            name,
                            value,
                            type)
    end
  end
end
