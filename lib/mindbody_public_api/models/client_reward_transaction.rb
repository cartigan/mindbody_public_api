# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Contains information about the transaction details.
  class ClientRewardTransaction < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time when the points were earned or redeemed in the site
    # local time zone.
    # @return [DateTime]
    attr_accessor :action_date_time

    # Indicates if rewards were earned or redeemed.
    # @return [Action9Enum]
    attr_accessor :action

    # The source of the reward transaction.
    # @return [String]
    attr_accessor :source

    # The unique identifier in the MINDBODY system for the **Source**.
    # @return [Integer]
    attr_accessor :source_id

    # The date and time when earned points expire. This is calculated based on
    # site and client rewards settings. This date will be in the site local time
    # zone and may be **null**.
    # @return [DateTime]
    attr_accessor :expiration_date_time

    # The amount of points the client earned or redeemed.
    # @return [Integer]
    attr_accessor :points

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['action_date_time'] = 'ActionDateTime'
      @_hash['action'] = 'Action'
      @_hash['source'] = 'Source'
      @_hash['source_id'] = 'SourceID'
      @_hash['expiration_date_time'] = 'ExpirationDateTime'
      @_hash['points'] = 'Points'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        action_date_time
        action
        source
        source_id
        expiration_date_time
        points
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(action_date_time = SKIP, action = SKIP, source = SKIP,
                   source_id = SKIP, expiration_date_time = SKIP, points = SKIP)
      @action_date_time = action_date_time unless action_date_time == SKIP
      @action = action unless action == SKIP
      @source = source unless source == SKIP
      @source_id = source_id unless source_id == SKIP
      @expiration_date_time = expiration_date_time unless expiration_date_time == SKIP
      @points = points unless points == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      action_date_time = if hash.key?('ActionDateTime')
                           (DateTimeHelper.from_rfc3339(hash['ActionDateTime']) if hash['ActionDateTime'])
                         else
                           SKIP
                         end
      action = hash.key?('Action') ? hash['Action'] : SKIP
      source = hash.key?('Source') ? hash['Source'] : SKIP
      source_id = hash.key?('SourceID') ? hash['SourceID'] : SKIP
      expiration_date_time = if hash.key?('ExpirationDateTime')
                               (DateTimeHelper.from_rfc3339(hash['ExpirationDateTime']) if hash['ExpirationDateTime'])
                             else
                               SKIP
                             end
      points = hash.key?('Points') ? hash['Points'] : SKIP

      # Create object from extracted values.
      ClientRewardTransaction.new(action_date_time,
                                  action,
                                  source,
                                  source_id,
                                  expiration_date_time,
                                  points)
    end

    def to_custom_action_date_time
      DateTimeHelper.to_rfc3339(action_date_time)
    end

    def to_custom_expiration_date_time
      DateTimeHelper.to_rfc3339(expiration_date_time)
    end
  end
end
