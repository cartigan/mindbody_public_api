# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # A contact log.
  class ContactLog < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The contact log’s ID.
    # @return [Integer]
    attr_accessor :id

    # The contact log’s body text.
    # @return [String]
    attr_accessor :text

    # The local date and time when the contact log was created.
    # @return [DateTime]
    attr_accessor :created_date_time

    # The date by which the assigned staff member should close or follow up on
    # this contact log.
    # @return [DateTime]
    attr_accessor :followup_by_date

    # The method by which the client wants to be contacted.
    # @return [String]
    attr_accessor :contact_method

    # The name of the client to contact.
    # @return [String]
    attr_accessor :contact_name

    # The Client.
    # @return [Client]
    attr_accessor :client

    # The Staff
    # @return [Staff]
    attr_accessor :created_by

    # The Staff
    # @return [Staff]
    attr_accessor :assigned_to

    # Information about the comment.
    # @return [Array[ContactLogComment]]
    attr_accessor :comments

    # Information about the type of contact log.
    # @return [Array[ContactLogType]]
    attr_accessor :types

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['text'] = 'Text'
      @_hash['created_date_time'] = 'CreatedDateTime'
      @_hash['followup_by_date'] = 'FollowupByDate'
      @_hash['contact_method'] = 'ContactMethod'
      @_hash['contact_name'] = 'ContactName'
      @_hash['client'] = 'Client'
      @_hash['created_by'] = 'CreatedBy'
      @_hash['assigned_to'] = 'AssignedTo'
      @_hash['comments'] = 'Comments'
      @_hash['types'] = 'Types'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        text
        created_date_time
        followup_by_date
        contact_method
        contact_name
        client
        created_by
        assigned_to
        comments
        types
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, text = SKIP, created_date_time = SKIP,
                   followup_by_date = SKIP, contact_method = SKIP,
                   contact_name = SKIP, client = SKIP, created_by = SKIP,
                   assigned_to = SKIP, comments = SKIP, types = SKIP)
      @id = id unless id == SKIP
      @text = text unless text == SKIP
      @created_date_time = created_date_time unless created_date_time == SKIP
      @followup_by_date = followup_by_date unless followup_by_date == SKIP
      @contact_method = contact_method unless contact_method == SKIP
      @contact_name = contact_name unless contact_name == SKIP
      @client = client unless client == SKIP
      @created_by = created_by unless created_by == SKIP
      @assigned_to = assigned_to unless assigned_to == SKIP
      @comments = comments unless comments == SKIP
      @types = types unless types == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      text = hash.key?('Text') ? hash['Text'] : SKIP
      created_date_time = if hash.key?('CreatedDateTime')
                            (DateTimeHelper.from_rfc3339(hash['CreatedDateTime']) if hash['CreatedDateTime'])
                          else
                            SKIP
                          end
      followup_by_date = if hash.key?('FollowupByDate')
                           (DateTimeHelper.from_rfc3339(hash['FollowupByDate']) if hash['FollowupByDate'])
                         else
                           SKIP
                         end
      contact_method = hash.key?('ContactMethod') ? hash['ContactMethod'] : SKIP
      contact_name = hash.key?('ContactName') ? hash['ContactName'] : SKIP
      client = Client.from_hash(hash['Client']) if hash['Client']
      created_by = Staff.from_hash(hash['CreatedBy']) if hash['CreatedBy']
      assigned_to = Staff.from_hash(hash['AssignedTo']) if hash['AssignedTo']
      # Parameter is an array, so we need to iterate through it
      comments = nil
      unless hash['Comments'].nil?
        comments = []
        hash['Comments'].each do |structure|
          comments << (ContactLogComment.from_hash(structure) if structure)
        end
      end

      comments = SKIP unless hash.key?('Comments')
      # Parameter is an array, so we need to iterate through it
      types = nil
      unless hash['Types'].nil?
        types = []
        hash['Types'].each do |structure|
          types << (ContactLogType.from_hash(structure) if structure)
        end
      end

      types = SKIP unless hash.key?('Types')

      # Create object from extracted values.
      ContactLog.new(id,
                     text,
                     created_date_time,
                     followup_by_date,
                     contact_method,
                     contact_name,
                     client,
                     created_by,
                     assigned_to,
                     comments,
                     types)
    end

    def to_custom_created_date_time
      DateTimeHelper.to_rfc3339(created_date_time)
    end

    def to_custom_followup_by_date
      DateTimeHelper.to_rfc3339(followup_by_date)
    end
  end
end
