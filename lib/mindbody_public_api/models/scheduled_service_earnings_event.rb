# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # ScheduledServiceEarningsEvent Model.
  class ScheduledServiceEarningsEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the staff member who taught the class.
    # @return [Integer]
    attr_accessor :staff_id

    # The class' ID.
    # @return [Integer]
    attr_accessor :scheduled_service_id

    # The type of the scheduled service; i.e, a class, appointment, or
    # enrollment.
    # @return [ScheduledServiceTypeEnum]
    attr_accessor :scheduled_service_type

    # The total monetary amount the staff is to be paid for this class.
    # @return [Float]
    attr_accessor :earnings

    # The total monetary amount the staff is to be paid for this class.
    # @return [DateTime]
    attr_accessor :date_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['staff_id'] = 'StaffId'
      @_hash['scheduled_service_id'] = 'ScheduledServiceId'
      @_hash['scheduled_service_type'] = 'ScheduledServiceType'
      @_hash['earnings'] = 'Earnings'
      @_hash['date_time'] = 'DateTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        staff_id
        scheduled_service_id
        scheduled_service_type
        earnings
        date_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(staff_id = SKIP, scheduled_service_id = SKIP,
                   scheduled_service_type = SKIP, earnings = SKIP,
                   date_time = SKIP)
      @staff_id = staff_id unless staff_id == SKIP
      @scheduled_service_id = scheduled_service_id unless scheduled_service_id == SKIP
      @scheduled_service_type = scheduled_service_type unless scheduled_service_type == SKIP
      @earnings = earnings unless earnings == SKIP
      @date_time = date_time unless date_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      scheduled_service_id =
        hash.key?('ScheduledServiceId') ? hash['ScheduledServiceId'] : SKIP
      scheduled_service_type =
        hash.key?('ScheduledServiceType') ? hash['ScheduledServiceType'] : SKIP
      earnings = hash.key?('Earnings') ? hash['Earnings'] : SKIP
      date_time = if hash.key?('DateTime')
                    (DateTimeHelper.from_rfc3339(hash['DateTime']) if hash['DateTime'])
                  else
                    SKIP
                  end

      # Create object from extracted values.
      ScheduledServiceEarningsEvent.new(staff_id,
                                        scheduled_service_id,
                                        scheduled_service_type,
                                        earnings,
                                        date_time)
    end

    def to_custom_date_time
      DateTimeHelper.to_rfc3339(date_time)
    end
  end
end
