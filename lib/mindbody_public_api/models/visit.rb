# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Represents a specific visit to a class
  class Visit < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The appointment’s ID.
    # @return [Integer]
    attr_accessor :appointment_id

    # The gender of staff member with whom the client prefers to book
    # appointments. 
    # Possible values are:
    # * Female - Indicates that the client prefers to book appointments with
    # female staff members.
    # * Male - Indicates that the client prefers to book appointments with male
    # staff members.
    # * None - Indicates that the client does not have a staff member gender
    # preference.
    # @return [AppointmentGenderPreferenceEnum]
    attr_accessor :appointment_gender_preference

    # The status of the appointment.
    # @return [AppointmentStatusEnum]
    attr_accessor :appointment_status

    # The class ID that was used to retrieve the visits.
    # @return [Integer]
    attr_accessor :class_id

    # The ID of the client associated with the visit.
    # @return [String]
    attr_accessor :client_id

    # PhotoUrl for the client
    # @return [String]
    attr_accessor :client_photo_url

    # The unique ID of the client associated with the visit.
    # @return [Integer]
    attr_accessor :client_unique_id

    # The time this class is scheduled to start.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The date and time the visit ends. The Public API returns UTC dates and
    # times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST)
    # appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC.
    # Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The ID of the visit.
    # @return [Integer]
    attr_accessor :id

    # When included in the request, only records modified on or after the
    # specified `LastModifiedDate` are included in the response. The Public API
    # returns UTC dates and times. For example, a class that occurs on June
    # 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST
    # is five hours behind UTC. Date time pairs always return in the format
    # YYYY-MM-DDTHH:mm:ssZ.
    # @return [DateTime]
    attr_accessor :last_modified_date_time

    # When `true`, indicates that the class has been `LateCancelled`.<br />
    # When `false`, indicates that the class has not been `LateCancelled`.
    # @return [TrueClass | FalseClass]
    attr_accessor :late_cancelled

    # The ID of the business where the visit is booked.
    # @return [Integer]
    attr_accessor :site_id

    # The ID of the location where the visit took place or is to take place.
    # @return [Integer]
    attr_accessor :location_id

    # When `true`, the client can make up this session and a session is not
    # deducted from the pricing option that was used to sign the client into the
    # enrollment. When the client has the make-up session, a session is
    # automatically removed from a pricing option that matches the service
    # category of the enrollment and is within the same date range of the missed
    # session.<br />
    # When `false`, the client cannot make up this session. See [Enrollments:
    # Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollmen
    # ts-Make-ups?language=en_US) for more information.
    # @return [TrueClass | FalseClass]
    attr_accessor :make_up

    # The name of the class.
    # @return [String]
    attr_accessor :name

    # The unique ID assigned to this pricing option when it was purchased by the
    # client.
    # @return [Integer]
    attr_accessor :service_id

    # The name of the pricing option at the site where it was purchased.
    # @return [String]
    attr_accessor :service_name

    # A service that is on a client's account.
    # @return [ClientService]
    attr_accessor :service

    # The ID of the pricing option at the site where it was purchased.
    # @return [Integer]
    attr_accessor :product_id

    # When `true`, indicates that the client has been signed in.<br />
    # When `false`, indicates that the client has not been signed in.
    # @return [TrueClass | FalseClass]
    attr_accessor :signed_in

    # The ID of the staff member who is teaching the class.
    # @return [Integer]
    attr_accessor :staff_id

    # When `true`, indicates that the client signed up online.<br />
    # When `false`, indicates that the client was signed up by a staff member.
    # @return [TrueClass | FalseClass]
    attr_accessor :web_signup

    # The action taken.
    # @return [Action1Enum]
    attr_accessor :action

    # When `true`, indicates that the class has been `Missed`.<br />
    # When `false`, indicates that the class has not been `Missed`.
    # @return [TrueClass | FalseClass]
    attr_accessor :missed

    # Indicates the Id of visit type.
    # @return [Integer]
    attr_accessor :visit_type

    # Indicates the Id of type group.
    # @return [Integer]
    attr_accessor :type_group

    # Indicates the service type taken.
    # @return [String]
    attr_accessor :type_taken

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['appointment_id'] = 'AppointmentId'
      @_hash['appointment_gender_preference'] = 'AppointmentGenderPreference'
      @_hash['appointment_status'] = 'AppointmentStatus'
      @_hash['class_id'] = 'ClassId'
      @_hash['client_id'] = 'ClientId'
      @_hash['client_photo_url'] = 'ClientPhotoUrl'
      @_hash['client_unique_id'] = 'ClientUniqueId'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['id'] = 'Id'
      @_hash['last_modified_date_time'] = 'LastModifiedDateTime'
      @_hash['late_cancelled'] = 'LateCancelled'
      @_hash['site_id'] = 'SiteId'
      @_hash['location_id'] = 'LocationId'
      @_hash['make_up'] = 'MakeUp'
      @_hash['name'] = 'Name'
      @_hash['service_id'] = 'ServiceId'
      @_hash['service_name'] = 'ServiceName'
      @_hash['service'] = 'Service'
      @_hash['product_id'] = 'ProductId'
      @_hash['signed_in'] = 'SignedIn'
      @_hash['staff_id'] = 'StaffId'
      @_hash['web_signup'] = 'WebSignup'
      @_hash['action'] = 'Action'
      @_hash['missed'] = 'Missed'
      @_hash['visit_type'] = 'VisitType'
      @_hash['type_group'] = 'TypeGroup'
      @_hash['type_taken'] = 'TypeTaken'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        appointment_id
        appointment_gender_preference
        appointment_status
        class_id
        client_id
        client_photo_url
        client_unique_id
        start_date_time
        end_date_time
        id
        last_modified_date_time
        late_cancelled
        site_id
        location_id
        make_up
        name
        service_id
        service_name
        service
        product_id
        signed_in
        staff_id
        web_signup
        action
        missed
        visit_type
        type_group
        type_taken
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(appointment_id = SKIP, appointment_gender_preference = SKIP,
                   appointment_status = SKIP, class_id = SKIP, client_id = SKIP,
                   client_photo_url = SKIP, client_unique_id = SKIP,
                   start_date_time = SKIP, end_date_time = SKIP, id = SKIP,
                   last_modified_date_time = SKIP, late_cancelled = SKIP,
                   site_id = SKIP, location_id = SKIP, make_up = SKIP,
                   name = SKIP, service_id = SKIP, service_name = SKIP,
                   service = SKIP, product_id = SKIP, signed_in = SKIP,
                   staff_id = SKIP, web_signup = SKIP, action = SKIP,
                   missed = SKIP, visit_type = SKIP, type_group = SKIP,
                   type_taken = SKIP)
      @appointment_id = appointment_id unless appointment_id == SKIP
      unless appointment_gender_preference == SKIP
        @appointment_gender_preference =
          appointment_gender_preference
      end
      @appointment_status = appointment_status unless appointment_status == SKIP
      @class_id = class_id unless class_id == SKIP
      @client_id = client_id unless client_id == SKIP
      @client_photo_url = client_photo_url unless client_photo_url == SKIP
      @client_unique_id = client_unique_id unless client_unique_id == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @id = id unless id == SKIP
      @last_modified_date_time = last_modified_date_time unless last_modified_date_time == SKIP
      @late_cancelled = late_cancelled unless late_cancelled == SKIP
      @site_id = site_id unless site_id == SKIP
      @location_id = location_id unless location_id == SKIP
      @make_up = make_up unless make_up == SKIP
      @name = name unless name == SKIP
      @service_id = service_id unless service_id == SKIP
      @service_name = service_name unless service_name == SKIP
      @service = service unless service == SKIP
      @product_id = product_id unless product_id == SKIP
      @signed_in = signed_in unless signed_in == SKIP
      @staff_id = staff_id unless staff_id == SKIP
      @web_signup = web_signup unless web_signup == SKIP
      @action = action unless action == SKIP
      @missed = missed unless missed == SKIP
      @visit_type = visit_type unless visit_type == SKIP
      @type_group = type_group unless type_group == SKIP
      @type_taken = type_taken unless type_taken == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      appointment_id = hash.key?('AppointmentId') ? hash['AppointmentId'] : SKIP
      appointment_gender_preference =
        hash.key?('AppointmentGenderPreference') ? hash['AppointmentGenderPreference'] : SKIP
      appointment_status =
        hash.key?('AppointmentStatus') ? hash['AppointmentStatus'] : SKIP
      class_id = hash.key?('ClassId') ? hash['ClassId'] : SKIP
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      client_photo_url =
        hash.key?('ClientPhotoUrl') ? hash['ClientPhotoUrl'] : SKIP
      client_unique_id =
        hash.key?('ClientUniqueId') ? hash['ClientUniqueId'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      id = hash.key?('Id') ? hash['Id'] : SKIP
      last_modified_date_time = if hash.key?('LastModifiedDateTime')
                                  (DateTimeHelper.from_rfc3339(hash['LastModifiedDateTime']) if hash['LastModifiedDateTime'])
                                else
                                  SKIP
                                end
      late_cancelled = hash.key?('LateCancelled') ? hash['LateCancelled'] : SKIP
      site_id = hash.key?('SiteId') ? hash['SiteId'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      make_up = hash.key?('MakeUp') ? hash['MakeUp'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      service_id = hash.key?('ServiceId') ? hash['ServiceId'] : SKIP
      service_name = hash.key?('ServiceName') ? hash['ServiceName'] : SKIP
      service = ClientService.from_hash(hash['Service']) if hash['Service']
      product_id = hash.key?('ProductId') ? hash['ProductId'] : SKIP
      signed_in = hash.key?('SignedIn') ? hash['SignedIn'] : SKIP
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      web_signup = hash.key?('WebSignup') ? hash['WebSignup'] : SKIP
      action = hash.key?('Action') ? hash['Action'] : SKIP
      missed = hash.key?('Missed') ? hash['Missed'] : SKIP
      visit_type = hash.key?('VisitType') ? hash['VisitType'] : SKIP
      type_group = hash.key?('TypeGroup') ? hash['TypeGroup'] : SKIP
      type_taken = hash.key?('TypeTaken') ? hash['TypeTaken'] : SKIP

      # Create object from extracted values.
      Visit.new(appointment_id,
                appointment_gender_preference,
                appointment_status,
                class_id,
                client_id,
                client_photo_url,
                client_unique_id,
                start_date_time,
                end_date_time,
                id,
                last_modified_date_time,
                late_cancelled,
                site_id,
                location_id,
                make_up,
                name,
                service_id,
                service_name,
                service,
                product_id,
                signed_in,
                staff_id,
                web_signup,
                action,
                missed,
                visit_type,
                type_group,
                type_taken)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end

    def to_custom_last_modified_date_time
      DateTimeHelper.to_rfc3339(last_modified_date_time)
    end
  end
end
