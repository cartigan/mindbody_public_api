# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # UpdateClientRequest Model.
  class UpdateClientRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A Client DTO with Suspension Informatoin
    # @return [ClientWithSuspensionInfo]
    attr_accessor :client

    # When `true`, indicates that test mode is enabled. The method is validated,
    # but no client data is added or updated.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, the updated information is propagated to all of the region’s
    # sites where the client has a profile.<br />
    # When `false`, only the local client is updated.<br />
    # Default: **true**
    # @return [TrueClass | FalseClass]
    attr_accessor :cross_regional_update

    # The new RSSID to be used for the client. Use `NewId` to assign a specific
    # number to be a client’s ID. If that number is not available, the call
    # returns an error. This RSSID must be unique within the subscriber’s site.
    # If this is a cross-regional update, the RSSID must be unique across the
    # region. If the requested number is already in use, an error is returned.
    # @return [String]
    attr_accessor :new_id

    # The ID of the Lead Channel ID from lead management. If this is supplied
    # then it will map lead channel on the lead management.
    # If this is not supplied then it will have Publicapi LeadChannelId.
    # This parameters required to track the lead channel if new client added to
    # the location.
    # @return [Integer]
    attr_accessor :lead_channel_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client'] = 'Client'
      @_hash['test'] = 'Test'
      @_hash['cross_regional_update'] = 'CrossRegionalUpdate'
      @_hash['new_id'] = 'NewId'
      @_hash['lead_channel_id'] = 'LeadChannelId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        cross_regional_update
        new_id
        lead_channel_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client = nil, test = SKIP, cross_regional_update = SKIP,
                   new_id = SKIP, lead_channel_id = SKIP)
      @client = client
      @test = test unless test == SKIP
      @cross_regional_update = cross_regional_update unless cross_regional_update == SKIP
      @new_id = new_id unless new_id == SKIP
      @lead_channel_id = lead_channel_id unless lead_channel_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client = ClientWithSuspensionInfo.from_hash(hash['Client']) if hash['Client']
      test = hash.key?('Test') ? hash['Test'] : SKIP
      cross_regional_update =
        hash.key?('CrossRegionalUpdate') ? hash['CrossRegionalUpdate'] : SKIP
      new_id = hash.key?('NewId') ? hash['NewId'] : SKIP
      lead_channel_id =
        hash.key?('LeadChannelId') ? hash['LeadChannelId'] : SKIP

      # Create object from extracted values.
      UpdateClientRequest.new(client,
                              test,
                              cross_regional_update,
                              new_id,
                              lead_channel_id)
    end
  end
end
