# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Product Model.
  class Product < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID associated with product.
    # @return [Integer]
    attr_accessor :product_id

    # The barcode number of the product. This is the
    # `PurchasedItems[].BarcodeId` returned from GET Sales.
    # @return [String]
    attr_accessor :id

    # The revenue category ID of the product. Use this ID when calling the GET
    # Categories endpoint.
    # @return [Integer]
    attr_accessor :category_id

    # The SubCategory ID of the product. Use this ID when calling the GET
    # Categories endpoint.
    # @return [Integer]
    attr_accessor :sub_category_id

    # The price of the product.
    # @return [Float]
    attr_accessor :price

    # If tax inclusive-pricing is enabled, this field shows how much tax was
    # added to the price. To fetch this value `LocationId` must be passed as a
    # query parameter.
    # @return [Float]
    attr_accessor :tax_included

    # The tax rate that was applied to this purchase. To fetch this value
    # `LocationId` must be passed as a query parameter.
    # @return [Float]
    attr_accessor :tax_rate

    # The unique ID of the product group.
    # @return [Integer]
    attr_accessor :group_id

    # The name of the product.
    # @return [String]
    attr_accessor :name

    # The online price of the product.
    # @return [Float]
    attr_accessor :online_price

    # A short text description of the product.
    # @return [String]
    attr_accessor :short_description

    # A long, more detailed text description of the product.
    # @return [String]
    attr_accessor :long_description

    # The Type group of the product.
    # @return [Integer]
    attr_accessor :type_group

    # The unique ID of the supplier of product.
    # @return [Integer]
    attr_accessor :supplier_id

    # The Supplier Name of the product.
    # @return [String]
    attr_accessor :supplier_name

    # The URL of the image associated with this product.
    # @return [String]
    attr_accessor :image_url

    # A color used by products.
    # @return [Color]
    attr_accessor :color

    # A color used by products.
    # @return [Size]
    attr_accessor :size

    # The ID number attributed to the product by the manufacturer.
    # @return [String]
    attr_accessor :manufacturer_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['product_id'] = 'ProductId'
      @_hash['id'] = 'Id'
      @_hash['category_id'] = 'CategoryId'
      @_hash['sub_category_id'] = 'SubCategoryId'
      @_hash['price'] = 'Price'
      @_hash['tax_included'] = 'TaxIncluded'
      @_hash['tax_rate'] = 'TaxRate'
      @_hash['group_id'] = 'GroupId'
      @_hash['name'] = 'Name'
      @_hash['online_price'] = 'OnlinePrice'
      @_hash['short_description'] = 'ShortDescription'
      @_hash['long_description'] = 'LongDescription'
      @_hash['type_group'] = 'TypeGroup'
      @_hash['supplier_id'] = 'SupplierId'
      @_hash['supplier_name'] = 'SupplierName'
      @_hash['image_url'] = 'ImageURL'
      @_hash['color'] = 'Color'
      @_hash['size'] = 'Size'
      @_hash['manufacturer_id'] = 'ManufacturerId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        product_id
        id
        category_id
        sub_category_id
        price
        tax_included
        tax_rate
        group_id
        name
        online_price
        short_description
        long_description
        type_group
        supplier_id
        supplier_name
        image_url
        color
        size
        manufacturer_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(product_id = SKIP, id = SKIP, category_id = SKIP,
                   sub_category_id = SKIP, price = SKIP, tax_included = SKIP,
                   tax_rate = SKIP, group_id = SKIP, name = SKIP,
                   online_price = SKIP, short_description = SKIP,
                   long_description = SKIP, type_group = SKIP,
                   supplier_id = SKIP, supplier_name = SKIP, image_url = SKIP,
                   color = SKIP, size = SKIP, manufacturer_id = SKIP)
      @product_id = product_id unless product_id == SKIP
      @id = id unless id == SKIP
      @category_id = category_id unless category_id == SKIP
      @sub_category_id = sub_category_id unless sub_category_id == SKIP
      @price = price unless price == SKIP
      @tax_included = tax_included unless tax_included == SKIP
      @tax_rate = tax_rate unless tax_rate == SKIP
      @group_id = group_id unless group_id == SKIP
      @name = name unless name == SKIP
      @online_price = online_price unless online_price == SKIP
      @short_description = short_description unless short_description == SKIP
      @long_description = long_description unless long_description == SKIP
      @type_group = type_group unless type_group == SKIP
      @supplier_id = supplier_id unless supplier_id == SKIP
      @supplier_name = supplier_name unless supplier_name == SKIP
      @image_url = image_url unless image_url == SKIP
      @color = color unless color == SKIP
      @size = size unless size == SKIP
      @manufacturer_id = manufacturer_id unless manufacturer_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      product_id = hash.key?('ProductId') ? hash['ProductId'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      category_id = hash.key?('CategoryId') ? hash['CategoryId'] : SKIP
      sub_category_id =
        hash.key?('SubCategoryId') ? hash['SubCategoryId'] : SKIP
      price = hash.key?('Price') ? hash['Price'] : SKIP
      tax_included = hash.key?('TaxIncluded') ? hash['TaxIncluded'] : SKIP
      tax_rate = hash.key?('TaxRate') ? hash['TaxRate'] : SKIP
      group_id = hash.key?('GroupId') ? hash['GroupId'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      online_price = hash.key?('OnlinePrice') ? hash['OnlinePrice'] : SKIP
      short_description =
        hash.key?('ShortDescription') ? hash['ShortDescription'] : SKIP
      long_description =
        hash.key?('LongDescription') ? hash['LongDescription'] : SKIP
      type_group = hash.key?('TypeGroup') ? hash['TypeGroup'] : SKIP
      supplier_id = hash.key?('SupplierId') ? hash['SupplierId'] : SKIP
      supplier_name = hash.key?('SupplierName') ? hash['SupplierName'] : SKIP
      image_url = hash.key?('ImageURL') ? hash['ImageURL'] : SKIP
      color = Color.from_hash(hash['Color']) if hash['Color']
      size = Size.from_hash(hash['Size']) if hash['Size']
      manufacturer_id =
        hash.key?('ManufacturerId') ? hash['ManufacturerId'] : SKIP

      # Create object from extracted values.
      Product.new(product_id,
                  id,
                  category_id,
                  sub_category_id,
                  price,
                  tax_included,
                  tax_rate,
                  group_id,
                  name,
                  online_price,
                  short_description,
                  long_description,
                  type_group,
                  supplier_id,
                  supplier_name,
                  image_url,
                  color,
                  size,
                  manufacturer_id)
    end
  end
end
