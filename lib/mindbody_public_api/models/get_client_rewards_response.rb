# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # GetClientRewardsResponse Model.
  class GetClientRewardsResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Contains information about the pagination to use.
    # @return [PaginationResponse]
    attr_accessor :pagination_response

    # The total rewards points available to the indicated client after the above
    # transaction.
    # @return [Integer]
    attr_accessor :balance

    # Contains information about the reward transaction details.
    # @return [Array[ClientRewardTransaction]]
    attr_accessor :transactions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['pagination_response'] = 'PaginationResponse'
      @_hash['balance'] = 'Balance'
      @_hash['transactions'] = 'Transactions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        pagination_response
        balance
        transactions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(pagination_response = SKIP, balance = SKIP,
                   transactions = SKIP)
      @pagination_response = pagination_response unless pagination_response == SKIP
      @balance = balance unless balance == SKIP
      @transactions = transactions unless transactions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pagination_response = PaginationResponse.from_hash(hash['PaginationResponse']) if
        hash['PaginationResponse']
      balance = hash.key?('Balance') ? hash['Balance'] : SKIP
      # Parameter is an array, so we need to iterate through it
      transactions = nil
      unless hash['Transactions'].nil?
        transactions = []
        hash['Transactions'].each do |structure|
          transactions << (ClientRewardTransaction.from_hash(structure) if structure)
        end
      end

      transactions = SKIP unless hash.key?('Transactions')

      # Create object from extracted values.
      GetClientRewardsResponse.new(pagination_response,
                                   balance,
                                   transactions)
    end
  end
end
