# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Liability Model.
  class Liability < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time at which the client agreed to the liability waiver for
    # the business.
    # @return [DateTime]
    attr_accessor :agreement_date

    # The client’s liability release status.<br />
    # When `true`, indicates that the client has agreed to the liability release
    # for the business.<br />
    # When `false`, indicates that the client has not agreed to the liability
    # release for the business.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_released

    # An ID indicating who released liability for the client. If the client
    # agreed to the liability waiver by signing into an account online, this
    # value is `null`. If a staff member marked the waiver as signed on behalf
    # of the client, it is the staff member’s ID. `0` indicates that the
    # business owner marked the liability waiver as signed on behalf of the
    # client.
    # @return [Integer]
    attr_accessor :released_by

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['agreement_date'] = 'AgreementDate'
      @_hash['is_released'] = 'IsReleased'
      @_hash['released_by'] = 'ReleasedBy'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        agreement_date
        is_released
        released_by
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(agreement_date = SKIP, is_released = SKIP,
                   released_by = SKIP)
      @agreement_date = agreement_date unless agreement_date == SKIP
      @is_released = is_released unless is_released == SKIP
      @released_by = released_by unless released_by == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      agreement_date = if hash.key?('AgreementDate')
                         (DateTimeHelper.from_rfc3339(hash['AgreementDate']) if hash['AgreementDate'])
                       else
                         SKIP
                       end
      is_released = hash.key?('IsReleased') ? hash['IsReleased'] : SKIP
      released_by = hash.key?('ReleasedBy') ? hash['ReleasedBy'] : SKIP

      # Create object from extracted values.
      Liability.new(agreement_date,
                    is_released,
                    released_by)
    end

    def to_custom_agreement_date
      DateTimeHelper.to_rfc3339(agreement_date)
    end
  end
end
