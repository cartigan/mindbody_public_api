# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # PurchasedItem Model.
  class PurchasedItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID which gets assigned to the item when item is added to the cart.
    # @return [Integer]
    attr_accessor :sale_detail_id

    # The ID of the purchased item. Use this ID when calling the GET Services or
    # GET Products endpoint.
    # @return [Integer]
    attr_accessor :id

    # When `true`, indicates that the purchased item was a pricing option for a
    # service.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_service

    # The barcode number of the purchased item. Use this ID when calling the GET
    # Products endpoint.
    # @return [String]
    attr_accessor :barcode_id

    # The description of the sale transaction/pricing option.
    # @return [String]
    attr_accessor :description

    # The contract purchased by the client. Use this ID when calling the GET
    # Contract endpoint.
    # @return [Integer]
    attr_accessor :contract_id

    # The revenue category ID used for sale. Use this ID when calling the GET
    # Categories endpoint.
    # @return [Integer]
    attr_accessor :category_id

    # The ID of revenue subcategory.
    # @return [Integer]
    attr_accessor :sub_category_id

    # er Unit Price of the item purchased.
    # @return [Float]
    attr_accessor :unit_price

    # Quantity of the purchased item, applicable for products only. Note:
    # Negative numbers indicate returned items.
    # @return [Integer]
    attr_accessor :quantity

    # The percent discount that was applied to the items subtotal.
    # @return [Float]
    attr_accessor :discount_percent

    # The total discount amount that was applied to the items subtotal.
    # @return [Float]
    attr_accessor :discount_amount

    # A decimal representation of the first tax rate that was applied to the
    # items subtotal.
    # @return [Float]
    attr_accessor :tax1

    # A decimal representation of the second tax rate that was applied to the
    # items subtotal.
    # @return [Float]
    attr_accessor :tax2

    # A decimal representation of the third tax rate that was applied to the
    # items subtotal.
    # @return [Float]
    attr_accessor :tax3

    # A decimal representation of the fourth tax rate that was applied to the
    # items subtotal.
    # @return [Float]
    attr_accessor :tax4

    # A decimal representation of the fifth tax rate that was applied to the
    # items subtotal.
    # @return [Float]
    attr_accessor :tax5

    # Total tax amount that is summation of tax1, tax2, tax3, tax4 and tax5.
    # @return [Float]
    attr_accessor :tax_amount

    # The items total, once discounts and/or tax was applied.
    # @return [Float]
    attr_accessor :total_amount

    # Note made by the customer while purchasing item.
    # @return [String]
    attr_accessor :notes

    # When `true`, indicates that the purchased item is returned, `false`
    # otherwise.
    # @return [TrueClass | FalseClass]
    attr_accessor :returned

    # The payment reference ID generated during payment of sold item.
    # @return [Integer]
    attr_accessor :payment_ref_id

    # The expiration date of the pricing option purchased.
    # @return [DateTime]
    attr_accessor :exp_date

    # The activation date of pricing option purchased.
    # @return [DateTime]
    attr_accessor :active_date

    # Gift Card BarcodeId
    # @return [String]
    attr_accessor :gift_card_barcode_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sale_detail_id'] = 'SaleDetailId'
      @_hash['id'] = 'Id'
      @_hash['is_service'] = 'IsService'
      @_hash['barcode_id'] = 'BarcodeId'
      @_hash['description'] = 'Description'
      @_hash['contract_id'] = 'ContractId'
      @_hash['category_id'] = 'CategoryId'
      @_hash['sub_category_id'] = 'SubCategoryId'
      @_hash['unit_price'] = 'UnitPrice'
      @_hash['quantity'] = 'Quantity'
      @_hash['discount_percent'] = 'DiscountPercent'
      @_hash['discount_amount'] = 'DiscountAmount'
      @_hash['tax1'] = 'Tax1'
      @_hash['tax2'] = 'Tax2'
      @_hash['tax3'] = 'Tax3'
      @_hash['tax4'] = 'Tax4'
      @_hash['tax5'] = 'Tax5'
      @_hash['tax_amount'] = 'TaxAmount'
      @_hash['total_amount'] = 'TotalAmount'
      @_hash['notes'] = 'Notes'
      @_hash['returned'] = 'Returned'
      @_hash['payment_ref_id'] = 'PaymentRefId'
      @_hash['exp_date'] = 'ExpDate'
      @_hash['active_date'] = 'ActiveDate'
      @_hash['gift_card_barcode_id'] = 'GiftCardBarcodeId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        sale_detail_id
        id
        is_service
        barcode_id
        description
        contract_id
        category_id
        sub_category_id
        unit_price
        quantity
        discount_percent
        discount_amount
        tax1
        tax2
        tax3
        tax4
        tax5
        tax_amount
        total_amount
        notes
        returned
        payment_ref_id
        exp_date
        active_date
        gift_card_barcode_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(sale_detail_id = SKIP, id = SKIP, is_service = SKIP,
                   barcode_id = SKIP, description = SKIP, contract_id = SKIP,
                   category_id = SKIP, sub_category_id = SKIP,
                   unit_price = SKIP, quantity = SKIP, discount_percent = SKIP,
                   discount_amount = SKIP, tax1 = SKIP, tax2 = SKIP,
                   tax3 = SKIP, tax4 = SKIP, tax5 = SKIP, tax_amount = SKIP,
                   total_amount = SKIP, notes = SKIP, returned = SKIP,
                   payment_ref_id = SKIP, exp_date = SKIP, active_date = SKIP,
                   gift_card_barcode_id = SKIP)
      @sale_detail_id = sale_detail_id unless sale_detail_id == SKIP
      @id = id unless id == SKIP
      @is_service = is_service unless is_service == SKIP
      @barcode_id = barcode_id unless barcode_id == SKIP
      @description = description unless description == SKIP
      @contract_id = contract_id unless contract_id == SKIP
      @category_id = category_id unless category_id == SKIP
      @sub_category_id = sub_category_id unless sub_category_id == SKIP
      @unit_price = unit_price unless unit_price == SKIP
      @quantity = quantity unless quantity == SKIP
      @discount_percent = discount_percent unless discount_percent == SKIP
      @discount_amount = discount_amount unless discount_amount == SKIP
      @tax1 = tax1 unless tax1 == SKIP
      @tax2 = tax2 unless tax2 == SKIP
      @tax3 = tax3 unless tax3 == SKIP
      @tax4 = tax4 unless tax4 == SKIP
      @tax5 = tax5 unless tax5 == SKIP
      @tax_amount = tax_amount unless tax_amount == SKIP
      @total_amount = total_amount unless total_amount == SKIP
      @notes = notes unless notes == SKIP
      @returned = returned unless returned == SKIP
      @payment_ref_id = payment_ref_id unless payment_ref_id == SKIP
      @exp_date = exp_date unless exp_date == SKIP
      @active_date = active_date unless active_date == SKIP
      @gift_card_barcode_id = gift_card_barcode_id unless gift_card_barcode_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      sale_detail_id = hash.key?('SaleDetailId') ? hash['SaleDetailId'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      is_service = hash.key?('IsService') ? hash['IsService'] : SKIP
      barcode_id = hash.key?('BarcodeId') ? hash['BarcodeId'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      contract_id = hash.key?('ContractId') ? hash['ContractId'] : SKIP
      category_id = hash.key?('CategoryId') ? hash['CategoryId'] : SKIP
      sub_category_id =
        hash.key?('SubCategoryId') ? hash['SubCategoryId'] : SKIP
      unit_price = hash.key?('UnitPrice') ? hash['UnitPrice'] : SKIP
      quantity = hash.key?('Quantity') ? hash['Quantity'] : SKIP
      discount_percent =
        hash.key?('DiscountPercent') ? hash['DiscountPercent'] : SKIP
      discount_amount =
        hash.key?('DiscountAmount') ? hash['DiscountAmount'] : SKIP
      tax1 = hash.key?('Tax1') ? hash['Tax1'] : SKIP
      tax2 = hash.key?('Tax2') ? hash['Tax2'] : SKIP
      tax3 = hash.key?('Tax3') ? hash['Tax3'] : SKIP
      tax4 = hash.key?('Tax4') ? hash['Tax4'] : SKIP
      tax5 = hash.key?('Tax5') ? hash['Tax5'] : SKIP
      tax_amount = hash.key?('TaxAmount') ? hash['TaxAmount'] : SKIP
      total_amount = hash.key?('TotalAmount') ? hash['TotalAmount'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      returned = hash.key?('Returned') ? hash['Returned'] : SKIP
      payment_ref_id = hash.key?('PaymentRefId') ? hash['PaymentRefId'] : SKIP
      exp_date = if hash.key?('ExpDate')
                   (DateTimeHelper.from_rfc3339(hash['ExpDate']) if hash['ExpDate'])
                 else
                   SKIP
                 end
      active_date = if hash.key?('ActiveDate')
                      (DateTimeHelper.from_rfc3339(hash['ActiveDate']) if hash['ActiveDate'])
                    else
                      SKIP
                    end
      gift_card_barcode_id =
        hash.key?('GiftCardBarcodeId') ? hash['GiftCardBarcodeId'] : SKIP

      # Create object from extracted values.
      PurchasedItem.new(sale_detail_id,
                        id,
                        is_service,
                        barcode_id,
                        description,
                        contract_id,
                        category_id,
                        sub_category_id,
                        unit_price,
                        quantity,
                        discount_percent,
                        discount_amount,
                        tax1,
                        tax2,
                        tax3,
                        tax4,
                        tax5,
                        tax_amount,
                        total_amount,
                        notes,
                        returned,
                        payment_ref_id,
                        exp_date,
                        active_date,
                        gift_card_barcode_id)
    end

    def to_custom_exp_date
      DateTimeHelper.to_rfc3339(exp_date)
    end

    def to_custom_active_date
      DateTimeHelper.to_rfc3339(active_date)
    end
  end
end
