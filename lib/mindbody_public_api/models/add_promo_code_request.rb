# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # AddPromoCodeRequest Model.
  class AddPromoCodeRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The code of the promocode.
    # @return [String]
    attr_accessor :code

    # The name of the promocode.
    # @return [String]
    attr_accessor :name

    # Indicates that promocode is active. Default: **true**
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # Discount for a promo code
    # @return [Discount]
    attr_accessor :discount

    # The date of the promocode activation. Default: **today’s date**
    # @return [DateTime]
    attr_accessor :activation_date

    # The date of the promocode expiration. Default: **a months from today’s
    # date**
    # @return [DateTime]
    attr_accessor :expiration_date

    # The maximun number of uses. A use is considered a single sale.
    # @return [Integer]
    attr_accessor :max_uses

    # The number of days a client has to use a promocode after they are no
    # longer a prospect.
    # @return [Integer]
    attr_accessor :days_after_close_date

    # Indicates if promocode can be redeemed online in consumer mode. Default:
    # **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :allow_online

    # Indicates what days of the week promocode is valid. Defaults to 7 days of
    # the week. Possible values are:
    # * Monday
    # * Tuesday
    # * Wednesday
    # * Thursday
    # * Friday
    # * Saturday
    # * Sunday
    # @return [Array[String]]
    attr_accessor :days_valid

    # Contains information about a promocode applicable items.
    # See ApplicableItems for a details of the `ApplicableItems` object.
    # @return [Array[ApplicableItem]]
    attr_accessor :applicable_items

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['code'] = 'Code'
      @_hash['name'] = 'Name'
      @_hash['active'] = 'Active'
      @_hash['discount'] = 'Discount'
      @_hash['activation_date'] = 'ActivationDate'
      @_hash['expiration_date'] = 'ExpirationDate'
      @_hash['max_uses'] = 'MaxUses'
      @_hash['days_after_close_date'] = 'DaysAfterCloseDate'
      @_hash['allow_online'] = 'AllowOnline'
      @_hash['days_valid'] = 'DaysValid'
      @_hash['applicable_items'] = 'ApplicableItems'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        active
        discount
        activation_date
        expiration_date
        max_uses
        days_after_close_date
        allow_online
        days_valid
        applicable_items
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(code = nil, name = nil, active = SKIP, discount = SKIP,
                   activation_date = SKIP, expiration_date = SKIP,
                   max_uses = SKIP, days_after_close_date = SKIP,
                   allow_online = SKIP, days_valid = SKIP,
                   applicable_items = SKIP)
      @code = code
      @name = name
      @active = active unless active == SKIP
      @discount = discount unless discount == SKIP
      @activation_date = activation_date unless activation_date == SKIP
      @expiration_date = expiration_date unless expiration_date == SKIP
      @max_uses = max_uses unless max_uses == SKIP
      @days_after_close_date = days_after_close_date unless days_after_close_date == SKIP
      @allow_online = allow_online unless allow_online == SKIP
      @days_valid = days_valid unless days_valid == SKIP
      @applicable_items = applicable_items unless applicable_items == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      code = hash.key?('Code') ? hash['Code'] : nil
      name = hash.key?('Name') ? hash['Name'] : nil
      active = hash.key?('Active') ? hash['Active'] : SKIP
      discount = Discount.from_hash(hash['Discount']) if hash['Discount']
      activation_date = if hash.key?('ActivationDate')
                          (DateTimeHelper.from_rfc3339(hash['ActivationDate']) if hash['ActivationDate'])
                        else
                          SKIP
                        end
      expiration_date = if hash.key?('ExpirationDate')
                          (DateTimeHelper.from_rfc3339(hash['ExpirationDate']) if hash['ExpirationDate'])
                        else
                          SKIP
                        end
      max_uses = hash.key?('MaxUses') ? hash['MaxUses'] : SKIP
      days_after_close_date =
        hash.key?('DaysAfterCloseDate') ? hash['DaysAfterCloseDate'] : SKIP
      allow_online = hash.key?('AllowOnline') ? hash['AllowOnline'] : SKIP
      days_valid = hash.key?('DaysValid') ? hash['DaysValid'] : SKIP
      # Parameter is an array, so we need to iterate through it
      applicable_items = nil
      unless hash['ApplicableItems'].nil?
        applicable_items = []
        hash['ApplicableItems'].each do |structure|
          applicable_items << (ApplicableItem.from_hash(structure) if structure)
        end
      end

      applicable_items = SKIP unless hash.key?('ApplicableItems')

      # Create object from extracted values.
      AddPromoCodeRequest.new(code,
                              name,
                              active,
                              discount,
                              activation_date,
                              expiration_date,
                              max_uses,
                              days_after_close_date,
                              allow_online,
                              days_valid,
                              applicable_items)
    end

    def to_custom_activation_date
      DateTimeHelper.to_rfc3339(activation_date)
    end

    def to_custom_expiration_date
      DateTimeHelper.to_rfc3339(expiration_date)
    end
  end
end
