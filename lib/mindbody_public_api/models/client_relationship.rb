# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # A relation between two clients.
  class ClientRelationship < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The RSSID of the related client.
    # @return [String]
    attr_accessor :related_client_id

    # Jim is a RelationshipName1 of John. John is a RelationshipName2 of Jim.
    # @return [Relationship]
    attr_accessor :relationship

    # The name of the relationship of the related client.
    # @return [String]
    attr_accessor :relationship_name

    # When true, the associated relationship is removed from the clientâ€™s list
    # of relationships.
    # This property is ignored in all other use cases.
    # Default: *false*
    # @return [TrueClass | FalseClass]
    attr_accessor :delete

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['related_client_id'] = 'RelatedClientId'
      @_hash['relationship'] = 'Relationship'
      @_hash['relationship_name'] = 'RelationshipName'
      @_hash['delete'] = 'Delete'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        related_client_id
        relationship
        relationship_name
        delete
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(related_client_id = SKIP, relationship = SKIP,
                   relationship_name = SKIP, delete = SKIP)
      @related_client_id = related_client_id unless related_client_id == SKIP
      @relationship = relationship unless relationship == SKIP
      @relationship_name = relationship_name unless relationship_name == SKIP
      @delete = delete unless delete == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      related_client_id =
        hash.key?('RelatedClientId') ? hash['RelatedClientId'] : SKIP
      relationship = Relationship.from_hash(hash['Relationship']) if hash['Relationship']
      relationship_name =
        hash.key?('RelationshipName') ? hash['RelationshipName'] : SKIP
      delete = hash.key?('Delete') ? hash['Delete'] : SKIP

      # Create object from extracted values.
      ClientRelationship.new(related_client_id,
                             relationship,
                             relationship_name,
                             delete)
    end
  end
end
