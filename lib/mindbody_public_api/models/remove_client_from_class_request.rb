# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # RemoveClientFromClassRequest Model.
  class RemoveClientFromClassRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The RSSID of the client to remove from the specified class.
    # @return [String]
    attr_accessor :client_id

    # The ID of the class that you want to remove the client from.
    # @return [Integer]
    attr_accessor :class_id

    # When `true`, the request ensures that its parameters are valid without
    # affecting real data.<br />
    # When `false`, the request performs as intended and may affect live client
    # data.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, indicates that the client should be sent an email. Depending
    # on the site and client settings, an email may or may not be sent.<br />
    # Default: **false**
    # Note: When the Authorization header is passed and the SendEmail is set to
    # `true`, then an email will be sent.
    # When the Authorization header is passed and the SendEmail is set to
    # `false`, then an email will not be sent.
    # When the Authorization header is not passed and the SendEmail is set to
    # either `true` or `false`, then an email will not be sent.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # When `true`, indicates that the client is to be late cancelled from the
    # class.<br />
    # When `false`, indicates that the client is to be early cancelled from the
    # class.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :late_cancel

    # The ID of the client visit that you want to remove from the class.
    # Default: **0**
    # @return [Integer]
    attr_accessor :visit_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_id'] = 'ClientId'
      @_hash['class_id'] = 'ClassId'
      @_hash['test'] = 'Test'
      @_hash['send_email'] = 'SendEmail'
      @_hash['late_cancel'] = 'LateCancel'
      @_hash['visit_id'] = 'VisitId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        send_email
        late_cancel
        visit_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, class_id = nil, test = SKIP,
                   send_email = SKIP, late_cancel = SKIP, visit_id = SKIP)
      @client_id = client_id
      @class_id = class_id
      @test = test unless test == SKIP
      @send_email = send_email unless send_email == SKIP
      @late_cancel = late_cancel unless late_cancel == SKIP
      @visit_id = visit_id unless visit_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      class_id = hash.key?('ClassId') ? hash['ClassId'] : nil
      test = hash.key?('Test') ? hash['Test'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP
      late_cancel = hash.key?('LateCancel') ? hash['LateCancel'] : SKIP
      visit_id = hash.key?('VisitId') ? hash['VisitId'] : SKIP

      # Create object from extracted values.
      RemoveClientFromClassRequest.new(client_id,
                                       class_id,
                                       test,
                                       send_email,
                                       late_cancel,
                                       visit_id)
    end
  end
end
