# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Category Model.
  class Category < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The category Id used for api calls.
    # @return [Integer]
    attr_accessor :id

    # Category Name
    # @return [String]
    attr_accessor :category_name

    # Category Description
    # @return [String]
    attr_accessor :description

    # Category service
    # @return [TrueClass | FalseClass]
    attr_accessor :service

    # Check if Category is active.
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # Check if Category is of primary type.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_primary

    # Check if Category is of secondary type.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_secondary

    # Category Created DateTime UTC
    # @return [DateTime]
    attr_accessor :created_date_time_utc

    # Category Modified DateTime UTC
    # @return [DateTime]
    attr_accessor :modified_date_time_utc

    # Contains the SubCategory objects, each of which describes the
    # subcategories for a category.
    # @return [Array[SubCategory]]
    attr_accessor :sub_categories

    # Get total number of rows
    # @return [Integer]
    attr_accessor :total_count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['category_name'] = 'CategoryName'
      @_hash['description'] = 'Description'
      @_hash['service'] = 'Service'
      @_hash['active'] = 'Active'
      @_hash['is_primary'] = 'IsPrimary'
      @_hash['is_secondary'] = 'IsSecondary'
      @_hash['created_date_time_utc'] = 'CreatedDateTimeUTC'
      @_hash['modified_date_time_utc'] = 'ModifiedDateTimeUTC'
      @_hash['sub_categories'] = 'SubCategories'
      @_hash['total_count'] = 'TotalCount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        category_name
        description
        service
        active
        is_primary
        is_secondary
        created_date_time_utc
        modified_date_time_utc
        sub_categories
        total_count
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, category_name = SKIP, description = SKIP,
                   service = SKIP, active = SKIP, is_primary = SKIP,
                   is_secondary = SKIP, created_date_time_utc = SKIP,
                   modified_date_time_utc = SKIP, sub_categories = SKIP,
                   total_count = SKIP)
      @id = id unless id == SKIP
      @category_name = category_name unless category_name == SKIP
      @description = description unless description == SKIP
      @service = service unless service == SKIP
      @active = active unless active == SKIP
      @is_primary = is_primary unless is_primary == SKIP
      @is_secondary = is_secondary unless is_secondary == SKIP
      @created_date_time_utc = created_date_time_utc unless created_date_time_utc == SKIP
      @modified_date_time_utc = modified_date_time_utc unless modified_date_time_utc == SKIP
      @sub_categories = sub_categories unless sub_categories == SKIP
      @total_count = total_count unless total_count == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      category_name = hash.key?('CategoryName') ? hash['CategoryName'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      service = hash.key?('Service') ? hash['Service'] : SKIP
      active = hash.key?('Active') ? hash['Active'] : SKIP
      is_primary = hash.key?('IsPrimary') ? hash['IsPrimary'] : SKIP
      is_secondary = hash.key?('IsSecondary') ? hash['IsSecondary'] : SKIP
      created_date_time_utc = if hash.key?('CreatedDateTimeUTC')
                                (DateTimeHelper.from_rfc3339(hash['CreatedDateTimeUTC']) if hash['CreatedDateTimeUTC'])
                              else
                                SKIP
                              end
      modified_date_time_utc = if hash.key?('ModifiedDateTimeUTC')
                                 (DateTimeHelper.from_rfc3339(hash['ModifiedDateTimeUTC']) if hash['ModifiedDateTimeUTC'])
                               else
                                 SKIP
                               end
      # Parameter is an array, so we need to iterate through it
      sub_categories = nil
      unless hash['SubCategories'].nil?
        sub_categories = []
        hash['SubCategories'].each do |structure|
          sub_categories << (SubCategory.from_hash(structure) if structure)
        end
      end

      sub_categories = SKIP unless hash.key?('SubCategories')
      total_count = hash.key?('TotalCount') ? hash['TotalCount'] : SKIP

      # Create object from extracted values.
      Category.new(id,
                   category_name,
                   description,
                   service,
                   active,
                   is_primary,
                   is_secondary,
                   created_date_time_utc,
                   modified_date_time_utc,
                   sub_categories,
                   total_count)
    end

    def to_custom_created_date_time_utc
      DateTimeHelper.to_rfc3339(created_date_time_utc)
    end

    def to_custom_modified_date_time_utc
      DateTimeHelper.to_rfc3339(modified_date_time_utc)
    end
  end
end
