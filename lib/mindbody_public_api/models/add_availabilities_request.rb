# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # AddAvailabilitiesRequest Model.
  class AddAvailabilitiesRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, the request ensures that its parameters are valid without
    # affecting real data.
    # When `false`, the request performs as intended and may affect live client
    # data.
    # (optional) Defaults to false.
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # Location of availability.
    # <br />Not used when IsUnavailable is `true`.
    # @return [Integer]
    attr_accessor :location_id

    # A list of requested staff IDs.<br />
    # (optional) Defaults to staff ID of user credentials. Use 0 for all.
    # @return [Array[Integer]]
    attr_accessor :staff_i_ds

    # A list of program IDs.<br />
    # (optional) Defaults to all.
    # <br />Not used when IsUnavailable is true.
    # @return [Array[Integer]]
    attr_accessor :program_i_ds

    # The start date and time of the new availabilities or unavailabilities.
    # @return [DateTime]
    attr_accessor :start_date_time

    # The end date and time of the new availabilities or unavailabilities.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The days of the week to set.<br />
    # (optional) Defaults to all.
    # @return [Array[DaysOfWeekEnum]]
    attr_accessor :days_of_week

    # Description of unavalability.
    # <br />Only used when IsUnavailable is true.
    # @return [String]
    attr_accessor :unavailable_description

    # When `true`, indicates that unavailability is getting added. When `false`,
    # indicates that availability is getting added.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :is_unavailable

    # Sets the public display of the availability.<br
    # /><ul><li>Show</li><li>Mask</li><li>Hide</li></ul>
    # (optional) Defaults to Show.
    # @return [PublicDisplay1Enum]
    attr_accessor :public_display

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['test'] = 'Test'
      @_hash['location_id'] = 'LocationID'
      @_hash['staff_i_ds'] = 'StaffIDs'
      @_hash['program_i_ds'] = 'ProgramIDs'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['days_of_week'] = 'DaysOfWeek'
      @_hash['unavailable_description'] = 'UnavailableDescription'
      @_hash['is_unavailable'] = 'IsUnavailable'
      @_hash['public_display'] = 'PublicDisplay'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        location_id
        staff_i_ds
        program_i_ds
        start_date_time
        end_date_time
        days_of_week
        unavailable_description
        is_unavailable
        public_display
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(test = SKIP, location_id = SKIP, staff_i_ds = SKIP,
                   program_i_ds = SKIP, start_date_time = SKIP,
                   end_date_time = SKIP, days_of_week = SKIP,
                   unavailable_description = SKIP, is_unavailable = SKIP,
                   public_display = SKIP)
      @test = test unless test == SKIP
      @location_id = location_id unless location_id == SKIP
      @staff_i_ds = staff_i_ds unless staff_i_ds == SKIP
      @program_i_ds = program_i_ds unless program_i_ds == SKIP
      @start_date_time = start_date_time unless start_date_time == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @days_of_week = days_of_week unless days_of_week == SKIP
      @unavailable_description = unavailable_description unless unavailable_description == SKIP
      @is_unavailable = is_unavailable unless is_unavailable == SKIP
      @public_display = public_display unless public_display == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      test = hash.key?('Test') ? hash['Test'] : SKIP
      location_id = hash.key?('LocationID') ? hash['LocationID'] : SKIP
      staff_i_ds = hash.key?('StaffIDs') ? hash['StaffIDs'] : SKIP
      program_i_ds = hash.key?('ProgramIDs') ? hash['ProgramIDs'] : SKIP
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        else
                          SKIP
                        end
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      days_of_week = hash.key?('DaysOfWeek') ? hash['DaysOfWeek'] : SKIP
      unavailable_description =
        hash.key?('UnavailableDescription') ? hash['UnavailableDescription'] : SKIP
      is_unavailable = hash.key?('IsUnavailable') ? hash['IsUnavailable'] : SKIP
      public_display = hash.key?('PublicDisplay') ? hash['PublicDisplay'] : SKIP

      # Create object from extracted values.
      AddAvailabilitiesRequest.new(test,
                                   location_id,
                                   staff_i_ds,
                                   program_i_ds,
                                   start_date_time,
                                   end_date_time,
                                   days_of_week,
                                   unavailable_description,
                                   is_unavailable,
                                   public_display)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end
  end
end
