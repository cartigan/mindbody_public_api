# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # StaffPermissionGroup Model.
  class StaffPermissionGroup < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the permission group.
    # @return [String]
    attr_accessor :permission_group_name

    # When `true`, the staff member’s permissions are restricted to specific IP
    # addresses.<br />
    # When `false`, the staff member’s permissions are not restricted to
    # specific IP addresses.
    # @return [TrueClass | FalseClass]
    attr_accessor :ip_restricted

    # A list of the permissions allowed to the staff member. See [Permission
    # Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#eperm
    # ission-values) for descriptions of the possible permissions.
    # @return [Array[AllowedPermissionEnum]]
    attr_accessor :allowed_permissions

    # A list of the permissions that the staff member is not allowed to
    # exercise. See [Permission
    # Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#eperm
    # ission-values) for descriptions of the possible permissions.
    # @return [Array[DeniedPermissionEnum]]
    attr_accessor :denied_permissions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['permission_group_name'] = 'PermissionGroupName'
      @_hash['ip_restricted'] = 'IpRestricted'
      @_hash['allowed_permissions'] = 'AllowedPermissions'
      @_hash['denied_permissions'] = 'DeniedPermissions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        permission_group_name
        ip_restricted
        allowed_permissions
        denied_permissions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(permission_group_name = SKIP, ip_restricted = SKIP,
                   allowed_permissions = SKIP, denied_permissions = SKIP)
      @permission_group_name = permission_group_name unless permission_group_name == SKIP
      @ip_restricted = ip_restricted unless ip_restricted == SKIP
      @allowed_permissions = allowed_permissions unless allowed_permissions == SKIP
      @denied_permissions = denied_permissions unless denied_permissions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      permission_group_name =
        hash.key?('PermissionGroupName') ? hash['PermissionGroupName'] : SKIP
      ip_restricted = hash.key?('IpRestricted') ? hash['IpRestricted'] : SKIP
      allowed_permissions =
        hash.key?('AllowedPermissions') ? hash['AllowedPermissions'] : SKIP
      denied_permissions =
        hash.key?('DeniedPermissions') ? hash['DeniedPermissions'] : SKIP

      # Create object from extracted values.
      StaffPermissionGroup.new(permission_group_name,
                               ip_restricted,
                               allowed_permissions,
                               denied_permissions)
    end
  end
end
