# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # CartItem Model.
  class CartItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :item

    # The amount of the discount applied to the item.
    # @return [Float]
    attr_accessor :discount_amount

    # The IDs of the booked classes, enrollments, or courses that were
    # reconciled by this cart item. This list is only returned if a valid visit
    # ID was passed in the request’s `VisitIds` list.
    # @return [Array[Integer]]
    attr_accessor :visit_ids

    # Gets or sets the item.
    # @return [Array[Integer]]
    attr_accessor :appointment_ids

    # The IDs of the appointments that were reconciled by this cart item. This
    # list is only returned if a valid appointment ID was passed in the
    # request’s `AppointmentIds` list.
    # @return [Array[Appointment]]
    attr_accessor :appointments

    # The item’s ID in the current cart.
    # @return [Integer]
    attr_accessor :id

    # The quantity of the item being purchased.
    # @return [Integer]
    attr_accessor :quantity

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['item'] = 'Item'
      @_hash['discount_amount'] = 'DiscountAmount'
      @_hash['visit_ids'] = 'VisitIds'
      @_hash['appointment_ids'] = 'AppointmentIds'
      @_hash['appointments'] = 'Appointments'
      @_hash['id'] = 'Id'
      @_hash['quantity'] = 'Quantity'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        item
        discount_amount
        visit_ids
        appointment_ids
        appointments
        id
        quantity
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(item = SKIP, discount_amount = SKIP, visit_ids = SKIP,
                   appointment_ids = SKIP, appointments = SKIP, id = SKIP,
                   quantity = SKIP)
      @item = item unless item == SKIP
      @discount_amount = discount_amount unless discount_amount == SKIP
      @visit_ids = visit_ids unless visit_ids == SKIP
      @appointment_ids = appointment_ids unless appointment_ids == SKIP
      @appointments = appointments unless appointments == SKIP
      @id = id unless id == SKIP
      @quantity = quantity unless quantity == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      item = hash.key?('Item') ? hash['Item'] : SKIP
      discount_amount =
        hash.key?('DiscountAmount') ? hash['DiscountAmount'] : SKIP
      visit_ids = hash.key?('VisitIds') ? hash['VisitIds'] : SKIP
      appointment_ids =
        hash.key?('AppointmentIds') ? hash['AppointmentIds'] : SKIP
      # Parameter is an array, so we need to iterate through it
      appointments = nil
      unless hash['Appointments'].nil?
        appointments = []
        hash['Appointments'].each do |structure|
          appointments << (Appointment.from_hash(structure) if structure)
        end
      end

      appointments = SKIP unless hash.key?('Appointments')
      id = hash.key?('Id') ? hash['Id'] : SKIP
      quantity = hash.key?('Quantity') ? hash['Quantity'] : SKIP

      # Create object from extracted values.
      CartItem.new(item,
                   discount_amount,
                   visit_ids,
                   appointment_ids,
                   appointments,
                   id,
                   quantity)
    end
  end
end
