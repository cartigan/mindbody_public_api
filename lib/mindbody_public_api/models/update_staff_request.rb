# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # UpdateStaffRequest Model.
  class UpdateStaffRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID of the staff member.
    # @return [Integer]
    attr_accessor :id

    # The staff member first name. You must specify a first name when you add a
    # staff member.
    # @return [String]
    attr_accessor :first_name

    # The staff member last name. You must specify a last name when you add a
    # staff member.
    # @return [String]
    attr_accessor :last_name

    # The staff member’s email address.
    # @return [String]
    attr_accessor :email

    # When `true`, indicates that the staff member is male.
    # When `false`, indicates that the staff member is female.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_male

    # The staff member’s home phone number.
    # @return [String]
    attr_accessor :home_phone

    # The staff member’s work phone number.
    # @return [String]
    attr_accessor :work_phone

    # The staff member’s mobile phone number.
    # @return [String]
    attr_accessor :mobile_phone

    # The staff member’s biography. This string contains HTML.
    # @return [String]
    attr_accessor :bio

    # The first line of the staff member street address
    # @return [String]
    attr_accessor :address

    # The second line of the staff member street address, if needed.
    # @return [String]
    attr_accessor :address2

    # The staff member’s city.
    # @return [String]
    attr_accessor :city

    # The staff member’s state.
    # @return [String]
    attr_accessor :state

    # The staff member’s country.
    # @return [String]
    attr_accessor :country

    # The staff member’s postal code.
    # @return [String]
    attr_accessor :postal_code

    # When `true`, indicates that the staff member can be a class assistant.
    # @return [TrueClass | FalseClass]
    attr_accessor :class_assistant

    # When `true`, indicates that the staff member can be a class assistant.
    # @return [TrueClass | FalseClass]
    attr_accessor :class_assistant2

    # When `true`, indicates that the staff member is an independent contractor.
    # When `false`, indicates that the staff member is not an independent
    # contractor.
    # @return [TrueClass | FalseClass]
    attr_accessor :independent_contractor

    # When `true`, indicates that the staff member offers appointments.<br />
    # When `false`, indicates that the staff member does not offer appointments.
    # @return [TrueClass | FalseClass]
    attr_accessor :appointment_instructor

    # When `true`, indicates that the staff member can be scheduled for
    # overlapping services.<br />
    # When `false`, indicates that the staff member does not offer appointments.
    # @return [TrueClass | FalseClass]
    attr_accessor :always_allow_double_booking

    # When `true`, indicates that the staff member can teach classes.
    # When `false`, indicates that the staff member cannot teach classes.
    # @return [TrueClass | FalseClass]
    attr_accessor :class_teacher

    # The start date of employment
    # @return [DateTime]
    attr_accessor :employment_start

    # The end date of employment
    # @return [DateTime]
    attr_accessor :employment_end

    # If configured by the business owner, this field determines a staff
    # member’s weight when sorting. Use this field to sort staff members on your
    # interface.
    # @return [Integer]
    attr_accessor :sort_order

    # A list of providerIDs for the staff.  In the US it is one per staff and is
    # numeric, otherwise it can be a list and is alpha-numeric
    # for more information see <a href="
    # https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?langua
    # ge=en_US" target="blank">Provider IDs</a>
    # @return [Array[String]]
    attr_accessor :provider_i_ds

    # Indicates if the staff member is active. Staff member cannot be
    # deactivated if they have future classes or appointments.
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # Staff Member Private Notes
    # @return [String]
    attr_accessor :notes

    # The custom staff ID assigned to the staff member.
    # @return [String]
    attr_accessor :emp_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'ID'
      @_hash['first_name'] = 'FirstName'
      @_hash['last_name'] = 'LastName'
      @_hash['email'] = 'Email'
      @_hash['is_male'] = 'IsMale'
      @_hash['home_phone'] = 'HomePhone'
      @_hash['work_phone'] = 'WorkPhone'
      @_hash['mobile_phone'] = 'MobilePhone'
      @_hash['bio'] = 'Bio'
      @_hash['address'] = 'Address'
      @_hash['address2'] = 'Address2'
      @_hash['city'] = 'City'
      @_hash['state'] = 'State'
      @_hash['country'] = 'Country'
      @_hash['postal_code'] = 'PostalCode'
      @_hash['class_assistant'] = 'ClassAssistant'
      @_hash['class_assistant2'] = 'ClassAssistant2'
      @_hash['independent_contractor'] = 'IndependentContractor'
      @_hash['appointment_instructor'] = 'AppointmentInstructor'
      @_hash['always_allow_double_booking'] = 'AlwaysAllowDoubleBooking'
      @_hash['class_teacher'] = 'ClassTeacher'
      @_hash['employment_start'] = 'EmploymentStart'
      @_hash['employment_end'] = 'EmploymentEnd'
      @_hash['sort_order'] = 'SortOrder'
      @_hash['provider_i_ds'] = 'ProviderIDs'
      @_hash['active'] = 'Active'
      @_hash['notes'] = 'Notes'
      @_hash['emp_id'] = 'EmpID'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        first_name
        last_name
        email
        is_male
        home_phone
        work_phone
        mobile_phone
        bio
        address
        address2
        city
        state
        country
        postal_code
        class_assistant
        class_assistant2
        independent_contractor
        appointment_instructor
        always_allow_double_booking
        class_teacher
        employment_start
        employment_end
        sort_order
        provider_i_ds
        active
        notes
        emp_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil, first_name = SKIP, last_name = SKIP, email = SKIP,
                   is_male = SKIP, home_phone = SKIP, work_phone = SKIP,
                   mobile_phone = SKIP, bio = SKIP, address = SKIP,
                   address2 = SKIP, city = SKIP, state = SKIP, country = SKIP,
                   postal_code = SKIP, class_assistant = SKIP,
                   class_assistant2 = SKIP, independent_contractor = SKIP,
                   appointment_instructor = SKIP,
                   always_allow_double_booking = SKIP, class_teacher = SKIP,
                   employment_start = SKIP, employment_end = SKIP,
                   sort_order = SKIP, provider_i_ds = SKIP, active = SKIP,
                   notes = SKIP, emp_id = SKIP)
      @id = id
      @first_name = first_name unless first_name == SKIP
      @last_name = last_name unless last_name == SKIP
      @email = email unless email == SKIP
      @is_male = is_male unless is_male == SKIP
      @home_phone = home_phone unless home_phone == SKIP
      @work_phone = work_phone unless work_phone == SKIP
      @mobile_phone = mobile_phone unless mobile_phone == SKIP
      @bio = bio unless bio == SKIP
      @address = address unless address == SKIP
      @address2 = address2 unless address2 == SKIP
      @city = city unless city == SKIP
      @state = state unless state == SKIP
      @country = country unless country == SKIP
      @postal_code = postal_code unless postal_code == SKIP
      @class_assistant = class_assistant unless class_assistant == SKIP
      @class_assistant2 = class_assistant2 unless class_assistant2 == SKIP
      @independent_contractor = independent_contractor unless independent_contractor == SKIP
      @appointment_instructor = appointment_instructor unless appointment_instructor == SKIP
      unless always_allow_double_booking == SKIP
        @always_allow_double_booking =
          always_allow_double_booking
      end
      @class_teacher = class_teacher unless class_teacher == SKIP
      @employment_start = employment_start unless employment_start == SKIP
      @employment_end = employment_end unless employment_end == SKIP
      @sort_order = sort_order unless sort_order == SKIP
      @provider_i_ds = provider_i_ds unless provider_i_ds == SKIP
      @active = active unless active == SKIP
      @notes = notes unless notes == SKIP
      @emp_id = emp_id unless emp_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('ID') ? hash['ID'] : nil
      first_name = hash.key?('FirstName') ? hash['FirstName'] : SKIP
      last_name = hash.key?('LastName') ? hash['LastName'] : SKIP
      email = hash.key?('Email') ? hash['Email'] : SKIP
      is_male = hash.key?('IsMale') ? hash['IsMale'] : SKIP
      home_phone = hash.key?('HomePhone') ? hash['HomePhone'] : SKIP
      work_phone = hash.key?('WorkPhone') ? hash['WorkPhone'] : SKIP
      mobile_phone = hash.key?('MobilePhone') ? hash['MobilePhone'] : SKIP
      bio = hash.key?('Bio') ? hash['Bio'] : SKIP
      address = hash.key?('Address') ? hash['Address'] : SKIP
      address2 = hash.key?('Address2') ? hash['Address2'] : SKIP
      city = hash.key?('City') ? hash['City'] : SKIP
      state = hash.key?('State') ? hash['State'] : SKIP
      country = hash.key?('Country') ? hash['Country'] : SKIP
      postal_code = hash.key?('PostalCode') ? hash['PostalCode'] : SKIP
      class_assistant =
        hash.key?('ClassAssistant') ? hash['ClassAssistant'] : SKIP
      class_assistant2 =
        hash.key?('ClassAssistant2') ? hash['ClassAssistant2'] : SKIP
      independent_contractor =
        hash.key?('IndependentContractor') ? hash['IndependentContractor'] : SKIP
      appointment_instructor =
        hash.key?('AppointmentInstructor') ? hash['AppointmentInstructor'] : SKIP
      always_allow_double_booking =
        hash.key?('AlwaysAllowDoubleBooking') ? hash['AlwaysAllowDoubleBooking'] : SKIP
      class_teacher = hash.key?('ClassTeacher') ? hash['ClassTeacher'] : SKIP
      employment_start = if hash.key?('EmploymentStart')
                           (DateTimeHelper.from_rfc3339(hash['EmploymentStart']) if hash['EmploymentStart'])
                         else
                           SKIP
                         end
      employment_end = if hash.key?('EmploymentEnd')
                         (DateTimeHelper.from_rfc3339(hash['EmploymentEnd']) if hash['EmploymentEnd'])
                       else
                         SKIP
                       end
      sort_order = hash.key?('SortOrder') ? hash['SortOrder'] : SKIP
      provider_i_ds = hash.key?('ProviderIDs') ? hash['ProviderIDs'] : SKIP
      active = hash.key?('Active') ? hash['Active'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      emp_id = hash.key?('EmpID') ? hash['EmpID'] : SKIP

      # Create object from extracted values.
      UpdateStaffRequest.new(id,
                             first_name,
                             last_name,
                             email,
                             is_male,
                             home_phone,
                             work_phone,
                             mobile_phone,
                             bio,
                             address,
                             address2,
                             city,
                             state,
                             country,
                             postal_code,
                             class_assistant,
                             class_assistant2,
                             independent_contractor,
                             appointment_instructor,
                             always_allow_double_booking,
                             class_teacher,
                             employment_start,
                             employment_end,
                             sort_order,
                             provider_i_ds,
                             active,
                             notes,
                             emp_id)
    end

    def to_custom_employment_start
      DateTimeHelper.to_rfc3339(employment_start)
    end

    def to_custom_employment_end
      DateTimeHelper.to_rfc3339(employment_end)
    end
  end
end
