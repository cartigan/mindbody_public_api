# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # AssignStaffSessionTypeResponse Model.
  class AssignStaffSessionTypeResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Staff member assigned to the session type
    # @return [Integer]
    attr_accessor :staff_id

    # The session type the staff member is assigned to
    # @return [Integer]
    attr_accessor :session_type_id

    # The pay rate type name
    # Can be: "Flat", "Percent", or "No Pay"
    # @return [String]
    attr_accessor :pay_rate_type

    # The pay rate amount. It is interpreted based on the value of PayRateTypeId
    # @return [Float]
    attr_accessor :pay_rate_amount

    # The staff specific amount of time that a session of this type typically
    # lasts.
    # @return [Integer]
    attr_accessor :time_length

    # Prep time in minutes
    # @return [Integer]
    attr_accessor :prep_time

    # Finish time in minutes
    # @return [Integer]
    attr_accessor :finish_time

    # Whether this association is active
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['staff_id'] = 'StaffId'
      @_hash['session_type_id'] = 'SessionTypeId'
      @_hash['pay_rate_type'] = 'PayRateType'
      @_hash['pay_rate_amount'] = 'PayRateAmount'
      @_hash['time_length'] = 'TimeLength'
      @_hash['prep_time'] = 'PrepTime'
      @_hash['finish_time'] = 'FinishTime'
      @_hash['active'] = 'Active'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        staff_id
        session_type_id
        pay_rate_type
        pay_rate_amount
        time_length
        prep_time
        finish_time
        active
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(staff_id = SKIP, session_type_id = SKIP,
                   pay_rate_type = SKIP, pay_rate_amount = SKIP,
                   time_length = SKIP, prep_time = SKIP, finish_time = SKIP,
                   active = SKIP)
      @staff_id = staff_id unless staff_id == SKIP
      @session_type_id = session_type_id unless session_type_id == SKIP
      @pay_rate_type = pay_rate_type unless pay_rate_type == SKIP
      @pay_rate_amount = pay_rate_amount unless pay_rate_amount == SKIP
      @time_length = time_length unless time_length == SKIP
      @prep_time = prep_time unless prep_time == SKIP
      @finish_time = finish_time unless finish_time == SKIP
      @active = active unless active == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      session_type_id =
        hash.key?('SessionTypeId') ? hash['SessionTypeId'] : SKIP
      pay_rate_type = hash.key?('PayRateType') ? hash['PayRateType'] : SKIP
      pay_rate_amount =
        hash.key?('PayRateAmount') ? hash['PayRateAmount'] : SKIP
      time_length = hash.key?('TimeLength') ? hash['TimeLength'] : SKIP
      prep_time = hash.key?('PrepTime') ? hash['PrepTime'] : SKIP
      finish_time = hash.key?('FinishTime') ? hash['FinishTime'] : SKIP
      active = hash.key?('Active') ? hash['Active'] : SKIP

      # Create object from extracted values.
      AssignStaffSessionTypeResponse.new(staff_id,
                                         session_type_id,
                                         pay_rate_type,
                                         pay_rate_amount,
                                         time_length,
                                         prep_time,
                                         finish_time,
                                         active)
    end
  end
end
