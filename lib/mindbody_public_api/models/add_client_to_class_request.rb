# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # AddClientToClassRequest Model.
  class AddClientToClassRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the client who is being booked into the class
    # @return [String]
    attr_accessor :client_id

    # The ID of the class into which the client is being booked
    # @return [Integer]
    attr_accessor :class_id

    # When `true`, indicates that input information is validated, but not
    # committed.<br />
    # When `false`, the information is committed and the database is
    # affected.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, the client must have an active, usable pricing option on
    # their account.<br />
    # When `false` or omitted, an active pricing option is not required to
    # complete the client’s booking.
    # @return [TrueClass | FalseClass]
    attr_accessor :require_payment

    # When `true`, indicates that the client should be added to a specific class
    # waiting list.<br />
    # When `false`, the client should not be added to the waiting list.
    # @return [TrueClass | FalseClass]
    attr_accessor :waitlist

    # When `true`, the subscriber’s configured Booking Confirmation automatic
    # email is sent to the client. Note that an email is sent only if the client
    # has an email address and automatic emails have been set up.<br />
    # When `false`, indicates that the client does not receive emails.<br />
    # Default: **false**
    # **Note**: When the Authorization header is passed and the SendEmail is set
    # to `true`, then an email will be sent.
    # When the Authorization header is passed and the SendEmail is set to
    # `false`, then an email will not be sent.
    # When the Authorization header is not passed and the SendEmail is set to
    # either `true` or `false`, then an email will not be sent.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # The ID of the waiting list entry from which you are moving a client into a
    # class.
    # @return [Integer]
    attr_accessor :waitlist_entry_id

    # The ID of the pricing option on the client’s account that you want to use
    # to pay for this booking, if payment is required at the time of the update.
    # @return [Integer]
    attr_accessor :client_service_id

    # When `true`, cross regional series are checked and used if applicable.
    # @return [TrueClass | FalseClass]
    attr_accessor :cross_regional_booking

    # If the request is cross regional, use a purchased pricing option from this
    # specified site. If omitted, an attempt is made to use an applicable
    # pricing option from the local site.
    # @return [Integer]
    attr_accessor :cross_regional_booking_client_service_site_id

    # The UniqueID of the client who is being booked into the class
    # @return [Integer]
    attr_accessor :unique_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_id'] = 'ClientId'
      @_hash['class_id'] = 'ClassId'
      @_hash['test'] = 'Test'
      @_hash['require_payment'] = 'RequirePayment'
      @_hash['waitlist'] = 'Waitlist'
      @_hash['send_email'] = 'SendEmail'
      @_hash['waitlist_entry_id'] = 'WaitlistEntryId'
      @_hash['client_service_id'] = 'ClientServiceId'
      @_hash['cross_regional_booking'] = 'CrossRegionalBooking'
      @_hash['cross_regional_booking_client_service_site_id'] =
        'CrossRegionalBookingClientServiceSiteId'
      @_hash['unique_id'] = 'UniqueId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        test
        require_payment
        waitlist
        send_email
        waitlist_entry_id
        client_service_id
        cross_regional_booking
        cross_regional_booking_client_service_site_id
        unique_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, class_id = nil, test = SKIP,
                   require_payment = SKIP, waitlist = SKIP, send_email = SKIP,
                   waitlist_entry_id = SKIP, client_service_id = SKIP,
                   cross_regional_booking = SKIP,
                   cross_regional_booking_client_service_site_id = SKIP,
                   unique_id = SKIP)
      @client_id = client_id
      @class_id = class_id
      @test = test unless test == SKIP
      @require_payment = require_payment unless require_payment == SKIP
      @waitlist = waitlist unless waitlist == SKIP
      @send_email = send_email unless send_email == SKIP
      @waitlist_entry_id = waitlist_entry_id unless waitlist_entry_id == SKIP
      @client_service_id = client_service_id unless client_service_id == SKIP
      @cross_regional_booking = cross_regional_booking unless cross_regional_booking == SKIP
      unless cross_regional_booking_client_service_site_id == SKIP
        @cross_regional_booking_client_service_site_id =
          cross_regional_booking_client_service_site_id
      end
      @unique_id = unique_id unless unique_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      class_id = hash.key?('ClassId') ? hash['ClassId'] : nil
      test = hash.key?('Test') ? hash['Test'] : SKIP
      require_payment =
        hash.key?('RequirePayment') ? hash['RequirePayment'] : SKIP
      waitlist = hash.key?('Waitlist') ? hash['Waitlist'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP
      waitlist_entry_id =
        hash.key?('WaitlistEntryId') ? hash['WaitlistEntryId'] : SKIP
      client_service_id =
        hash.key?('ClientServiceId') ? hash['ClientServiceId'] : SKIP
      cross_regional_booking =
        hash.key?('CrossRegionalBooking') ? hash['CrossRegionalBooking'] : SKIP
      cross_regional_booking_client_service_site_id =
        hash.key?('CrossRegionalBookingClientServiceSiteId') ? hash['CrossRegionalBookingClientServiceSiteId'] : SKIP
      unique_id = hash.key?('UniqueId') ? hash['UniqueId'] : SKIP

      # Create object from extracted values.
      AddClientToClassRequest.new(client_id,
                                  class_id,
                                  test,
                                  require_payment,
                                  waitlist,
                                  send_email,
                                  waitlist_entry_id,
                                  client_service_id,
                                  cross_regional_booking,
                                  cross_regional_booking_client_service_site_id,
                                  unique_id)
    end
  end
end
