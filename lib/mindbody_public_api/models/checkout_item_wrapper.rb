# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # CheckoutItemWrapper Model.
  class CheckoutItemWrapper < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [CheckoutItem]
    attr_accessor :item

    # The amount the item is discounted. This parameter is ignored for packages.
    # @return [Float]
    attr_accessor :discount_amount

    # A list of appointments to be booked then paid for by this item. This
    # parameter applies only to pricing option items.
    # @return [Array[CheckoutAppointmentBookingRequest]]
    attr_accessor :appointment_booking_requests

    # A list of enrollment IDs that this item is to pay for. This parameter
    # applies only to pricing option items.
    # @return [Array[Integer]]
    attr_accessor :enrollment_ids

    # A list of class IDs that this item is to pay for. This parameter applies
    # only to pricing option items.
    # @return [Array[Integer]]
    attr_accessor :class_ids

    # A list of course IDs that this item is to pay for. This parameter applies
    # only to pricing option items.
    # @return [Array[Integer]]
    attr_accessor :course_ids

    # A list of visit IDs that this item is to pay for. This parameter applies
    # only to pricing option items.
    # @return [Array[Integer]]
    attr_accessor :visit_ids

    # A list of appointment IDs that this item is to reconcile.
    # @return [Array[Integer]]
    attr_accessor :appointment_ids

    # The itemâ€™s unique ID within the cart.
    # @return [Integer]
    attr_accessor :id

    # The number of this item to be purchased.
    # @return [Integer]
    attr_accessor :quantity

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['item'] = 'Item'
      @_hash['discount_amount'] = 'DiscountAmount'
      @_hash['appointment_booking_requests'] = 'AppointmentBookingRequests'
      @_hash['enrollment_ids'] = 'EnrollmentIds'
      @_hash['class_ids'] = 'ClassIds'
      @_hash['course_ids'] = 'CourseIds'
      @_hash['visit_ids'] = 'VisitIds'
      @_hash['appointment_ids'] = 'AppointmentIds'
      @_hash['id'] = 'Id'
      @_hash['quantity'] = 'Quantity'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        item
        discount_amount
        appointment_booking_requests
        enrollment_ids
        class_ids
        course_ids
        visit_ids
        appointment_ids
        id
        quantity
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(item = SKIP, discount_amount = SKIP,
                   appointment_booking_requests = SKIP, enrollment_ids = SKIP,
                   class_ids = SKIP, course_ids = SKIP, visit_ids = SKIP,
                   appointment_ids = SKIP, id = SKIP, quantity = SKIP)
      @item = item unless item == SKIP
      @discount_amount = discount_amount unless discount_amount == SKIP
      unless appointment_booking_requests == SKIP
        @appointment_booking_requests =
          appointment_booking_requests
      end
      @enrollment_ids = enrollment_ids unless enrollment_ids == SKIP
      @class_ids = class_ids unless class_ids == SKIP
      @course_ids = course_ids unless course_ids == SKIP
      @visit_ids = visit_ids unless visit_ids == SKIP
      @appointment_ids = appointment_ids unless appointment_ids == SKIP
      @id = id unless id == SKIP
      @quantity = quantity unless quantity == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      item = CheckoutItem.from_hash(hash['Item']) if hash['Item']
      discount_amount =
        hash.key?('DiscountAmount') ? hash['DiscountAmount'] : SKIP
      # Parameter is an array, so we need to iterate through it
      appointment_booking_requests = nil
      unless hash['AppointmentBookingRequests'].nil?
        appointment_booking_requests = []
        hash['AppointmentBookingRequests'].each do |structure|
          appointment_booking_requests << (CheckoutAppointmentBookingRequest.from_hash(structure) if structure)
        end
      end

      appointment_booking_requests = SKIP unless hash.key?('AppointmentBookingRequests')
      enrollment_ids = hash.key?('EnrollmentIds') ? hash['EnrollmentIds'] : SKIP
      class_ids = hash.key?('ClassIds') ? hash['ClassIds'] : SKIP
      course_ids = hash.key?('CourseIds') ? hash['CourseIds'] : SKIP
      visit_ids = hash.key?('VisitIds') ? hash['VisitIds'] : SKIP
      appointment_ids =
        hash.key?('AppointmentIds') ? hash['AppointmentIds'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      quantity = hash.key?('Quantity') ? hash['Quantity'] : SKIP

      # Create object from extracted values.
      CheckoutItemWrapper.new(item,
                              discount_amount,
                              appointment_booking_requests,
                              enrollment_ids,
                              class_ids,
                              course_ids,
                              visit_ids,
                              appointment_ids,
                              id,
                              quantity)
    end
  end
end
