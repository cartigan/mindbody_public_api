# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Remove Clients From Classes Request
  class RemoveClientsFromClassesRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # This object includes
    # `ClientIds`: List of the RSSID(string) of the clients to remove from the
    # specified class.
    #  `ClassId`: The ID(number) of the class that you want to remove the
    # clients from.
    # @return [Array[ClassClientDetail]]
    attr_accessor :details

    # When `true`, the request ensures that its parameters are valid without
    # affecting real data.<br />
    # When `false`, the request performs as intended and may affect live client
    # data.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, indicates that the client should be sent an email. Depending
    # on the site and client settings, an email may or may not be sent.<br />
    # Default: **false**
    # **Note**: When the Authorization header is passed and the SendEmail is set
    # to `true`, then an email will be sent.
    # When the Authorization header is passed and the SendEmail is set to
    # `false`, then an email will not be sent.
    # When the Authorization header is not passed and the SendEmail is set to
    # either `true` or `false`, then an email will not be sent.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # When `true`, indicates that the client is to be late cancelled from the
    # class.<br />
    # When `false`, indicates that the client is to be early cancelled from the
    # class.<br />
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :late_cancel

    # Number of results to include, defaults to 100
    # @return [Integer]
    attr_accessor :limit

    # Page offset, defaults to 0.
    # @return [Integer]
    attr_accessor :offset

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['details'] = 'Details'
      @_hash['test'] = 'Test'
      @_hash['send_email'] = 'SendEmail'
      @_hash['late_cancel'] = 'LateCancel'
      @_hash['limit'] = 'Limit'
      @_hash['offset'] = 'Offset'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        details
        test
        send_email
        late_cancel
        limit
        offset
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(details = SKIP, test = SKIP, send_email = SKIP,
                   late_cancel = SKIP, limit = SKIP, offset = SKIP)
      @details = details unless details == SKIP
      @test = test unless test == SKIP
      @send_email = send_email unless send_email == SKIP
      @late_cancel = late_cancel unless late_cancel == SKIP
      @limit = limit unless limit == SKIP
      @offset = offset unless offset == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      details = nil
      unless hash['Details'].nil?
        details = []
        hash['Details'].each do |structure|
          details << (ClassClientDetail.from_hash(structure) if structure)
        end
      end

      details = SKIP unless hash.key?('Details')
      test = hash.key?('Test') ? hash['Test'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP
      late_cancel = hash.key?('LateCancel') ? hash['LateCancel'] : SKIP
      limit = hash.key?('Limit') ? hash['Limit'] : SKIP
      offset = hash.key?('Offset') ? hash['Offset'] : SKIP

      # Create object from extracted values.
      RemoveClientsFromClassesRequest.new(details,
                                          test,
                                          send_email,
                                          late_cancel,
                                          limit,
                                          offset)
    end
  end
end
