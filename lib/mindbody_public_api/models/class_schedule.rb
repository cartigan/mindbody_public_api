# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Represents a single class instance. The class meets at the start time, goes
  # until the end time.
  class ClassSchedule < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Contains information about a class.
    # @return [Array[Class]]
    attr_accessor :classes

    # Contains information about clients.
    # @return [Array[Client]]
    attr_accessor :clients

    # A course.
    # @return [Course]
    attr_accessor :course

    # The semester ID for the enrollment (if any).
    # @return [Integer]
    attr_accessor :semester_id

    # When `true`, indicates that the enrollment shows in consumer mode, has not
    # started yet, and there is room in each class of the enrollment.<br />
    # When `false`, indicates that either the enrollment does not show in
    # consumer mode, has already started, or there is no room in some classes of
    # the enrollment.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_available

    # The unique ID of the class schedule.
    # @return [Integer]
    attr_accessor :id

    # Represents a class definition. The class meets at the start time, goes
    # until the end time.
    # @return [ClassDescription]
    attr_accessor :class_description

    # When `true`, indicates that this schedule occurs on Sundays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_sunday

    # When `true`, indicates that this schedule occurs on Mondays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_monday

    # When `true`, indicates that this schedule occurs on Tuesdays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_tuesday

    # When `true`, indicates that this schedule occurs on Wednesdays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_wednesday

    # When `true`, indicates that this schedule occurs on Thursdays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_thursday

    # When `true`, indicates that this schedule occurs on Fridays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_friday

    # When `true`, indicates that this schedule occurs on Saturdays.
    # @return [TrueClass | FalseClass]
    attr_accessor :day_saturday

    # When `true`, indicates that the enrollment allows booking after the
    # enrollment has started.
    # @return [TrueClass | FalseClass]
    attr_accessor :allow_open_enrollment

    # When `true`, indicates that this the enrollment shows in consumer mode,
    # the enrollment has not started yet, and there is room in each class of the
    # enrollment.
    # @return [TrueClass | FalseClass]
    attr_accessor :allow_date_forward_enrollment

    # The time this class schedule starts.
    # @return [DateTime]
    attr_accessor :start_time

    # The time this class schedule ends.
    # @return [DateTime]
    attr_accessor :end_time

    # The date this class schedule starts.
    # @return [DateTime]
    attr_accessor :start_date

    # The date this class schedule ends.
    # @return [DateTime]
    attr_accessor :end_date

    # The Staff
    # @return [Staff]
    attr_accessor :staff

    # The Staff
    # @return [Location]
    attr_accessor :location

    # The class schedule recurrence type.
    # @return [FrequencyTypeEnum]
    attr_accessor :frequency_type

    # The interval between class schedule occurencies.
    # @return [Integer]
    attr_accessor :frequency_interval

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['classes'] = 'Classes'
      @_hash['clients'] = 'Clients'
      @_hash['course'] = 'Course'
      @_hash['semester_id'] = 'SemesterId'
      @_hash['is_available'] = 'IsAvailable'
      @_hash['id'] = 'Id'
      @_hash['class_description'] = 'ClassDescription'
      @_hash['day_sunday'] = 'DaySunday'
      @_hash['day_monday'] = 'DayMonday'
      @_hash['day_tuesday'] = 'DayTuesday'
      @_hash['day_wednesday'] = 'DayWednesday'
      @_hash['day_thursday'] = 'DayThursday'
      @_hash['day_friday'] = 'DayFriday'
      @_hash['day_saturday'] = 'DaySaturday'
      @_hash['allow_open_enrollment'] = 'AllowOpenEnrollment'
      @_hash['allow_date_forward_enrollment'] = 'AllowDateForwardEnrollment'
      @_hash['start_time'] = 'StartTime'
      @_hash['end_time'] = 'EndTime'
      @_hash['start_date'] = 'StartDate'
      @_hash['end_date'] = 'EndDate'
      @_hash['staff'] = 'Staff'
      @_hash['location'] = 'Location'
      @_hash['frequency_type'] = 'FrequencyType'
      @_hash['frequency_interval'] = 'FrequencyInterval'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        classes
        clients
        course
        semester_id
        is_available
        id
        class_description
        day_sunday
        day_monday
        day_tuesday
        day_wednesday
        day_thursday
        day_friday
        day_saturday
        allow_open_enrollment
        allow_date_forward_enrollment
        start_time
        end_time
        start_date
        end_date
        staff
        location
        frequency_type
        frequency_interval
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(classes = SKIP, clients = SKIP, course = SKIP,
                   semester_id = SKIP, is_available = SKIP, id = SKIP,
                   class_description = SKIP, day_sunday = SKIP,
                   day_monday = SKIP, day_tuesday = SKIP, day_wednesday = SKIP,
                   day_thursday = SKIP, day_friday = SKIP, day_saturday = SKIP,
                   allow_open_enrollment = SKIP,
                   allow_date_forward_enrollment = SKIP, start_time = SKIP,
                   end_time = SKIP, start_date = SKIP, end_date = SKIP,
                   staff = SKIP, location = SKIP, frequency_type = SKIP,
                   frequency_interval = SKIP)
      @classes = classes unless classes == SKIP
      @clients = clients unless clients == SKIP
      @course = course unless course == SKIP
      @semester_id = semester_id unless semester_id == SKIP
      @is_available = is_available unless is_available == SKIP
      @id = id unless id == SKIP
      @class_description = class_description unless class_description == SKIP
      @day_sunday = day_sunday unless day_sunday == SKIP
      @day_monday = day_monday unless day_monday == SKIP
      @day_tuesday = day_tuesday unless day_tuesday == SKIP
      @day_wednesday = day_wednesday unless day_wednesday == SKIP
      @day_thursday = day_thursday unless day_thursday == SKIP
      @day_friday = day_friday unless day_friday == SKIP
      @day_saturday = day_saturday unless day_saturday == SKIP
      @allow_open_enrollment = allow_open_enrollment unless allow_open_enrollment == SKIP
      unless allow_date_forward_enrollment == SKIP
        @allow_date_forward_enrollment =
          allow_date_forward_enrollment
      end
      @start_time = start_time unless start_time == SKIP
      @end_time = end_time unless end_time == SKIP
      @start_date = start_date unless start_date == SKIP
      @end_date = end_date unless end_date == SKIP
      @staff = staff unless staff == SKIP
      @location = location unless location == SKIP
      @frequency_type = frequency_type unless frequency_type == SKIP
      @frequency_interval = frequency_interval unless frequency_interval == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      classes = nil
      unless hash['Classes'].nil?
        classes = []
        hash['Classes'].each do |structure|
          classes << (Class.from_hash(structure) if structure)
        end
      end

      classes = SKIP unless hash.key?('Classes')
      # Parameter is an array, so we need to iterate through it
      clients = nil
      unless hash['Clients'].nil?
        clients = []
        hash['Clients'].each do |structure|
          clients << (Client.from_hash(structure) if structure)
        end
      end

      clients = SKIP unless hash.key?('Clients')
      course = Course.from_hash(hash['Course']) if hash['Course']
      semester_id = hash.key?('SemesterId') ? hash['SemesterId'] : SKIP
      is_available = hash.key?('IsAvailable') ? hash['IsAvailable'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      class_description = ClassDescription.from_hash(hash['ClassDescription']) if
        hash['ClassDescription']
      day_sunday = hash.key?('DaySunday') ? hash['DaySunday'] : SKIP
      day_monday = hash.key?('DayMonday') ? hash['DayMonday'] : SKIP
      day_tuesday = hash.key?('DayTuesday') ? hash['DayTuesday'] : SKIP
      day_wednesday = hash.key?('DayWednesday') ? hash['DayWednesday'] : SKIP
      day_thursday = hash.key?('DayThursday') ? hash['DayThursday'] : SKIP
      day_friday = hash.key?('DayFriday') ? hash['DayFriday'] : SKIP
      day_saturday = hash.key?('DaySaturday') ? hash['DaySaturday'] : SKIP
      allow_open_enrollment =
        hash.key?('AllowOpenEnrollment') ? hash['AllowOpenEnrollment'] : SKIP
      allow_date_forward_enrollment =
        hash.key?('AllowDateForwardEnrollment') ? hash['AllowDateForwardEnrollment'] : SKIP
      start_time = if hash.key?('StartTime')
                     (DateTimeHelper.from_rfc3339(hash['StartTime']) if hash['StartTime'])
                   else
                     SKIP
                   end
      end_time = if hash.key?('EndTime')
                   (DateTimeHelper.from_rfc3339(hash['EndTime']) if hash['EndTime'])
                 else
                   SKIP
                 end
      start_date = if hash.key?('StartDate')
                     (DateTimeHelper.from_rfc3339(hash['StartDate']) if hash['StartDate'])
                   else
                     SKIP
                   end
      end_date = if hash.key?('EndDate')
                   (DateTimeHelper.from_rfc3339(hash['EndDate']) if hash['EndDate'])
                 else
                   SKIP
                 end
      staff = Staff.from_hash(hash['Staff']) if hash['Staff']
      location = Location.from_hash(hash['Location']) if hash['Location']
      frequency_type = hash.key?('FrequencyType') ? hash['FrequencyType'] : SKIP
      frequency_interval =
        hash.key?('FrequencyInterval') ? hash['FrequencyInterval'] : SKIP

      # Create object from extracted values.
      ClassSchedule.new(classes,
                        clients,
                        course,
                        semester_id,
                        is_available,
                        id,
                        class_description,
                        day_sunday,
                        day_monday,
                        day_tuesday,
                        day_wednesday,
                        day_thursday,
                        day_friday,
                        day_saturday,
                        allow_open_enrollment,
                        allow_date_forward_enrollment,
                        start_time,
                        end_time,
                        start_date,
                        end_date,
                        staff,
                        location,
                        frequency_type,
                        frequency_interval)
    end

    def to_custom_start_time
      DateTimeHelper.to_rfc3339(start_time)
    end

    def to_custom_end_time
      DateTimeHelper.to_rfc3339(end_time)
    end

    def to_custom_start_date
      DateTimeHelper.to_rfc3339(start_date)
    end

    def to_custom_end_date
      DateTimeHelper.to_rfc3339(end_date)
    end
  end
end
