# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # POST UserToken/Issue successful response
  class IssueResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :token_type

    # The authentication token value.
    # @return [String]
    attr_accessor :access_token

    # Token expiration in UTC.
    # @return [DateTime]
    attr_accessor :expires

    # Token expiration in UTC.
    # @return [User]
    attr_accessor :user

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['token_type'] = 'TokenType'
      @_hash['access_token'] = 'AccessToken'
      @_hash['expires'] = 'Expires'
      @_hash['user'] = 'User'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        token_type
        access_token
        expires
        user
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(token_type = SKIP, access_token = SKIP, expires = SKIP,
                   user = SKIP)
      @token_type = token_type unless token_type == SKIP
      @access_token = access_token unless access_token == SKIP
      @expires = expires unless expires == SKIP
      @user = user unless user == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      token_type = hash.key?('TokenType') ? hash['TokenType'] : SKIP
      access_token = hash.key?('AccessToken') ? hash['AccessToken'] : SKIP
      expires = if hash.key?('Expires')
                  (DateTimeHelper.from_rfc3339(hash['Expires']) if hash['Expires'])
                else
                  SKIP
                end
      user = User.from_hash(hash['User']) if hash['User']

      # Create object from extracted values.
      IssueResponse.new(token_type,
                        access_token,
                        expires,
                        user)
    end

    def to_custom_expires
      DateTimeHelper.to_rfc3339(expires)
    end
  end
end
