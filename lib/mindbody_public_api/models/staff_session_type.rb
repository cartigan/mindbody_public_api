# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # StaffSessionType Model.
  class StaffSessionType < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The staff member Id
    # @return [Integer]
    attr_accessor :staff_id

    # Contains the class description session type.
    # @return [Type2Enum]
    attr_accessor :type

    # This session type’s unique Id.
    # @return [Integer]
    attr_accessor :id

    # The name of this session type.
    # @return [String]
    attr_accessor :name

    # The number of sessions that this session type deducts from the pricing
    # option used to pay for this type of session.
    # @return [Integer]
    attr_accessor :num_deducted

    # This session type’s service category Id.
    # @return [Integer]
    attr_accessor :program_id

    # This session type’s category.
    # @return [String]
    attr_accessor :category

    # This session type’s category Id.
    # @return [Integer]
    attr_accessor :category_id

    # This session type’s subcategory.
    # @return [String]
    attr_accessor :subcategory

    # This session type’s subcategory Id.
    # @return [Integer]
    attr_accessor :subcategory_id

    # This session type’s subcategory Id.
    # @return [Integer]
    attr_accessor :time_length

    # Prep time in minutes
    # @return [Integer]
    attr_accessor :prep_time

    # Finish time in minutes
    # @return [Integer]
    attr_accessor :finish_time

    # The pay rate type
    # @return [String]
    attr_accessor :pay_rate_type

    # The pay rate amount
    # @return [Float]
    attr_accessor :pay_rate_amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['staff_id'] = 'StaffId'
      @_hash['type'] = 'Type'
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['num_deducted'] = 'NumDeducted'
      @_hash['program_id'] = 'ProgramId'
      @_hash['category'] = 'Category'
      @_hash['category_id'] = 'CategoryId'
      @_hash['subcategory'] = 'Subcategory'
      @_hash['subcategory_id'] = 'SubcategoryId'
      @_hash['time_length'] = 'TimeLength'
      @_hash['prep_time'] = 'PrepTime'
      @_hash['finish_time'] = 'FinishTime'
      @_hash['pay_rate_type'] = 'PayRateType'
      @_hash['pay_rate_amount'] = 'PayRateAmount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        staff_id
        type
        id
        name
        num_deducted
        program_id
        category
        category_id
        subcategory
        subcategory_id
        time_length
        prep_time
        finish_time
        pay_rate_type
        pay_rate_amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(staff_id = SKIP, type = SKIP, id = SKIP, name = SKIP,
                   num_deducted = SKIP, program_id = SKIP, category = SKIP,
                   category_id = SKIP, subcategory = SKIP,
                   subcategory_id = SKIP, time_length = SKIP, prep_time = SKIP,
                   finish_time = SKIP, pay_rate_type = SKIP,
                   pay_rate_amount = SKIP)
      @staff_id = staff_id unless staff_id == SKIP
      @type = type unless type == SKIP
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @num_deducted = num_deducted unless num_deducted == SKIP
      @program_id = program_id unless program_id == SKIP
      @category = category unless category == SKIP
      @category_id = category_id unless category_id == SKIP
      @subcategory = subcategory unless subcategory == SKIP
      @subcategory_id = subcategory_id unless subcategory_id == SKIP
      @time_length = time_length unless time_length == SKIP
      @prep_time = prep_time unless prep_time == SKIP
      @finish_time = finish_time unless finish_time == SKIP
      @pay_rate_type = pay_rate_type unless pay_rate_type == SKIP
      @pay_rate_amount = pay_rate_amount unless pay_rate_amount == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : SKIP
      type = hash.key?('Type') ? hash['Type'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      num_deducted = hash.key?('NumDeducted') ? hash['NumDeducted'] : SKIP
      program_id = hash.key?('ProgramId') ? hash['ProgramId'] : SKIP
      category = hash.key?('Category') ? hash['Category'] : SKIP
      category_id = hash.key?('CategoryId') ? hash['CategoryId'] : SKIP
      subcategory = hash.key?('Subcategory') ? hash['Subcategory'] : SKIP
      subcategory_id = hash.key?('SubcategoryId') ? hash['SubcategoryId'] : SKIP
      time_length = hash.key?('TimeLength') ? hash['TimeLength'] : SKIP
      prep_time = hash.key?('PrepTime') ? hash['PrepTime'] : SKIP
      finish_time = hash.key?('FinishTime') ? hash['FinishTime'] : SKIP
      pay_rate_type = hash.key?('PayRateType') ? hash['PayRateType'] : SKIP
      pay_rate_amount =
        hash.key?('PayRateAmount') ? hash['PayRateAmount'] : SKIP

      # Create object from extracted values.
      StaffSessionType.new(staff_id,
                           type,
                           id,
                           name,
                           num_deducted,
                           program_id,
                           category,
                           category_id,
                           subcategory,
                           subcategory_id,
                           time_length,
                           prep_time,
                           finish_time,
                           pay_rate_type,
                           pay_rate_amount)
    end
  end
end
