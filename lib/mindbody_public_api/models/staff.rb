# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # The Staff
  class Staff < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The address of the staff member who is teaching the class.
    # @return [String]
    attr_accessor :address

    # When `true`, indicates that the staff member offers appointments.<br />
    # When `false`, indicates that the staff member does not offer appointments.
    # @return [TrueClass | FalseClass]
    attr_accessor :appointment_instructor

    # When `true`, indicates that the staff member can be scheduled for
    # overlapping services.<br />
    # When `false`, indicates that the staff can only be scheduled for one
    # service at a time in any given time-frame.
    # @return [TrueClass | FalseClass]
    attr_accessor :always_allow_double_booking

    # The staff member’s biography. This string contains HTML.
    # @return [String]
    attr_accessor :bio

    # The staff member’s city.
    # @return [String]
    attr_accessor :city

    # The staff member’s country.
    # @return [String]
    attr_accessor :country

    # The staff member’s email address.
    # @return [String]
    attr_accessor :email

    # The staff member’s first name.
    # @return [String]
    attr_accessor :first_name

    # The staff member’s Nickname.
    # @return [String]
    attr_accessor :display_name

    # The staff member’s home phone number.
    # @return [String]
    attr_accessor :home_phone

    # The ID assigned to the staff member.
    # @return [Integer]
    attr_accessor :id

    # When `true`, indicates that the staff member is an independent contractor.
    # When `false`, indicates that the staff member is not an independent
    # contractor.
    # @return [TrueClass | FalseClass]
    attr_accessor :independent_contractor

    # When `true`, indicates that the staff member is male.
    # When `false`, indicates that the staff member is female.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_male

    # The staff member’s last name.
    # @return [String]
    attr_accessor :last_name

    # The staff member’s mobile phone number.
    # @return [String]
    attr_accessor :mobile_phone

    # The staff member’s name.
    # @return [String]
    attr_accessor :name

    # The staff member’s postal code.
    # @return [String]
    attr_accessor :postal_code

    # When `true`, indicates that the staff member can teach classes.
    # When `false`, indicates that the staff member cannot teach classes.
    # @return [TrueClass | FalseClass]
    attr_accessor :class_teacher

    # If configured by the business owner, this field determines a staff
    # member’s weight when sorting. Use this field to sort staff members on your
    # interface.
    # @return [Integer]
    attr_accessor :sort_order

    # The staff member’s state.
    # @return [String]
    attr_accessor :state

    # The staff member’s work phone number.
    # @return [String]
    attr_accessor :work_phone

    # The URL of the staff member’s image, if one has been uploaded.
    # @return [String]
    attr_accessor :image_url

    # Is the staff an assistant
    # @return [TrueClass | FalseClass]
    attr_accessor :class_assistant

    # Is the staff an assistant2
    # @return [TrueClass | FalseClass]
    attr_accessor :class_assistant2

    # The start date of employment
    # @return [DateTime]
    attr_accessor :employment_start

    # The end date of employment
    # @return [DateTime]
    attr_accessor :employment_end

    # A list of ProviderIds for the staff.
    # @return [Array[String]]
    attr_accessor :provider_i_ds

    # return true if staff is sales Rep 1 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep

    # return true if staff is sales Rep 2 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep2

    # return true if staff is sales Rep 3 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep3

    # return true if staff is sales Rep 4 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep4

    # return true if staff is sales Rep 5 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep5

    # return true if staff is sales Rep 6 else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :rep6

    # contains the information about the staff settings.
    # @return [StaffSetting]
    attr_accessor :staff_settings

    # A list of appointments for the staff.
    # @return [Array[Appointment]]
    attr_accessor :appointments

    # A list of unavailabilities for the staff.
    # @return [Array[Unavailability]]
    attr_accessor :unavailabilities

    # A list of availabilities for the staff.
    # @return [Array[Availability]]
    attr_accessor :availabilities

    # The EmpID assigned to the staff member.
    # @return [String]
    attr_accessor :emp_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['address'] = 'Address'
      @_hash['appointment_instructor'] = 'AppointmentInstructor'
      @_hash['always_allow_double_booking'] = 'AlwaysAllowDoubleBooking'
      @_hash['bio'] = 'Bio'
      @_hash['city'] = 'City'
      @_hash['country'] = 'Country'
      @_hash['email'] = 'Email'
      @_hash['first_name'] = 'FirstName'
      @_hash['display_name'] = 'DisplayName'
      @_hash['home_phone'] = 'HomePhone'
      @_hash['id'] = 'Id'
      @_hash['independent_contractor'] = 'IndependentContractor'
      @_hash['is_male'] = 'IsMale'
      @_hash['last_name'] = 'LastName'
      @_hash['mobile_phone'] = 'MobilePhone'
      @_hash['name'] = 'Name'
      @_hash['postal_code'] = 'PostalCode'
      @_hash['class_teacher'] = 'ClassTeacher'
      @_hash['sort_order'] = 'SortOrder'
      @_hash['state'] = 'State'
      @_hash['work_phone'] = 'WorkPhone'
      @_hash['image_url'] = 'ImageUrl'
      @_hash['class_assistant'] = 'ClassAssistant'
      @_hash['class_assistant2'] = 'ClassAssistant2'
      @_hash['employment_start'] = 'EmploymentStart'
      @_hash['employment_end'] = 'EmploymentEnd'
      @_hash['provider_i_ds'] = 'ProviderIDs'
      @_hash['rep'] = 'Rep'
      @_hash['rep2'] = 'Rep2'
      @_hash['rep3'] = 'Rep3'
      @_hash['rep4'] = 'Rep4'
      @_hash['rep5'] = 'Rep5'
      @_hash['rep6'] = 'Rep6'
      @_hash['staff_settings'] = 'StaffSettings'
      @_hash['appointments'] = 'Appointments'
      @_hash['unavailabilities'] = 'Unavailabilities'
      @_hash['availabilities'] = 'Availabilities'
      @_hash['emp_id'] = 'EmpID'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        address
        appointment_instructor
        always_allow_double_booking
        bio
        city
        country
        email
        first_name
        display_name
        home_phone
        id
        independent_contractor
        is_male
        last_name
        mobile_phone
        name
        postal_code
        class_teacher
        sort_order
        state
        work_phone
        image_url
        class_assistant
        class_assistant2
        employment_start
        employment_end
        provider_i_ds
        rep
        rep2
        rep3
        rep4
        rep5
        rep6
        staff_settings
        appointments
        unavailabilities
        availabilities
        emp_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(address = SKIP, appointment_instructor = SKIP,
                   always_allow_double_booking = SKIP, bio = SKIP, city = SKIP,
                   country = SKIP, email = SKIP, first_name = SKIP,
                   display_name = SKIP, home_phone = SKIP, id = SKIP,
                   independent_contractor = SKIP, is_male = SKIP,
                   last_name = SKIP, mobile_phone = SKIP, name = SKIP,
                   postal_code = SKIP, class_teacher = SKIP, sort_order = SKIP,
                   state = SKIP, work_phone = SKIP, image_url = SKIP,
                   class_assistant = SKIP, class_assistant2 = SKIP,
                   employment_start = SKIP, employment_end = SKIP,
                   provider_i_ds = SKIP, rep = SKIP, rep2 = SKIP, rep3 = SKIP,
                   rep4 = SKIP, rep5 = SKIP, rep6 = SKIP, staff_settings = SKIP,
                   appointments = SKIP, unavailabilities = SKIP,
                   availabilities = SKIP, emp_id = SKIP)
      @address = address unless address == SKIP
      @appointment_instructor = appointment_instructor unless appointment_instructor == SKIP
      unless always_allow_double_booking == SKIP
        @always_allow_double_booking =
          always_allow_double_booking
      end
      @bio = bio unless bio == SKIP
      @city = city unless city == SKIP
      @country = country unless country == SKIP
      @email = email unless email == SKIP
      @first_name = first_name unless first_name == SKIP
      @display_name = display_name unless display_name == SKIP
      @home_phone = home_phone unless home_phone == SKIP
      @id = id unless id == SKIP
      @independent_contractor = independent_contractor unless independent_contractor == SKIP
      @is_male = is_male unless is_male == SKIP
      @last_name = last_name unless last_name == SKIP
      @mobile_phone = mobile_phone unless mobile_phone == SKIP
      @name = name unless name == SKIP
      @postal_code = postal_code unless postal_code == SKIP
      @class_teacher = class_teacher unless class_teacher == SKIP
      @sort_order = sort_order unless sort_order == SKIP
      @state = state unless state == SKIP
      @work_phone = work_phone unless work_phone == SKIP
      @image_url = image_url unless image_url == SKIP
      @class_assistant = class_assistant unless class_assistant == SKIP
      @class_assistant2 = class_assistant2 unless class_assistant2 == SKIP
      @employment_start = employment_start unless employment_start == SKIP
      @employment_end = employment_end unless employment_end == SKIP
      @provider_i_ds = provider_i_ds unless provider_i_ds == SKIP
      @rep = rep unless rep == SKIP
      @rep2 = rep2 unless rep2 == SKIP
      @rep3 = rep3 unless rep3 == SKIP
      @rep4 = rep4 unless rep4 == SKIP
      @rep5 = rep5 unless rep5 == SKIP
      @rep6 = rep6 unless rep6 == SKIP
      @staff_settings = staff_settings unless staff_settings == SKIP
      @appointments = appointments unless appointments == SKIP
      @unavailabilities = unavailabilities unless unavailabilities == SKIP
      @availabilities = availabilities unless availabilities == SKIP
      @emp_id = emp_id unless emp_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      address = hash.key?('Address') ? hash['Address'] : SKIP
      appointment_instructor =
        hash.key?('AppointmentInstructor') ? hash['AppointmentInstructor'] : SKIP
      always_allow_double_booking =
        hash.key?('AlwaysAllowDoubleBooking') ? hash['AlwaysAllowDoubleBooking'] : SKIP
      bio = hash.key?('Bio') ? hash['Bio'] : SKIP
      city = hash.key?('City') ? hash['City'] : SKIP
      country = hash.key?('Country') ? hash['Country'] : SKIP
      email = hash.key?('Email') ? hash['Email'] : SKIP
      first_name = hash.key?('FirstName') ? hash['FirstName'] : SKIP
      display_name = hash.key?('DisplayName') ? hash['DisplayName'] : SKIP
      home_phone = hash.key?('HomePhone') ? hash['HomePhone'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      independent_contractor =
        hash.key?('IndependentContractor') ? hash['IndependentContractor'] : SKIP
      is_male = hash.key?('IsMale') ? hash['IsMale'] : SKIP
      last_name = hash.key?('LastName') ? hash['LastName'] : SKIP
      mobile_phone = hash.key?('MobilePhone') ? hash['MobilePhone'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      postal_code = hash.key?('PostalCode') ? hash['PostalCode'] : SKIP
      class_teacher = hash.key?('ClassTeacher') ? hash['ClassTeacher'] : SKIP
      sort_order = hash.key?('SortOrder') ? hash['SortOrder'] : SKIP
      state = hash.key?('State') ? hash['State'] : SKIP
      work_phone = hash.key?('WorkPhone') ? hash['WorkPhone'] : SKIP
      image_url = hash.key?('ImageUrl') ? hash['ImageUrl'] : SKIP
      class_assistant =
        hash.key?('ClassAssistant') ? hash['ClassAssistant'] : SKIP
      class_assistant2 =
        hash.key?('ClassAssistant2') ? hash['ClassAssistant2'] : SKIP
      employment_start = if hash.key?('EmploymentStart')
                           (DateTimeHelper.from_rfc3339(hash['EmploymentStart']) if hash['EmploymentStart'])
                         else
                           SKIP
                         end
      employment_end = if hash.key?('EmploymentEnd')
                         (DateTimeHelper.from_rfc3339(hash['EmploymentEnd']) if hash['EmploymentEnd'])
                       else
                         SKIP
                       end
      provider_i_ds = hash.key?('ProviderIDs') ? hash['ProviderIDs'] : SKIP
      rep = hash.key?('Rep') ? hash['Rep'] : SKIP
      rep2 = hash.key?('Rep2') ? hash['Rep2'] : SKIP
      rep3 = hash.key?('Rep3') ? hash['Rep3'] : SKIP
      rep4 = hash.key?('Rep4') ? hash['Rep4'] : SKIP
      rep5 = hash.key?('Rep5') ? hash['Rep5'] : SKIP
      rep6 = hash.key?('Rep6') ? hash['Rep6'] : SKIP
      staff_settings = StaffSetting.from_hash(hash['StaffSettings']) if hash['StaffSettings']
      # Parameter is an array, so we need to iterate through it
      appointments = nil
      unless hash['Appointments'].nil?
        appointments = []
        hash['Appointments'].each do |structure|
          appointments << (Appointment.from_hash(structure) if structure)
        end
      end

      appointments = SKIP unless hash.key?('Appointments')
      # Parameter is an array, so we need to iterate through it
      unavailabilities = nil
      unless hash['Unavailabilities'].nil?
        unavailabilities = []
        hash['Unavailabilities'].each do |structure|
          unavailabilities << (Unavailability.from_hash(structure) if structure)
        end
      end

      unavailabilities = SKIP unless hash.key?('Unavailabilities')
      # Parameter is an array, so we need to iterate through it
      availabilities = nil
      unless hash['Availabilities'].nil?
        availabilities = []
        hash['Availabilities'].each do |structure|
          availabilities << (Availability.from_hash(structure) if structure)
        end
      end

      availabilities = SKIP unless hash.key?('Availabilities')
      emp_id = hash.key?('EmpID') ? hash['EmpID'] : SKIP

      # Create object from extracted values.
      Staff.new(address,
                appointment_instructor,
                always_allow_double_booking,
                bio,
                city,
                country,
                email,
                first_name,
                display_name,
                home_phone,
                id,
                independent_contractor,
                is_male,
                last_name,
                mobile_phone,
                name,
                postal_code,
                class_teacher,
                sort_order,
                state,
                work_phone,
                image_url,
                class_assistant,
                class_assistant2,
                employment_start,
                employment_end,
                provider_i_ds,
                rep,
                rep2,
                rep3,
                rep4,
                rep5,
                rep6,
                staff_settings,
                appointments,
                unavailabilities,
                availabilities,
                emp_id)
    end

    def to_custom_employment_start
      DateTimeHelper.to_rfc3339(employment_start)
    end

    def to_custom_employment_end
      DateTimeHelper.to_rfc3339(employment_end)
    end
  end
end
