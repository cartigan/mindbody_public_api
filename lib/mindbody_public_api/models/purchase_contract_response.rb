# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # PurchaseContractResponse Model.
  class PurchaseContractResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the client who is purchasing the contract.
    # @return [String]
    attr_accessor :client_id

    # The ID of the location where the contract is being purchased.
    # @return [Integer]
    attr_accessor :location_id

    # The ID of the general contract being purchased.
    # @return [Integer]
    attr_accessor :contract_id

    # The ID of the specific contract being purchased by this specific client,
    # not to be confused with the `ContractId`, which refers to a general
    # contract that the business offers.
    # @return [Integer]
    attr_accessor :client_contract_id

    # Totals for the purchase
    # @return [PurchaseContractResponseTotals]
    attr_accessor :totals

    # Contains information only if SCA challenge is indicated.
    # @return [Array[PaymentProcessingFailure]]
    attr_accessor :payment_processing_failures

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_id'] = 'ClientId'
      @_hash['location_id'] = 'LocationId'
      @_hash['contract_id'] = 'ContractId'
      @_hash['client_contract_id'] = 'ClientContractId'
      @_hash['totals'] = 'Totals'
      @_hash['payment_processing_failures'] = 'PaymentProcessingFailures'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        client_id
        location_id
        contract_id
        client_contract_id
        totals
        payment_processing_failures
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = SKIP, location_id = SKIP, contract_id = SKIP,
                   client_contract_id = SKIP, totals = SKIP,
                   payment_processing_failures = SKIP)
      @client_id = client_id unless client_id == SKIP
      @location_id = location_id unless location_id == SKIP
      @contract_id = contract_id unless contract_id == SKIP
      @client_contract_id = client_contract_id unless client_contract_id == SKIP
      @totals = totals unless totals == SKIP
      unless payment_processing_failures == SKIP
        @payment_processing_failures =
          payment_processing_failures
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      contract_id = hash.key?('ContractId') ? hash['ContractId'] : SKIP
      client_contract_id =
        hash.key?('ClientContractId') ? hash['ClientContractId'] : SKIP
      totals = PurchaseContractResponseTotals.from_hash(hash['Totals']) if hash['Totals']
      # Parameter is an array, so we need to iterate through it
      payment_processing_failures = nil
      unless hash['PaymentProcessingFailures'].nil?
        payment_processing_failures = []
        hash['PaymentProcessingFailures'].each do |structure|
          payment_processing_failures << (PaymentProcessingFailure.from_hash(structure) if structure)
        end
      end

      payment_processing_failures = SKIP unless hash.key?('PaymentProcessingFailures')

      # Create object from extracted values.
      PurchaseContractResponse.new(client_id,
                                   location_id,
                                   contract_id,
                                   client_contract_id,
                                   totals,
                                   payment_processing_failures)
    end
  end
end
