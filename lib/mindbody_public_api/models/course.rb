# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # A course.
  class Course < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The course ID.
    # @return [Integer]
    attr_accessor :id

    # The course name.
    # @return [String]
    attr_accessor :name

    # A description of the course.
    # @return [String]
    attr_accessor :description

    # Any notes that have been written about the course.
    # @return [String]
    attr_accessor :notes

    # Date and time that the course starts.
    # @return [DateTime]
    attr_accessor :start_date

    # Date and time that the course ends.
    # @return [DateTime]
    attr_accessor :end_date

    # Date and time that the course ends.
    # @return [Location]
    attr_accessor :location

    # The Staff
    # @return [Staff]
    attr_accessor :organizer

    # The Staff
    # @return [Program]
    attr_accessor :program

    # The URL of the image associated with this course, if one exists.
    # @return [String]
    attr_accessor :image_url

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['description'] = 'Description'
      @_hash['notes'] = 'Notes'
      @_hash['start_date'] = 'StartDate'
      @_hash['end_date'] = 'EndDate'
      @_hash['location'] = 'Location'
      @_hash['organizer'] = 'Organizer'
      @_hash['program'] = 'Program'
      @_hash['image_url'] = 'ImageUrl'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        description
        notes
        start_date
        end_date
        location
        organizer
        program
        image_url
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, name = SKIP, description = SKIP, notes = SKIP,
                   start_date = SKIP, end_date = SKIP, location = SKIP,
                   organizer = SKIP, program = SKIP, image_url = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @description = description unless description == SKIP
      @notes = notes unless notes == SKIP
      @start_date = start_date unless start_date == SKIP
      @end_date = end_date unless end_date == SKIP
      @location = location unless location == SKIP
      @organizer = organizer unless organizer == SKIP
      @program = program unless program == SKIP
      @image_url = image_url unless image_url == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      start_date = if hash.key?('StartDate')
                     (DateTimeHelper.from_rfc3339(hash['StartDate']) if hash['StartDate'])
                   else
                     SKIP
                   end
      end_date = if hash.key?('EndDate')
                   (DateTimeHelper.from_rfc3339(hash['EndDate']) if hash['EndDate'])
                 else
                   SKIP
                 end
      location = Location.from_hash(hash['Location']) if hash['Location']
      organizer = Staff.from_hash(hash['Organizer']) if hash['Organizer']
      program = Program.from_hash(hash['Program']) if hash['Program']
      image_url = hash.key?('ImageUrl') ? hash['ImageUrl'] : SKIP

      # Create object from extracted values.
      Course.new(id,
                 name,
                 description,
                 notes,
                 start_date,
                 end_date,
                 location,
                 organizer,
                 program,
                 image_url)
    end

    def to_custom_start_date
      DateTimeHelper.to_rfc3339(start_date)
    end

    def to_custom_end_date
      DateTimeHelper.to_rfc3339(end_date)
    end
  end
end
