# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # SessionType contains information about the session types in a business.
  class SessionType < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Contains the class description session type. Possible values are:
    # * All
    # * Class
    # * Enrollment
    # * Appointment
    # * Resource
    # * Media
    # * Arrival
    # @return [TypeEnum]
    attr_accessor :type

    # The default amount of time that a session of this type typically lasts.
    # @return [Integer]
    attr_accessor :default_time_length

    # The amount of time that a session of this type will last for a specific
    # Staff (when applicable.)
    # @return [Integer]
    attr_accessor :staff_time_length

    # This session type’s unique ID.
    # @return [Integer]
    attr_accessor :id

    # The name of this session type.
    # @return [String]
    attr_accessor :name

    # The online description associated with the appointment.
    # @return [String]
    attr_accessor :online_description

    # The number of sessions that this session type deducts from the pricing
    # option used to pay for this type of session.
    # @return [Integer]
    attr_accessor :num_deducted

    # This session type’s service category ID.
    # @return [Integer]
    attr_accessor :program_id

    # This session type’s category.
    # @return [String]
    attr_accessor :category

    # This session type’s category ID.
    # @return [Integer]
    attr_accessor :category_id

    # This session type’s subcategory.
    # @return [String]
    attr_accessor :subcategory

    # This session type’s subcategory ID.
    # @return [Integer]
    attr_accessor :subcategory_id

    # This session type’s Add On Flag.
    # @return [TrueClass | FalseClass]
    attr_accessor :available_for_add_on

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'Type'
      @_hash['default_time_length'] = 'DefaultTimeLength'
      @_hash['staff_time_length'] = 'StaffTimeLength'
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['online_description'] = 'OnlineDescription'
      @_hash['num_deducted'] = 'NumDeducted'
      @_hash['program_id'] = 'ProgramId'
      @_hash['category'] = 'Category'
      @_hash['category_id'] = 'CategoryId'
      @_hash['subcategory'] = 'Subcategory'
      @_hash['subcategory_id'] = 'SubcategoryId'
      @_hash['available_for_add_on'] = 'AvailableForAddOn'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        type
        default_time_length
        staff_time_length
        id
        name
        online_description
        num_deducted
        program_id
        category
        category_id
        subcategory
        subcategory_id
        available_for_add_on
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type = SKIP, default_time_length = SKIP,
                   staff_time_length = SKIP, id = SKIP, name = SKIP,
                   online_description = SKIP, num_deducted = SKIP,
                   program_id = SKIP, category = SKIP, category_id = SKIP,
                   subcategory = SKIP, subcategory_id = SKIP,
                   available_for_add_on = SKIP)
      @type = type unless type == SKIP
      @default_time_length = default_time_length unless default_time_length == SKIP
      @staff_time_length = staff_time_length unless staff_time_length == SKIP
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @online_description = online_description unless online_description == SKIP
      @num_deducted = num_deducted unless num_deducted == SKIP
      @program_id = program_id unless program_id == SKIP
      @category = category unless category == SKIP
      @category_id = category_id unless category_id == SKIP
      @subcategory = subcategory unless subcategory == SKIP
      @subcategory_id = subcategory_id unless subcategory_id == SKIP
      @available_for_add_on = available_for_add_on unless available_for_add_on == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash.key?('Type') ? hash['Type'] : SKIP
      default_time_length =
        hash.key?('DefaultTimeLength') ? hash['DefaultTimeLength'] : SKIP
      staff_time_length =
        hash.key?('StaffTimeLength') ? hash['StaffTimeLength'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      online_description =
        hash.key?('OnlineDescription') ? hash['OnlineDescription'] : SKIP
      num_deducted = hash.key?('NumDeducted') ? hash['NumDeducted'] : SKIP
      program_id = hash.key?('ProgramId') ? hash['ProgramId'] : SKIP
      category = hash.key?('Category') ? hash['Category'] : SKIP
      category_id = hash.key?('CategoryId') ? hash['CategoryId'] : SKIP
      subcategory = hash.key?('Subcategory') ? hash['Subcategory'] : SKIP
      subcategory_id = hash.key?('SubcategoryId') ? hash['SubcategoryId'] : SKIP
      available_for_add_on =
        hash.key?('AvailableForAddOn') ? hash['AvailableForAddOn'] : SKIP

      # Create object from extracted values.
      SessionType.new(type,
                      default_time_length,
                      staff_time_length,
                      id,
                      name,
                      online_description,
                      num_deducted,
                      program_id,
                      category,
                      category_id,
                      subcategory,
                      subcategory_id,
                      available_for_add_on)
    end
  end
end
