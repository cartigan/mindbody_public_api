# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # User Model.
  class User < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The user’s ID at the business. This is always 0 for Admin and Owner type
    # users.
    # @return [Integer]
    attr_accessor :id

    # The user’s first name.
    # @return [String]
    attr_accessor :first_name

    # The user’s last name.
    # @return [String]
    attr_accessor :last_name

    # The user’s type. Possible values are:
    # * Staff
    # * Owner
    # * Admin
    # @return [String]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['first_name'] = 'FirstName'
      @_hash['last_name'] = 'LastName'
      @_hash['type'] = 'Type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        first_name
        last_name
        type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, first_name = SKIP, last_name = SKIP, type = SKIP)
      @id = id unless id == SKIP
      @first_name = first_name unless first_name == SKIP
      @last_name = last_name unless last_name == SKIP
      @type = type unless type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      first_name = hash.key?('FirstName') ? hash['FirstName'] : SKIP
      last_name = hash.key?('LastName') ? hash['LastName'] : SKIP
      type = hash.key?('Type') ? hash['Type'] : SKIP

      # Create object from extracted values.
      User.new(id,
               first_name,
               last_name,
               type)
    end
  end
end
