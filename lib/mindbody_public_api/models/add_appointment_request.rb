# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # AddAppointmentRequest Model.
  class AddAppointmentRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, indicates that a payment should be applied to the
    # appointment. 
    # <br />Default: **true**
    # @return [TrueClass | FalseClass]
    attr_accessor :apply_payment

    # The RRSID of the client for whom the new appointment is being made.
    # @return [String]
    attr_accessor :client_id

    # The duration of the appointment. This parameter is used to change the
    # default duration of an appointment.
    # @return [Integer]
    attr_accessor :duration

    # The action taken to add this appointment. Possible values are: confirm,
    # unconfirm, arrive, unarrive, cancel, latecancel, complete.
    # @return [String]
    attr_accessor :execute

    # The end date and time of the new appointment. <br />
    # Default: **StartDateTime**, offset by the staff member’s default
    # appointment duration.
    # @return [DateTime]
    attr_accessor :end_date_time

    # The client’s service provider gender preference.
    # @return [String]
    attr_accessor :gender_preference

    # The ID of the location where the new appointment is to take place.
    # @return [Integer]
    attr_accessor :location_id

    # Any general notes about this appointment.
    # @return [String]
    attr_accessor :notes

    # If a user has Complementary and Alternative Medicine features enabled,
    # this parameter assigns a provider ID to the appointment.
    # @return [String]
    attr_accessor :provider_id

    # A list of resource IDs to associate with the new appointment.
    # @return [Array[Integer]]
    attr_accessor :resource_ids

    # Whether to send client an email for cancellations. An email is sent only
    # if the client has an email address and automatic emails have been set up. 
    # <br />Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email

    # The session type associated with the new appointment.
    # @return [Integer]
    attr_accessor :session_type_id

    # The ID of the staff member who is adding the new appointment.
    # @return [Integer]
    attr_accessor :staff_id

    # When `true`, indicates that the staff member was requested specifically by
    # the client.
    # @return [TrueClass | FalseClass]
    attr_accessor :staff_requested

    # The start date and time of the new appointment.
    # @return [DateTime]
    attr_accessor :start_date_time

    # When true, indicates that the method is to be validated, but no new
    # appointment data is added. 
    # <br />Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # When `true`, indicates that the client should be added to a specific
    # appointment waiting list.
    # When `false`, the client should not be added to the waiting list.
    # Default: **false**
    # @return [TrueClass | FalseClass]
    attr_accessor :is_waitlist

    # Optional external key for api partners.
    # @return [String]
    attr_accessor :partner_external_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['apply_payment'] = 'ApplyPayment'
      @_hash['client_id'] = 'ClientId'
      @_hash['duration'] = 'Duration'
      @_hash['execute'] = 'Execute'
      @_hash['end_date_time'] = 'EndDateTime'
      @_hash['gender_preference'] = 'GenderPreference'
      @_hash['location_id'] = 'LocationId'
      @_hash['notes'] = 'Notes'
      @_hash['provider_id'] = 'ProviderId'
      @_hash['resource_ids'] = 'ResourceIds'
      @_hash['send_email'] = 'SendEmail'
      @_hash['session_type_id'] = 'SessionTypeId'
      @_hash['staff_id'] = 'StaffId'
      @_hash['staff_requested'] = 'StaffRequested'
      @_hash['start_date_time'] = 'StartDateTime'
      @_hash['test'] = 'Test'
      @_hash['is_waitlist'] = 'IsWaitlist'
      @_hash['partner_external_id'] = 'PartnerExternalId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        apply_payment
        duration
        execute
        end_date_time
        gender_preference
        notes
        provider_id
        resource_ids
        send_email
        staff_requested
        test
        is_waitlist
        partner_external_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_id = nil, location_id = nil, session_type_id = nil,
                   staff_id = nil, start_date_time = nil, apply_payment = SKIP,
                   duration = SKIP, execute = SKIP, end_date_time = SKIP,
                   gender_preference = SKIP, notes = SKIP, provider_id = SKIP,
                   resource_ids = SKIP, send_email = SKIP,
                   staff_requested = SKIP, test = SKIP, is_waitlist = SKIP,
                   partner_external_id = SKIP)
      @apply_payment = apply_payment unless apply_payment == SKIP
      @client_id = client_id
      @duration = duration unless duration == SKIP
      @execute = execute unless execute == SKIP
      @end_date_time = end_date_time unless end_date_time == SKIP
      @gender_preference = gender_preference unless gender_preference == SKIP
      @location_id = location_id
      @notes = notes unless notes == SKIP
      @provider_id = provider_id unless provider_id == SKIP
      @resource_ids = resource_ids unless resource_ids == SKIP
      @send_email = send_email unless send_email == SKIP
      @session_type_id = session_type_id
      @staff_id = staff_id
      @staff_requested = staff_requested unless staff_requested == SKIP
      @start_date_time = start_date_time
      @test = test unless test == SKIP
      @is_waitlist = is_waitlist unless is_waitlist == SKIP
      @partner_external_id = partner_external_id unless partner_external_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_id = hash.key?('ClientId') ? hash['ClientId'] : nil
      location_id = hash.key?('LocationId') ? hash['LocationId'] : nil
      session_type_id = hash.key?('SessionTypeId') ? hash['SessionTypeId'] : nil
      staff_id = hash.key?('StaffId') ? hash['StaffId'] : nil
      start_date_time = if hash.key?('StartDateTime')
                          (DateTimeHelper.from_rfc3339(hash['StartDateTime']) if hash['StartDateTime'])
                        end
      apply_payment = hash.key?('ApplyPayment') ? hash['ApplyPayment'] : SKIP
      duration = hash.key?('Duration') ? hash['Duration'] : SKIP
      execute = hash.key?('Execute') ? hash['Execute'] : SKIP
      end_date_time = if hash.key?('EndDateTime')
                        (DateTimeHelper.from_rfc3339(hash['EndDateTime']) if hash['EndDateTime'])
                      else
                        SKIP
                      end
      gender_preference =
        hash.key?('GenderPreference') ? hash['GenderPreference'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      provider_id = hash.key?('ProviderId') ? hash['ProviderId'] : SKIP
      resource_ids = hash.key?('ResourceIds') ? hash['ResourceIds'] : SKIP
      send_email = hash.key?('SendEmail') ? hash['SendEmail'] : SKIP
      staff_requested =
        hash.key?('StaffRequested') ? hash['StaffRequested'] : SKIP
      test = hash.key?('Test') ? hash['Test'] : SKIP
      is_waitlist = hash.key?('IsWaitlist') ? hash['IsWaitlist'] : SKIP
      partner_external_id =
        hash.key?('PartnerExternalId') ? hash['PartnerExternalId'] : SKIP

      # Create object from extracted values.
      AddAppointmentRequest.new(client_id,
                                location_id,
                                session_type_id,
                                staff_id,
                                start_date_time,
                                apply_payment,
                                duration,
                                execute,
                                end_date_time,
                                gender_preference,
                                notes,
                                provider_id,
                                resource_ids,
                                send_email,
                                staff_requested,
                                test,
                                is_waitlist,
                                partner_external_id)
    end

    def to_custom_end_date_time
      DateTimeHelper.to_rfc3339(end_date_time)
    end

    def to_custom_start_date_time
      DateTimeHelper.to_rfc3339(start_date_time)
    end
  end
end
