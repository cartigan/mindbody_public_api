# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Package Model.
  class Package < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ID of the package.
    # @return [Integer]
    attr_accessor :id

    # The name of the package.
    # @return [String]
    attr_accessor :name

    # The discount percentage applied to the package.
    # @return [Float]
    attr_accessor :discount_percentage

    # When `true`, only products that can be sold online are returned.<br />
    # When `false`, all products are returned.
    # @return [TrueClass | FalseClass]
    attr_accessor :sell_online

    # Information about the services in the packages.
    # @return [Array[Service]]
    attr_accessor :services

    # Information about the products in the packages.
    # @return [Array[Product]]
    attr_accessor :products

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['discount_percentage'] = 'DiscountPercentage'
      @_hash['sell_online'] = 'SellOnline'
      @_hash['services'] = 'Services'
      @_hash['products'] = 'Products'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        discount_percentage
        sell_online
        services
        products
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, name = SKIP, discount_percentage = SKIP,
                   sell_online = SKIP, services = SKIP, products = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @discount_percentage = discount_percentage unless discount_percentage == SKIP
      @sell_online = sell_online unless sell_online == SKIP
      @services = services unless services == SKIP
      @products = products unless products == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      discount_percentage =
        hash.key?('DiscountPercentage') ? hash['DiscountPercentage'] : SKIP
      sell_online = hash.key?('SellOnline') ? hash['SellOnline'] : SKIP
      # Parameter is an array, so we need to iterate through it
      services = nil
      unless hash['Services'].nil?
        services = []
        hash['Services'].each do |structure|
          services << (Service.from_hash(structure) if structure)
        end
      end

      services = SKIP unless hash.key?('Services')
      # Parameter is an array, so we need to iterate through it
      products = nil
      unless hash['Products'].nil?
        products = []
        hash['Products'].each do |structure|
          products << (Product.from_hash(structure) if structure)
        end
      end

      products = SKIP unless hash.key?('Products')

      # Create object from extracted values.
      Package.new(id,
                  name,
                  discount_percentage,
                  sell_online,
                  services,
                  products)
    end
  end
end
