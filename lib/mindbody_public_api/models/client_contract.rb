# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # A client contract
  class ClientContract < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date on which the contract was signed.
    # @return [DateTime]
    attr_accessor :agreement_date

    # The status of the clientâ€™s autopay.
    # @return [AutopayStatusEnum]
    attr_accessor :autopay_status

    # The name of the contract.
    # @return [String]
    attr_accessor :contract_name

    # The date that the contract expires.
    # @return [DateTime]
    attr_accessor :end_date

    # The unique ID of the sale of the contract. Each time a contract is sold,
    # this ID increases sequentially.
    # @return [Integer]
    attr_accessor :id

    # The ID of the location where the contract was issued.
    # @return [Integer]
    attr_accessor :origination_location_id

    # The date that the contract became active.
    # @return [DateTime]
    attr_accessor :start_date

    # The ID of the site where the contract was issued.
    # @return [Integer]
    attr_accessor :site_id

    # Contains details of the autopay events.
    # @return [Array[UpcomingAutopayEvent]]
    attr_accessor :upcoming_autopay_events

    # The ID of the contract
    # @return [Integer]
    attr_accessor :contract_id

    # The date that the contract was terminated.
    # @return [DateTime]
    attr_accessor :termination_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['agreement_date'] = 'AgreementDate'
      @_hash['autopay_status'] = 'AutopayStatus'
      @_hash['contract_name'] = 'ContractName'
      @_hash['end_date'] = 'EndDate'
      @_hash['id'] = 'Id'
      @_hash['origination_location_id'] = 'OriginationLocationId'
      @_hash['start_date'] = 'StartDate'
      @_hash['site_id'] = 'SiteId'
      @_hash['upcoming_autopay_events'] = 'UpcomingAutopayEvents'
      @_hash['contract_id'] = 'ContractID'
      @_hash['termination_date'] = 'TerminationDate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        agreement_date
        autopay_status
        contract_name
        end_date
        id
        origination_location_id
        start_date
        site_id
        upcoming_autopay_events
        contract_id
        termination_date
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(agreement_date = SKIP, autopay_status = SKIP,
                   contract_name = SKIP, end_date = SKIP, id = SKIP,
                   origination_location_id = SKIP, start_date = SKIP,
                   site_id = SKIP, upcoming_autopay_events = SKIP,
                   contract_id = SKIP, termination_date = SKIP)
      @agreement_date = agreement_date unless agreement_date == SKIP
      @autopay_status = autopay_status unless autopay_status == SKIP
      @contract_name = contract_name unless contract_name == SKIP
      @end_date = end_date unless end_date == SKIP
      @id = id unless id == SKIP
      @origination_location_id = origination_location_id unless origination_location_id == SKIP
      @start_date = start_date unless start_date == SKIP
      @site_id = site_id unless site_id == SKIP
      @upcoming_autopay_events = upcoming_autopay_events unless upcoming_autopay_events == SKIP
      @contract_id = contract_id unless contract_id == SKIP
      @termination_date = termination_date unless termination_date == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      agreement_date = if hash.key?('AgreementDate')
                         (DateTimeHelper.from_rfc3339(hash['AgreementDate']) if hash['AgreementDate'])
                       else
                         SKIP
                       end
      autopay_status = hash.key?('AutopayStatus') ? hash['AutopayStatus'] : SKIP
      contract_name = hash.key?('ContractName') ? hash['ContractName'] : SKIP
      end_date = if hash.key?('EndDate')
                   (DateTimeHelper.from_rfc3339(hash['EndDate']) if hash['EndDate'])
                 else
                   SKIP
                 end
      id = hash.key?('Id') ? hash['Id'] : SKIP
      origination_location_id =
        hash.key?('OriginationLocationId') ? hash['OriginationLocationId'] : SKIP
      start_date = if hash.key?('StartDate')
                     (DateTimeHelper.from_rfc3339(hash['StartDate']) if hash['StartDate'])
                   else
                     SKIP
                   end
      site_id = hash.key?('SiteId') ? hash['SiteId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      upcoming_autopay_events = nil
      unless hash['UpcomingAutopayEvents'].nil?
        upcoming_autopay_events = []
        hash['UpcomingAutopayEvents'].each do |structure|
          upcoming_autopay_events << (UpcomingAutopayEvent.from_hash(structure) if structure)
        end
      end

      upcoming_autopay_events = SKIP unless hash.key?('UpcomingAutopayEvents')
      contract_id = hash.key?('ContractID') ? hash['ContractID'] : SKIP
      termination_date = if hash.key?('TerminationDate')
                           (DateTimeHelper.from_rfc3339(hash['TerminationDate']) if hash['TerminationDate'])
                         else
                           SKIP
                         end

      # Create object from extracted values.
      ClientContract.new(agreement_date,
                         autopay_status,
                         contract_name,
                         end_date,
                         id,
                         origination_location_id,
                         start_date,
                         site_id,
                         upcoming_autopay_events,
                         contract_id,
                         termination_date)
    end

    def to_custom_agreement_date
      DateTimeHelper.to_rfc3339(agreement_date)
    end

    def to_custom_end_date
      DateTimeHelper.to_rfc3339(end_date)
    end

    def to_custom_start_date
      DateTimeHelper.to_rfc3339(start_date)
    end

    def to_custom_termination_date
      DateTimeHelper.to_rfc3339(termination_date)
    end
  end
end
