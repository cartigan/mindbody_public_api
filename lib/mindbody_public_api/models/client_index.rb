# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # A client index.
  class ClientIndex < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID of the client index.
    # @return [Integer]
    attr_accessor :id

    # The name of the client index.
    # @return [String]
    attr_accessor :name

    # When `true`, indicates that the index is required when creating profiles
    # in business mode.
    # @return [TrueClass | FalseClass]
    attr_accessor :required_business_mode

    # When `true`, indicates that the index is required when creating profiles
    # in consumer mode.
    # @return [TrueClass | FalseClass]
    attr_accessor :required_consumer_mode

    # Contains a list with a single object representing the index value assigned
    # to the client index.
    # @return [Array[ClientIndexValue]]
    attr_accessor :values

    # The action performed on this object.
    # @return [Action7Enum]
    attr_accessor :action

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['required_business_mode'] = 'RequiredBusinessMode'
      @_hash['required_consumer_mode'] = 'RequiredConsumerMode'
      @_hash['values'] = 'Values'
      @_hash['action'] = 'Action'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        required_business_mode
        required_consumer_mode
        values
        action
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, name = SKIP, required_business_mode = SKIP,
                   required_consumer_mode = SKIP, values = SKIP, action = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @required_business_mode = required_business_mode unless required_business_mode == SKIP
      @required_consumer_mode = required_consumer_mode unless required_consumer_mode == SKIP
      @values = values unless values == SKIP
      @action = action unless action == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      required_business_mode =
        hash.key?('RequiredBusinessMode') ? hash['RequiredBusinessMode'] : SKIP
      required_consumer_mode =
        hash.key?('RequiredConsumerMode') ? hash['RequiredConsumerMode'] : SKIP
      # Parameter is an array, so we need to iterate through it
      values = nil
      unless hash['Values'].nil?
        values = []
        hash['Values'].each do |structure|
          values << (ClientIndexValue.from_hash(structure) if structure)
        end
      end

      values = SKIP unless hash.key?('Values')
      action = hash.key?('Action') ? hash['Action'] : SKIP

      # Create object from extracted values.
      ClientIndex.new(id,
                      name,
                      required_business_mode,
                      required_consumer_mode,
                      values,
                      action)
    end
  end
end
