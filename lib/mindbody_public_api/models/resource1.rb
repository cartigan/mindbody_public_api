# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # Resource1 Model.
  class Resource1 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :location_id

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :is_active

    # TODO: Write general description for this method
    # @return [Array[ScheduleType4Enum]]
    attr_accessor :schedule_types

    # TODO: Write general description for this method
    # @return [Array[Integer]]
    attr_accessor :program_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['location_id'] = 'LocationId'
      @_hash['is_active'] = 'IsActive'
      @_hash['schedule_types'] = 'ScheduleTypes'
      @_hash['program_ids'] = 'ProgramIds'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        location_id
        is_active
        schedule_types
        program_ids
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, name = SKIP, location_id = SKIP, is_active = SKIP,
                   schedule_types = SKIP, program_ids = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @location_id = location_id unless location_id == SKIP
      @is_active = is_active unless is_active == SKIP
      @schedule_types = schedule_types unless schedule_types == SKIP
      @program_ids = program_ids unless program_ids == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      location_id = hash.key?('LocationId') ? hash['LocationId'] : SKIP
      is_active = hash.key?('IsActive') ? hash['IsActive'] : SKIP
      schedule_types = hash.key?('ScheduleTypes') ? hash['ScheduleTypes'] : SKIP
      program_ids = hash.key?('ProgramIds') ? hash['ProgramIds'] : SKIP

      # Create object from extracted values.
      Resource1.new(id,
                    name,
                    location_id,
                    is_active,
                    schedule_types,
                    program_ids)
    end
  end
end
