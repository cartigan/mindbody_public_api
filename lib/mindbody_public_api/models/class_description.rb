# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MindbodyPublicApi
  # Represents a class definition. The class meets at the start time, goes until
  # the end time.
  class ClassDescription < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, indicates that the business can assign this class description
    # to new class schedules.<br />
    # When `false`, indicates that the business cannot assign this class
    # description to new class schedules.
    # @return [TrueClass | FalseClass]
    attr_accessor :active

    # The long version of the class description.
    # @return [String]
    attr_accessor :description

    # The class description's ID.
    # @return [Integer]
    attr_accessor :id

    # The class description's image URL, if any. If it does not exist, nothing
    # is returned.
    # @return [String]
    attr_accessor :image_url

    # The date this class description was last modified.
    # @return [DateTime]
    attr_accessor :last_updated

    # A session level.
    # @return [Level]
    attr_accessor :level

    # The name of this class description.
    # @return [String]
    attr_accessor :name

    # Any notes about the class description.
    # @return [String]
    attr_accessor :notes

    # Any prerequisites for the class.
    # @return [String]
    attr_accessor :prereq

    # Any prerequisites for the class.
    # @return [Program]
    attr_accessor :program

    # SessionType contains information about the session types in a business.
    # @return [SessionType]
    attr_accessor :session_type

    # The category of this class description.
    # @return [String]
    attr_accessor :category

    # The category ID of this class description.
    # @return [Integer]
    attr_accessor :category_id

    # The subcategory of this class description.
    # @return [String]
    attr_accessor :subcategory

    # The subcategory ID of this class description.
    # @return [Integer]
    attr_accessor :subcategory_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['active'] = 'Active'
      @_hash['description'] = 'Description'
      @_hash['id'] = 'Id'
      @_hash['image_url'] = 'ImageURL'
      @_hash['last_updated'] = 'LastUpdated'
      @_hash['level'] = 'Level'
      @_hash['name'] = 'Name'
      @_hash['notes'] = 'Notes'
      @_hash['prereq'] = 'Prereq'
      @_hash['program'] = 'Program'
      @_hash['session_type'] = 'SessionType'
      @_hash['category'] = 'Category'
      @_hash['category_id'] = 'CategoryId'
      @_hash['subcategory'] = 'Subcategory'
      @_hash['subcategory_id'] = 'SubcategoryId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        active
        description
        id
        image_url
        last_updated
        level
        name
        notes
        prereq
        program
        session_type
        category
        category_id
        subcategory
        subcategory_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(active = SKIP, description = SKIP, id = SKIP,
                   image_url = SKIP, last_updated = SKIP, level = SKIP,
                   name = SKIP, notes = SKIP, prereq = SKIP, program = SKIP,
                   session_type = SKIP, category = SKIP, category_id = SKIP,
                   subcategory = SKIP, subcategory_id = SKIP)
      @active = active unless active == SKIP
      @description = description unless description == SKIP
      @id = id unless id == SKIP
      @image_url = image_url unless image_url == SKIP
      @last_updated = last_updated unless last_updated == SKIP
      @level = level unless level == SKIP
      @name = name unless name == SKIP
      @notes = notes unless notes == SKIP
      @prereq = prereq unless prereq == SKIP
      @program = program unless program == SKIP
      @session_type = session_type unless session_type == SKIP
      @category = category unless category == SKIP
      @category_id = category_id unless category_id == SKIP
      @subcategory = subcategory unless subcategory == SKIP
      @subcategory_id = subcategory_id unless subcategory_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      active = hash.key?('Active') ? hash['Active'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      id = hash.key?('Id') ? hash['Id'] : SKIP
      image_url = hash.key?('ImageURL') ? hash['ImageURL'] : SKIP
      last_updated = if hash.key?('LastUpdated')
                       (DateTimeHelper.from_rfc3339(hash['LastUpdated']) if hash['LastUpdated'])
                     else
                       SKIP
                     end
      level = Level.from_hash(hash['Level']) if hash['Level']
      name = hash.key?('Name') ? hash['Name'] : SKIP
      notes = hash.key?('Notes') ? hash['Notes'] : SKIP
      prereq = hash.key?('Prereq') ? hash['Prereq'] : SKIP
      program = Program.from_hash(hash['Program']) if hash['Program']
      session_type = SessionType.from_hash(hash['SessionType']) if hash['SessionType']
      category = hash.key?('Category') ? hash['Category'] : SKIP
      category_id = hash.key?('CategoryId') ? hash['CategoryId'] : SKIP
      subcategory = hash.key?('Subcategory') ? hash['Subcategory'] : SKIP
      subcategory_id = hash.key?('SubcategoryId') ? hash['SubcategoryId'] : SKIP

      # Create object from extracted values.
      ClassDescription.new(active,
                           description,
                           id,
                           image_url,
                           last_updated,
                           level,
                           name,
                           notes,
                           prereq,
                           program,
                           session_type,
                           category,
                           category_id,
                           subcategory,
                           subcategory_id)
    end

    def to_custom_last_updated
      DateTimeHelper.to_rfc3339(last_updated)
    end
  end
end
