# mindbody_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MindbodyPublicApi
  # A contact log type.
  class ContactLogType < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The Id of the contactlog Type.
    # @return [Integer]
    attr_accessor :id

    # The name of the contactlog Type.
    # @return [String]
    attr_accessor :name

    # Contains the SubType objects, each of which describes the subtypes for a
    # contactlog Type.
    # @return [Array[ContactLogSubType]]
    attr_accessor :sub_types

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['name'] = 'Name'
      @_hash['sub_types'] = 'SubTypes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        sub_types
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, name = SKIP, sub_types = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @sub_types = sub_types unless sub_types == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      # Parameter is an array, so we need to iterate through it
      sub_types = nil
      unless hash['SubTypes'].nil?
        sub_types = []
        hash['SubTypes'].each do |structure|
          sub_types << (ContactLogSubType.from_hash(structure) if structure)
        end
      end

      sub_types = SKIP unless hash.key?('SubTypes')

      # Create object from extracted values.
      ContactLogType.new(id,
                         name,
                         sub_types)
    end
  end
end
